{"version":3,"file":"static/js/2174.f9c34a74.chunk.js","mappings":"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","sources":["model-registry/components/SchemaTable.tsx","model-registry/components/PromoteModelButton.tsx","model-registry/components/ModelStageTransitionFormModal.tsx","model-registry/components/ModelStageTransitionDropdown.tsx","model-registry/components/aliases/ModelVersionViewAliasEditor.tsx","model-registry/components/ModelVersionView.tsx","model-registry/utils/VersionUtils.ts","model-registry/components/ModelVersionPage.tsx","model-registry/utils/SearchUtils.ts","common/hooks/useSafeDeferredValue.ts","model-registry/components/RegisterModelForm.tsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\nimport {\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Typography,\n  useDesignSystemTheme,\n  MinusSquareIcon,\n  PlusSquareIcon,\n  Input,\n  Spacer,\n} from '@databricks/design-system';\nimport { LogModelWithSignatureUrl } from '../../common/constants';\nimport { ColumnSpec, TensorSpec, ColumnType } from '../types/model-schema';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Interpolation, Theme } from '@emotion/react';\nimport { identity, isEmpty, isFunction } from 'lodash';\nimport { useSafeDeferredValue } from '../../common/hooks/useSafeDeferredValue';\n\nconst { Text } = Typography;\nconst INDENTATION_SPACES = 2;\nconst LIMIT_VISIBLE_COLUMNS = 100;\n\ntype Props = {\n  schema?: any;\n  defaultExpandAllRows?: boolean;\n};\n\nfunction getTensorTypeRepr(tensorType: TensorSpec): string {\n  return `Tensor (dtype: ${tensorType['tensor-spec'].dtype}, shape: [${tensorType['tensor-spec'].shape}])`;\n}\n\n// return a formatted string representation of the column type\nfunction getColumnTypeRepr(columnType: ColumnType, indentationLevel: number): string {\n  const { type } = columnType;\n\n  const indentation = ' '.repeat(indentationLevel * INDENTATION_SPACES);\n  if (type === 'object') {\n    const propertyReprs = Object.keys(columnType.properties).map((propertyName) => {\n      const property = columnType.properties[propertyName];\n      const requiredRepr = property.required ? '' : ' (optional)';\n      const propertyRepr = getColumnTypeRepr(property, indentationLevel + 1);\n      const indentOffset = (indentationLevel + 1) * INDENTATION_SPACES;\n\n      return `${' '.repeat(indentOffset)}${propertyName}: ${propertyRepr.slice(indentOffset) + requiredRepr}`;\n    });\n\n    return `${indentation}{\\n${propertyReprs.join(',\\n')}\\n${indentation}}`;\n  }\n\n  if (type === 'array') {\n    const indentOffset = indentationLevel * INDENTATION_SPACES;\n    const itemsTypeRepr = getColumnTypeRepr(columnType.items, indentationLevel).slice(indentOffset);\n    return `${indentation}Array(${itemsTypeRepr})`;\n  }\n\n  return `${indentation}${type}`;\n}\n\nfunction ColumnName({ spec }: { spec: ColumnSpec | TensorSpec }): React.ReactElement {\n  let required = true;\n  if (spec.required !== undefined) {\n    ({ required } = spec);\n  } else if (spec.optional !== undefined && spec.optional) {\n    required = false;\n  }\n  const requiredTag = required ? <Text bold>(required)</Text> : <Text color=\"secondary\">(optional)</Text>;\n\n  const name = 'name' in spec ? spec.name : '-';\n\n  return (\n    <Text css={{ marginLeft: 32 }}>\n      {name} {requiredTag}\n    </Text>\n  );\n}\n\nfunction ColumnSchema({ spec }: { spec: ColumnSpec | TensorSpec }): React.ReactElement {\n  const { theme } = useDesignSystemTheme();\n  const repr = spec.type === 'tensor' ? getTensorTypeRepr(spec) : getColumnTypeRepr(spec, 0);\n\n  return (\n    <pre\n      css={{\n        whiteSpace: 'pre-wrap',\n        padding: theme.spacing.sm,\n        marginTop: theme.spacing.sm,\n        marginBottom: theme.spacing.sm,\n      }}\n    >\n      {repr}\n    </pre>\n  );\n}\n\nconst SchemaTableRow = ({ schemaData }: { schemaData?: (ColumnSpec | TensorSpec)[] }) => {\n  const isEmptySchema = isEmpty(schemaData);\n  const intl = useIntl();\n\n  // Determine if the schema is too large (more than LIMIT_VISIBLE_COLUMNS = 100 rows) to display all at once\n  const isLargeSchema = Boolean(schemaData && schemaData.length > LIMIT_VISIBLE_COLUMNS);\n  const [searchText, setSearchText] = useState('');\n\n  // Defer the search text to avoid blocking the UI when typing\n  const deferredSearchText = useSafeDeferredValue(searchText);\n\n  const filteredSchemaData = useMemo(() => {\n    if (!isLargeSchema) {\n      return schemaData;\n    }\n    const normalizedSearchText = deferredSearchText.toLowerCase();\n    return schemaData\n      ?.filter((schemaRow) => {\n        return (\n          'name' in schemaRow &&\n          schemaRow.name !== null &&\n          String(schemaRow.name).toLowerCase().includes(normalizedSearchText)\n        );\n      })\n      .slice(0, LIMIT_VISIBLE_COLUMNS);\n  }, [schemaData, deferredSearchText, isLargeSchema]);\n\n  if (isEmptySchema) {\n    return (\n      <TableRow>\n        <TableCell>\n          <FormattedMessage\n            defaultMessage=\"No schema. See <link>MLflow docs</link> for how to include\n                     input and output schema with your model.\"\n            description=\"Text for schema table when no schema exists in the model version\n                     page\"\n            values={{\n              link: (chunks: any) => (\n                <a href={LogModelWithSignatureUrl} target=\"_blank\" rel=\"noreferrer\">\n                  {chunks}\n                </a>\n              ),\n            }}\n          />\n        </TableCell>\n      </TableRow>\n    );\n  }\n\n  return (\n    <>\n      {isLargeSchema && (\n        <>\n          <Spacer />\n          <Typography.Hint>\n            <FormattedMessage\n              defaultMessage=\"Schema is too large to display all rows. Please search for a column name to filter the results. Currently showing {currentResults} results from {allResults} total rows.\"\n              description=\"Text for model inputs/outputs schema table when schema is too large to display all rows\"\n              values={{\n                currentResults: filteredSchemaData?.length,\n                allResults: schemaData?.length,\n              }}\n            />\n          </Typography.Hint>\n          <Spacer />\n          <Input\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search for a field',\n              description: 'Placeholder for search input in schema table',\n            })}\n            componentId=\"mlflow.schema_table.search_input\"\n            value={searchText}\n            onChange={(e) => setSearchText(e.target.value)}\n          />\n          <Spacer />\n        </>\n      )}\n      {filteredSchemaData?.map((schemaRow, index) => (\n        <TableRow key={index}>\n          <TableCell css={{ flex: 2, alignItems: 'center' }}>\n            <ColumnName spec={schemaRow} />\n          </TableCell>\n          <TableCell css={{ flex: 3, alignItems: 'center' }}>\n            <ColumnSchema spec={schemaRow} />\n          </TableCell>\n        </TableRow>\n      ))}\n    </>\n  );\n};\n\nexport const SchemaTable = ({ schema, defaultExpandAllRows }: Props) => {\n  const { theme } = useDesignSystemTheme();\n  const [inputsExpanded, setInputsExpanded] = useState(defaultExpandAllRows);\n  const [outputsExpanded, setOutputsExpanded] = useState(defaultExpandAllRows);\n\n  return (\n    <Table css={{ maxWidth: 800 }}>\n      <TableRow isHeader>\n        <TableHeader componentId=\"mlflow.schema_table.header.name\" css={{ flex: 2 }}>\n          <Text bold css={{ paddingLeft: theme.spacing.lg + theme.spacing.xs }}>\n            <FormattedMessage\n              defaultMessage=\"Name\"\n              description=\"Text for name column in schema table in model version page\"\n            />\n          </Text>\n        </TableHeader>\n        <TableHeader componentId=\"mlflow.schema_table.header.type\" css={{ flex: 3 }}>\n          <Text bold>\n            <FormattedMessage\n              defaultMessage=\"Type\"\n              description=\"Text for type column in schema table in model version page\"\n            />\n          </Text>\n        </TableHeader>\n      </TableRow>\n      <>\n        <TableRow onClick={() => setInputsExpanded(!inputsExpanded)} css={{ cursor: 'pointer' }}>\n          <TableCell>\n            <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n              <div\n                css={{\n                  width: theme.spacing.lg,\n                  height: theme.spacing.lg,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  svg: {\n                    color: theme.colors.textSecondary,\n                  },\n                }}\n              >\n                {inputsExpanded ? <MinusSquareIcon /> : <PlusSquareIcon />}\n              </div>\n              <FormattedMessage\n                defaultMessage=\"Inputs ({numInputs})\"\n                description=\"Input section header for schema table in model version page\"\n                values={{\n                  numInputs: schema.inputs.length,\n                }}\n              />\n            </div>\n          </TableCell>\n        </TableRow>\n        {inputsExpanded && <SchemaTableRow schemaData={schema.inputs} />}\n        <TableRow onClick={() => setOutputsExpanded(!outputsExpanded)} css={{ cursor: 'pointer' }}>\n          <TableCell>\n            <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n              <div\n                css={{\n                  width: theme.spacing.lg,\n                  height: theme.spacing.lg,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  svg: {\n                    color: theme.colors.textSecondary,\n                  },\n                }}\n              >\n                {outputsExpanded ? <MinusSquareIcon /> : <PlusSquareIcon />}\n              </div>\n              <FormattedMessage\n                defaultMessage=\"Outputs ({numOutputs})\"\n                description=\"Input section header for schema table in model version page\"\n                values={{\n                  numOutputs: schema.outputs.length,\n                }}\n              />\n            </div>\n          </TableCell>\n        </TableRow>\n        {outputsExpanded && <SchemaTableRow schemaData={schema.outputs} />}\n      </>\n    </Table>\n  );\n};\n","import { Button, Modal, Typography } from '@databricks/design-system';\nimport { debounce } from 'lodash';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport { useNavigate } from '../../common/utils/RoutingUtils';\nimport Utils from '../../common/utils/Utils';\nimport { getModelNameFilter } from '../utils/SearchUtils';\nimport { ReduxState, ThunkDispatch } from '../../redux-types';\nimport { createModelVersionApi, createRegisteredModelApi, searchRegisteredModelsApi } from '../actions';\nimport { ModelRegistryRoutes } from '../routes';\nimport {\n  CREATE_NEW_MODEL_OPTION_VALUE,\n  MODEL_NAME_FIELD,\n  RegisterModelForm,\n  SELECTED_MODEL_FIELD,\n} from './RegisterModelForm';\nimport { ModelVersionInfoEntity } from '../../experiment-tracking/types';\n\nconst MAX_SEARCH_REGISTERED_MODELS = 5;\n\ntype PromoteModelButtonImplProps = {\n  modelVersion: ModelVersionInfoEntity;\n};\n\nexport const PromoteModelButton = (props: PromoteModelButtonImplProps) => {\n  const intl = useIntl();\n  const navigate = useNavigate();\n\n  const createRegisteredModelRequestId = useRef(getUUID());\n  const createModelVersionRequestId = useRef(getUUID());\n\n  const { modelVersion } = props;\n  const [visible, setVisible] = useState(false);\n  const [confirmLoading, setConfirmLoading] = useState(false);\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const modelByName = useSelector((state: ReduxState) => state.entities.modelByName);\n\n  const form = useRef<any>();\n  const showRegisterModal = () => {\n    setVisible(true);\n  };\n\n  const hideRegisterModal = () => {\n    setVisible(false);\n  };\n\n  const resetAndClearModalForm = () => {\n    setVisible(false);\n    setConfirmLoading(false);\n  };\n\n  const handleRegistrationFailure = (e: any) => {\n    setConfirmLoading(false);\n    Utils.logErrorAndNotifyUser(e);\n  };\n\n  const handleSearchRegisteredModels = useCallback(\n    (input: any) => {\n      dispatch(searchRegisteredModelsApi(getModelNameFilter(input), MAX_SEARCH_REGISTERED_MODELS));\n    },\n    [dispatch],\n  );\n\n  const debouncedHandleSearchRegisteredModels = useMemo(\n    () => debounce(handleSearchRegisteredModels, 300),\n    [handleSearchRegisteredModels],\n  );\n\n  const handleCopyModel = () => {\n    form.current.validateFields().then((values: any) => {\n      setConfirmLoading(true);\n      const selectedModelName = values[SELECTED_MODEL_FIELD];\n      const copySource = 'models:/' + modelVersion.name + '/' + modelVersion.version;\n      if (selectedModelName === CREATE_NEW_MODEL_OPTION_VALUE) {\n        const newModelName = values[MODEL_NAME_FIELD];\n        dispatch(createRegisteredModelApi(newModelName, createRegisteredModelRequestId.current))\n          .then(() =>\n            dispatch(\n              createModelVersionApi(\n                newModelName,\n                copySource,\n                modelVersion.run_id,\n                modelVersion.tags,\n                createModelVersionRequestId.current,\n              ),\n            ),\n          )\n          .then((mvResult: any) => {\n            resetAndClearModalForm();\n            const { version } = mvResult.value['model_version'];\n            navigate(ModelRegistryRoutes.getModelVersionPageRoute(newModelName, version));\n          })\n          .catch(handleRegistrationFailure);\n      } else {\n        dispatch(\n          createModelVersionApi(\n            selectedModelName,\n            copySource,\n            modelVersion.run_id,\n            modelVersion.tags,\n            createModelVersionRequestId.current,\n          ),\n        )\n          .then((mvResult: any) => {\n            resetAndClearModalForm();\n            const { version } = mvResult.value['model_version'];\n            navigate(ModelRegistryRoutes.getModelVersionPageRoute(selectedModelName, version));\n          })\n          .catch(handleRegistrationFailure);\n      }\n    });\n  };\n\n  useEffect(() => {\n    dispatch(searchRegisteredModelsApi());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (visible) {\n      dispatch(searchRegisteredModelsApi());\n    }\n  }, [dispatch, visible]);\n\n  const renderRegisterModelForm = () => {\n    return (\n      <>\n        <Typography.Paragraph css={{ marginTop: '-12px' }}>\n          <FormattedMessage\n            defaultMessage=\"Copy your MLflow models to another registered model for\n            simple model promotion across environments. For more mature production-grade setups, we\n            recommend setting up automated model training workflows to produce models in controlled\n            environments. <link>Learn more</link>\"\n            description=\"Model registry > OSS Promote model modal > description paragraph body\"\n            values={{\n              link: (chunks) => (\n                <Typography.Link\n                  componentId=\"codegen_mlflow_app_src_model-registry_components_promotemodelbutton.tsx_140\"\n                  href={\n                    'https://mlflow.org/docs/latest/model-registry.html' +\n                    '#promoting-an-mlflow-model-across-environments'\n                  }\n                  openInNewTab\n                >\n                  {chunks}\n                </Typography.Link>\n              ),\n            }}\n          />\n        </Typography.Paragraph>\n        <RegisterModelForm\n          modelByName={modelByName}\n          innerRef={form}\n          onSearchRegisteredModels={debouncedHandleSearchRegisteredModels}\n          isCopy\n        />\n      </>\n    );\n  };\n\n  return (\n    <div className=\"promote-model-btn-wrapper\">\n      <Button\n        componentId=\"codegen_mlflow_app_src_model-registry_components_promotemodelbutton.tsx_165\"\n        className=\"promote-model-btn\"\n        type=\"primary\"\n        onClick={showRegisterModal}\n      >\n        <FormattedMessage\n          defaultMessage=\"Promote model\"\n          description=\"Button text to pomote the model to a different registered model\"\n        />\n      </Button>\n      <Modal\n        title={\n          <FormattedMessage\n            defaultMessage=\"Promote {sourceModelName} version {sourceModelVersion}\"\n            description=\"Modal title to pomote the model to a different registered model\"\n            values={{ sourceModelName: modelVersion.name, sourceModelVersion: modelVersion.version }}\n          />\n        }\n        // @ts-expect-error TS(2322): Type '{ children: Element; title: any; width: numb... Remove this comment to see the full error message\n        width={640}\n        visible={visible}\n        onOk={handleCopyModel}\n        okText={intl.formatMessage({\n          defaultMessage: 'Promote',\n          description: 'Confirmation text to promote the model',\n        })}\n        cancelText={intl.formatMessage({\n          defaultMessage: 'Cancel',\n          description: 'Cancel text to cancel the flow to copy the model',\n        })}\n        confirmLoading={confirmLoading}\n        onCancel={hideRegisterModal}\n        centered\n      >\n        {renderRegisterModelForm()}\n      </Modal>\n    </div>\n  );\n};\n","import {\n  FormUI,\n  Modal,\n  ModalProps,\n  RHFControlledComponents,\n  Spacer,\n  Tooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { archiveExistingVersionToolTipText, Stages, StageTagComponents } from '../constants';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage } from 'react-intl';\nimport { useEffect } from 'react';\n\nexport interface ModelStageTransitionFormModalValues {\n  comment: string;\n  archiveExistingVersions: boolean;\n}\n\nexport enum ModelStageTransitionFormModalMode {\n  RequestOrDirect,\n  Approve,\n  Reject,\n  Cancel,\n}\n\nexport const ModelStageTransitionFormModal = ({\n  visible,\n  onCancel,\n  toStage,\n  allowArchivingExistingVersions,\n  transitionDescription,\n  onConfirm,\n  mode = ModelStageTransitionFormModalMode.RequestOrDirect,\n}: {\n  toStage?: string;\n  transitionDescription: React.ReactNode;\n  allowArchivingExistingVersions?: boolean;\n  onConfirm?: (values: ModelStageTransitionFormModalValues) => void;\n  mode?: ModelStageTransitionFormModalMode;\n} & Pick<ModalProps, 'visible' | 'onCancel'>) => {\n  const { theme } = useDesignSystemTheme();\n  const form = useForm<ModelStageTransitionFormModalValues>({\n    defaultValues: {\n      comment: '',\n      archiveExistingVersions: false,\n    },\n  });\n\n  const getModalTitle = () => {\n    if (mode === ModelStageTransitionFormModalMode.Approve) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"Approve pending request\"\n          description=\"Title for a model version stage transition modal when approving a pending request\"\n        />\n      );\n    }\n    if (mode === ModelStageTransitionFormModalMode.Reject) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"Reject pending request\"\n          description=\"Title for a model version stage transition modal when rejecting a pending request\"\n        />\n      );\n    }\n    if (mode === ModelStageTransitionFormModalMode.Cancel) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"Cancel pending request\"\n          description=\"Title for a model version stage transition modal when cancelling a pending request\"\n        />\n      );\n    }\n    return (\n      <FormattedMessage\n        defaultMessage=\"Stage transition\"\n        description=\"Title for a model version stage transition modal\"\n      />\n    );\n  };\n\n  // Reset form values when modal is reopened\n  useEffect(() => {\n    if (visible) {\n      form.reset();\n    }\n  }, [form, visible]);\n\n  return (\n    <Modal\n      title={getModalTitle()}\n      componentId=\"mlflow.model_registry.stage_transition_modal_v2\"\n      visible={visible}\n      onCancel={onCancel}\n      okText={\n        <FormattedMessage\n          defaultMessage=\"OK\"\n          description=\"Confirmation button text on the model version stage transition request/approval modal\"\n        />\n      }\n      cancelText={\n        <FormattedMessage\n          defaultMessage=\"Cancel\"\n          description=\"Cancellation button text on the model version stage transition request/approval modal\"\n        />\n      }\n      onOk={onConfirm && form.handleSubmit(onConfirm)}\n    >\n      {transitionDescription}\n      <Spacer size=\"sm\" />\n      <FormUI.Label htmlFor=\"mlflow.model_registry.stage_transition_modal_v2.comment\">Comment</FormUI.Label>\n      <RHFControlledComponents.TextArea\n        name=\"comment\"\n        id=\"mlflow.model_registry.stage_transition_modal_v2.comment\"\n        componentId=\"mlflow.model_registry.stage_transition_modal_v2.comment\"\n        control={form.control}\n        rows={4}\n      />\n      <Spacer size=\"sm\" />\n\n      {allowArchivingExistingVersions && toStage && (\n        <RHFControlledComponents.Checkbox\n          name=\"archiveExistingVersions\"\n          componentId=\"mlflow.model_registry.stage_transition_modal_v2.archive_existing_versions\"\n          control={form.control}\n        >\n          <Tooltip\n            componentId=\"mlflow.model_registry.stage_transition_modal_v2.archive_existing_versions.tooltip\"\n            content={archiveExistingVersionToolTipText(toStage)}\n          >\n            <span css={{ '[role=status]': { marginRight: theme.spacing.xs } }}>\n              <FormattedMessage\n                defaultMessage=\"Transition existing {currentStage} model version to {archivedStage}\"\n                description=\"Description text for checkbox for archiving existing model versions\n                  in the toStage for model version stage transition request\"\n                values={{\n                  currentStage: <span css={{ marginLeft: theme.spacing.xs }}>{StageTagComponents[toStage]}</span>,\n                  archivedStage: (\n                    <span css={{ marginLeft: theme.spacing.xs }}>{StageTagComponents[Stages.ARCHIVED]}</span>\n                  ),\n                }}\n              />\n            </span>\n          </Tooltip>\n        </RHFControlledComponents.Checkbox>\n      )}\n    </Modal>\n  );\n};\n","import React from 'react';\nimport { Dropdown, Menu, ChevronDownIcon, ArrowRightIcon } from '@databricks/design-system';\nimport {\n  Stages,\n  StageTagComponents,\n  ActivityTypes,\n  type PendingModelVersionActivity,\n  ACTIVE_STAGES,\n} from '../constants';\nimport _ from 'lodash';\nimport { FormattedMessage } from 'react-intl';\nimport { ModelStageTransitionFormModal, ModelStageTransitionFormModalValues } from './ModelStageTransitionFormModal';\n\ntype ModelStageTransitionDropdownProps = {\n  currentStage?: string;\n  permissionLevel?: string;\n  onSelect?: (activity: PendingModelVersionActivity, comment?: string, archiveExistingVersions?: boolean) => void;\n};\n\ntype ModelStageTransitionDropdownState = {\n  confirmModalVisible: boolean;\n  confirmingActivity: PendingModelVersionActivity | null;\n  handleConfirm: ((values: ModelStageTransitionFormModalValues) => void) | undefined;\n};\n\nexport class ModelStageTransitionDropdown extends React.Component<\n  ModelStageTransitionDropdownProps,\n  ModelStageTransitionDropdownState\n> {\n  static defaultProps = {\n    currentStage: Stages.NONE,\n  };\n\n  state: ModelStageTransitionDropdownState = {\n    confirmModalVisible: false,\n    confirmingActivity: null,\n    handleConfirm: undefined,\n  };\n\n  handleMenuItemClick = (activity: PendingModelVersionActivity) => {\n    const { onSelect } = this.props;\n    this.setState({\n      confirmModalVisible: true,\n      confirmingActivity: activity,\n      handleConfirm:\n        onSelect &&\n        ((values: ModelStageTransitionFormModalValues) => {\n          this.setState({ confirmModalVisible: false });\n\n          if (values) {\n            const { archiveExistingVersions = false } = values;\n            // @ts-expect-error TS(2722): Cannot invoke an object which is possibly 'undefin... Remove this comment to see the full error message\n            onSelect(activity, archiveExistingVersions);\n            return;\n          }\n        }),\n    });\n  };\n\n  handleConfirmModalCancel = () => {\n    this.setState({ confirmModalVisible: false });\n  };\n\n  getNoneCurrentStages = (currentStage?: string) => {\n    const stages = Object.values(Stages);\n    _.remove(stages, (s) => s === currentStage);\n    return stages;\n  };\n\n  getMenu() {\n    const { currentStage } = this.props;\n    const nonCurrentStages = this.getNoneCurrentStages(currentStage);\n    return (\n      <Menu>\n        {nonCurrentStages.map((stage) => (\n          <Menu.Item\n            key={`transition-to-${stage}`}\n            onClick={() =>\n              this.handleMenuItemClick({\n                type: ActivityTypes.APPLIED_TRANSITION,\n                to_stage: stage,\n              })\n            }\n          >\n            <FormattedMessage\n              defaultMessage=\"Transition to\"\n              description=\"Text for transitioning a model version to a different stage under\n                 dropdown menu in model version page\"\n            />\n            &nbsp;&nbsp;&nbsp;\n            <ArrowRightIcon />\n            &nbsp;&nbsp;&nbsp;\n            {StageTagComponents[stage]}\n          </Menu.Item>\n        ))}\n      </Menu>\n    );\n  }\n\n  renderConfirmModal() {\n    const { confirmModalVisible, confirmingActivity, handleConfirm } = this.state;\n\n    if (!confirmingActivity) {\n      return null;\n    }\n\n    const allowArchivingExistingVersions =\n      confirmingActivity.type === ActivityTypes.APPLIED_TRANSITION &&\n      ACTIVE_STAGES.includes(confirmingActivity.to_stage);\n\n    return (\n      <ModelStageTransitionFormModal\n        visible={confirmModalVisible}\n        toStage={confirmingActivity.to_stage}\n        onConfirm={handleConfirm}\n        onCancel={this.handleConfirmModalCancel}\n        transitionDescription={renderActivityDescription(confirmingActivity)}\n        allowArchivingExistingVersions={allowArchivingExistingVersions}\n      />\n    );\n  }\n\n  render() {\n    const { currentStage } = this.props;\n    return (\n      <span>\n        <Dropdown overlay={this.getMenu()} trigger={['click']} className=\"mlflow-stage-transition-dropdown\">\n          <span>\n            {StageTagComponents[currentStage ?? Stages.NONE]}\n            <ChevronDownIcon css={{ cursor: 'pointer', marginLeft: -4 }} />\n          </span>\n        </Dropdown>\n        {this.renderConfirmModal()}\n      </span>\n    );\n  }\n}\n\nexport const renderActivityDescription = (activity: PendingModelVersionActivity) => {\n  if (activity) {\n    return (\n      <div>\n        <FormattedMessage\n          defaultMessage=\"Transition to\"\n          description=\"Text for activity description under confirmation modal for model\n             version stage transition\"\n        />\n        &nbsp;&nbsp;&nbsp;\n        <ArrowRightIcon />\n        &nbsp;&nbsp;&nbsp;\n        {StageTagComponents[activity.to_stage]}\n      </div>\n    );\n  }\n  return null;\n};\n","import { Button, PencilIcon } from '@databricks/design-system';\nimport type { ModelEntity } from '../../../experiment-tracking/types';\nimport { useEditAliasesModal } from '../../../common/hooks/useEditAliasesModal';\nimport { AliasTag } from '../../../common/components/AliasTag';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport { ThunkDispatch } from '../../../redux-types';\nimport { setModelVersionAliasesApi } from '../../actions';\nimport { mlflowAliasesLearnMoreLink } from '../../constants';\n\nconst getAliasesModalTitle = (version: string) => (\n  <FormattedMessage\n    defaultMessage=\"Add/Edit alias for model version {version}\"\n    description=\"Model registry > model version alias editor > Title of the update alias modal\"\n    values={{ version }}\n  />\n);\n\nexport const ModelVersionViewAliasEditor = ({\n  aliases = [],\n  modelEntity,\n  version,\n  onAliasesModified,\n}: {\n  modelEntity?: ModelEntity;\n  aliases?: string[];\n  version: string;\n  onAliasesModified?: () => void;\n}) => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const { EditAliasesModal, showEditAliasesModal } = useEditAliasesModal({\n    aliases: modelEntity?.aliases ?? [],\n    onSuccess: onAliasesModified,\n    onSave: async (currentlyEditedVersion: string, existingAliases: string[], draftAliases: string[]) =>\n      dispatch(\n        setModelVersionAliasesApi(modelEntity?.name ?? '', currentlyEditedVersion, existingAliases, draftAliases),\n      ),\n    getTitle: getAliasesModalTitle,\n    description: (\n      <FormattedMessage\n        defaultMessage=\"Aliases allow you to assign a mutable, named reference to a particular model version. <link>Learn more</link>\"\n        description=\"Explanation of registered model aliases\"\n        values={{\n          link: (chunks) => (\n            <a href={mlflowAliasesLearnMoreLink} rel=\"noreferrer\" target=\"_blank\">\n              {chunks}\n            </a>\n          ),\n        }}\n      />\n    ),\n  });\n  const onAddEdit = useCallback(() => {\n    showEditAliasesModal(version);\n  }, [showEditAliasesModal, version]);\n  return (\n    <>\n      {EditAliasesModal}\n      {aliases.length < 1 ? (\n        <Button\n          componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversionviewaliaseditor.tsx_29\"\n          size=\"small\"\n          type=\"link\"\n          onClick={onAddEdit}\n          title=\"Add aliases\"\n        >\n          Add\n        </Button>\n      ) : (\n        <div css={{ display: 'flex', flexWrap: 'wrap', alignItems: 'center' }}>\n          {aliases.map((alias) => (\n            <AliasTag compact value={alias} key={alias} />\n          ))}\n          <Button\n            componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversionviewaliaseditor.tsx_37\"\n            size=\"small\"\n            icon={<PencilIcon />}\n            onClick={onAddEdit}\n            title=\"Edit aliases\"\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport _ from 'lodash';\nimport { Link, NavigateFunction } from '../../common/utils/RoutingUtils';\nimport { ModelRegistryRoutes } from '../routes';\nimport { TagList } from '../../common/components/TagList';\nimport { PromoteModelButton } from './PromoteModelButton';\nimport { SchemaTable } from './SchemaTable';\nimport Utils from '../../common/utils/Utils';\nimport { ModelStageTransitionDropdown } from './ModelStageTransitionDropdown';\nimport { Descriptions } from '../../common/components/Descriptions';\nimport { modelStagesMigrationGuideLink } from '../../common/constants';\nimport { Alert, Modal, Button, InfoIcon, LegacyTooltip, Typography } from '@databricks/design-system';\nimport {\n  ModelVersionStatus,\n  StageLabels,\n  StageTagComponents,\n  ModelVersionStatusIcons,\n  DefaultModelVersionStatusMessages,\n  ACTIVE_STAGES,\n  type ModelVersionActivity,\n  type PendingModelVersionActivity,\n} from '../constants';\nimport Routers from '../../experiment-tracking/routes';\nimport { CollapsibleSection } from '../../common/components/CollapsibleSection';\nimport { EditableNote } from '../../common/components/EditableNote';\nimport { EditableTagsTableView } from '../../common/components/EditableTagsTableView';\nimport { getModelVersionTags } from '../reducers';\nimport { setModelVersionTagApi, deleteModelVersionTagApi } from '../actions';\nimport { connect } from 'react-redux';\nimport { OverflowMenu, PageHeader } from '../../shared/building_blocks/PageHeader';\nimport { FormattedMessage, type IntlShape, injectIntl } from 'react-intl';\nimport { extractArtifactPathFromModelSource } from '../utils/VersionUtils';\nimport { withNextModelsUIContext } from '../hooks/useNextModelsUI';\nimport { ModelsNextUIToggleSwitch } from './ModelsNextUIToggleSwitch';\nimport { shouldShowModelsNextUI, shouldUseSharedTaggingUI } from '../../common/utils/FeatureUtils';\nimport { ModelVersionViewAliasEditor } from './aliases/ModelVersionViewAliasEditor';\nimport type { ModelEntity, RunInfoEntity } from '../../experiment-tracking/types';\nimport { ErrorWrapper } from '../../common/utils/ErrorWrapper';\nimport { KeyValueEntity } from '../../common/types';\n\ntype ModelVersionViewImplProps = {\n  modelName?: string;\n  modelVersion?: any;\n  modelEntity?: ModelEntity;\n  schema?: any;\n  activities?: ModelVersionActivity[];\n  transitionRequests?: Record<string, unknown>[];\n  onCreateComment: (...args: any[]) => any;\n  onEditComment: (...args: any[]) => any;\n  onDeleteComment: (...args: any[]) => any;\n  runInfo?: RunInfoEntity;\n  runDisplayName?: string;\n  handleStageTransitionDropdownSelect: (\n    activity: PendingModelVersionActivity,\n    comment?: string,\n    archiveExistingVersions?: boolean,\n  ) => void;\n  deleteModelVersionApi: (...args: any[]) => any;\n  handleEditDescription: (...args: any[]) => any;\n  onAliasesModified: () => void;\n  navigate: NavigateFunction;\n  tags: any;\n  setModelVersionTagApi: (...args: any[]) => any;\n  deleteModelVersionTagApi: (...args: any[]) => any;\n  intl: IntlShape;\n  usingNextModelsUI: boolean;\n};\n\ntype ModelVersionViewImplState = any;\n\nexport class ModelVersionViewImpl extends React.Component<ModelVersionViewImplProps, ModelVersionViewImplState> {\n  state = {\n    isDeleteModalVisible: false,\n    isDeleteModalConfirmLoading: false,\n    showDescriptionEditor: false,\n    isTagsRequestPending: false,\n    isTagAssignmentModalVisible: false,\n    isSavingTags: false,\n    tagSavingError: undefined,\n  };\n\n  formRef = React.createRef();\n\n  sharedTaggingUIEnabled = shouldUseSharedTaggingUI();\n\n  componentDidMount() {\n    const pageTitle = `${this.props.modelName} v${this.props.modelVersion.version} - MLflow Model`;\n    Utils.updatePageTitle(pageTitle);\n  }\n\n  handleDeleteConfirm = () => {\n    const { modelName = '', modelVersion, navigate } = this.props;\n    const { version } = modelVersion;\n    this.showConfirmLoading();\n    this.props\n      .deleteModelVersionApi(modelName, version)\n      .then(() => {\n        navigate(ModelRegistryRoutes.getModelPageRoute(modelName));\n      })\n      .catch((e: any) => {\n        this.hideConfirmLoading();\n        Utils.logErrorAndNotifyUser(e);\n      });\n  };\n\n  showDeleteModal = () => {\n    this.setState({ isDeleteModalVisible: true });\n  };\n\n  hideDeleteModal = () => {\n    this.setState({ isDeleteModalVisible: false });\n  };\n\n  showConfirmLoading = () => {\n    this.setState({ isDeleteModalConfirmLoading: true });\n  };\n\n  hideConfirmLoading = () => {\n    this.setState({ isDeleteModalConfirmLoading: false });\n  };\n\n  handleCancelEditDescription = () => {\n    this.setState({ showDescriptionEditor: false });\n  };\n\n  handleSubmitEditDescription = (description: any) => {\n    return this.props.handleEditDescription(description).then(() => {\n      this.setState({ showDescriptionEditor: false });\n    });\n  };\n\n  startEditingDescription = (e: any) => {\n    e.stopPropagation();\n    this.setState({ showDescriptionEditor: true });\n  };\n\n  getTags = () =>\n    _.sortBy(\n      Utils.getVisibleTagValues(this.props.tags).map(([key, value]) => ({\n        key,\n        name: key,\n        value,\n      })),\n      'name',\n    );\n\n  handleCloseTagAssignmentModal = () => {\n    this.setState({ isTagAssignmentModalVisible: false, tagSavingError: undefined });\n  };\n\n  handleEditTags = () => {\n    this.setState({ isTagAssignmentModalVisible: true, tagSavingError: undefined });\n  };\n\n  handleSaveTags = (newTags: KeyValueEntity[], deletedTags: KeyValueEntity[]): Promise<void> => {\n    this.setState({ isSavingTags: true });\n\n    const { modelName } = this.props;\n    const { version } = this.props.modelVersion;\n\n    const newTagsToSet = newTags.map(({ key, value }) =>\n      this.props.setModelVersionTagApi(modelName, version, key, value),\n    );\n\n    const deletedTagsToDelete = deletedTags.map(({ key }) =>\n      this.props.deleteModelVersionTagApi(modelName, version, key),\n    );\n\n    return Promise.all([...newTagsToSet, ...deletedTagsToDelete])\n      .then(() => {\n        this.setState({ isSavingTags: false });\n      })\n      .catch((error: ErrorWrapper | Error) => {\n        const message = error instanceof ErrorWrapper ? error.getMessageField() : error.message;\n\n        this.setState({ isSavingTags: false, tagSavingError: message });\n      });\n  };\n\n  handleAddTag = (values: any) => {\n    const form = this.formRef.current;\n    const { modelName } = this.props;\n    const { version } = this.props.modelVersion;\n    this.setState({ isTagsRequestPending: true });\n    this.props\n      .setModelVersionTagApi(modelName, version, values.name, values.value)\n      .then(() => {\n        this.setState({ isTagsRequestPending: false });\n        (form as any).resetFields();\n      })\n      .catch((ex: ErrorWrapper | Error) => {\n        this.setState({ isTagsRequestPending: false });\n        // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n        console.error(ex);\n\n        const userVisibleError = ex instanceof ErrorWrapper ? ex.getMessageField() : ex.message;\n\n        Utils.displayGlobalErrorNotification(\n          this.props.intl.formatMessage(\n            {\n              defaultMessage: 'Failed to add tag. Error: {userVisibleError}',\n              description: 'Text for user visible error when adding tag in model version view',\n            },\n            {\n              userVisibleError,\n            },\n          ),\n        );\n      });\n  };\n\n  handleSaveEdit = ({ name, value }: any) => {\n    const { modelName } = this.props;\n    const { version } = this.props.modelVersion;\n    return this.props.setModelVersionTagApi(modelName, version, name, value).catch((ex: ErrorWrapper | Error) => {\n      // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n      console.error(ex);\n\n      const userVisibleError = ex instanceof ErrorWrapper ? ex.getMessageField() : ex.message;\n\n      Utils.displayGlobalErrorNotification(\n        this.props.intl.formatMessage(\n          {\n            defaultMessage: 'Failed to set tag. Error: {userVisibleError}',\n            description: 'Text for user visible error when setting tag in model version view',\n          },\n          {\n            userVisibleError,\n          },\n        ),\n      );\n    });\n  };\n\n  handleDeleteTag = ({ name }: any) => {\n    const { modelName } = this.props;\n    const { version } = this.props.modelVersion;\n    return this.props.deleteModelVersionTagApi(modelName, version, name).catch((ex: ErrorWrapper | Error) => {\n      // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n      console.error(ex);\n\n      const userVisibleError = ex instanceof ErrorWrapper ? ex.getMessageField() : ex.message;\n\n      Utils.displayGlobalErrorNotification(\n        this.props.intl.formatMessage(\n          {\n            defaultMessage: 'Failed to delete tag. Error: {userVisibleError}',\n            description: 'Text for user visible error when deleting tag in model version view',\n          },\n          {\n            userVisibleError,\n          },\n        ),\n      );\n    });\n  };\n\n  shouldHideDeleteOption() {\n    return false;\n  }\n\n  renderStageDropdown(modelVersion: any) {\n    const { handleStageTransitionDropdownSelect } = this.props;\n    return (\n      <Descriptions.Item\n        key=\"description-key-stage\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Stage',\n          description: 'Label name for stage metadata in model version page',\n        })}\n      >\n        {modelVersion.status === ModelVersionStatus.READY ? (\n          <ModelStageTransitionDropdown\n            currentStage={modelVersion.current_stage}\n            permissionLevel={modelVersion.permission_level}\n            onSelect={handleStageTransitionDropdownSelect}\n          />\n        ) : (\n          StageTagComponents[modelVersion.current_stage]\n        )}\n      </Descriptions.Item>\n    );\n  }\n\n  renderDisabledStage(modelVersion: any) {\n    const tooltipContent = (\n      <FormattedMessage\n        defaultMessage=\"Stages have been deprecated in the new Model Registry UI. Learn how to\n      migrate models <link>here</link>.\"\n        description=\"Tooltip content for the disabled stage metadata in model version page\"\n        values={{\n          link: (chunks: any) => (\n            <Typography.Link\n              componentId=\"codegen_mlflow_app_src_model-registry_components_modelversionview.tsx_301\"\n              href={modelStagesMigrationGuideLink}\n              openInNewTab\n            >\n              {chunks}\n            </Typography.Link>\n          ),\n        }}\n      />\n    );\n    return (\n      <Descriptions.Item\n        key=\"description-key-stage-disabled\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Stage (deprecated)',\n          description: 'Label name for the deprecated stage metadata in model version page',\n        })}\n      >\n        <div css={{ display: 'flex', alignItems: 'center' }}>\n          {StageLabels[modelVersion.current_stage]}\n          <LegacyTooltip title={tooltipContent} placement=\"bottom\">\n            <InfoIcon css={{ paddingLeft: '4px' }} />\n          </LegacyTooltip>\n        </div>\n      </Descriptions.Item>\n    );\n  }\n\n  renderRegisteredTimestampDescription(creation_timestamp: any) {\n    return (\n      <Descriptions.Item\n        key=\"description-key-register\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Registered At',\n          description: 'Label name for registered timestamp metadata in model version page',\n        })}\n      >\n        {Utils.formatTimestamp(creation_timestamp, this.props.intl)}\n      </Descriptions.Item>\n    );\n  }\n\n  renderCreatorDescription(user_id: any) {\n    return (\n      user_id && (\n        <Descriptions.Item\n          key=\"description-key-creator\"\n          label={this.props.intl.formatMessage({\n            defaultMessage: 'Creator',\n            description: 'Label name for creator metadata in model version page',\n          })}\n        >\n          {user_id}\n        </Descriptions.Item>\n      )\n    );\n  }\n\n  renderLastModifiedDescription(last_updated_timestamp: any) {\n    return (\n      <Descriptions.Item\n        key=\"description-key-modified\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Last Modified',\n          description: 'Label name for last modified timestamp metadata in model version page',\n        })}\n      >\n        {Utils.formatTimestamp(last_updated_timestamp, this.props.intl)}\n      </Descriptions.Item>\n    );\n  }\n\n  renderSourceRunDescription() {\n    // We don't show the source run link if the model version is not created from a run\n    if (!this.props.modelVersion?.run_id) {\n      return null;\n    }\n    return (\n      <Descriptions.Item\n        key=\"description-key-source-run\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Source Run',\n          description: 'Label name for source run metadata in model version page',\n        })}\n        // @ts-expect-error TS(2322): Type '{ children: Element | null; key: string; lab... Remove this comment to see the full error message\n        className=\"linked-run\"\n      >\n        {this.resolveRunLink()}\n      </Descriptions.Item>\n    );\n  }\n\n  renderCopiedFromLink() {\n    const { source } = this.props.modelVersion;\n    const modelUriRegex = /^models:\\/[^/]+\\/[^/]+$/;\n    if (!source || !modelUriRegex.test(source)) {\n      return null;\n    }\n    const sourceParts = source.split('/');\n    const sourceModelName = sourceParts[1];\n    const sourceModelVersion = sourceParts[2];\n    const link = (\n      <>\n        <Link\n          data-test-id=\"copied-from-link\"\n          to={ModelRegistryRoutes.getModelVersionPageRoute(sourceModelName, sourceModelVersion)}\n        >\n          {sourceModelName}\n        </Link>\n        &nbsp;\n        <FormattedMessage\n          defaultMessage=\"(Version {sourceModelVersion})\"\n          description=\"Version number of the source model version\"\n          values={{ sourceModelVersion }}\n        />\n      </>\n    );\n    return (\n      <Descriptions.Item\n        key=\"description-key-copied-from\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Copied from',\n          description: 'Label name for source model version metadata in model version page',\n        })}\n      >\n        {link}\n      </Descriptions.Item>\n    );\n  }\n\n  renderAliasEditor = () => {\n    // Extract aliases for the currently displayed model version from the model entity object\n    const currentVersion = this.props.modelVersion.version;\n    const currentVersionAliases =\n      this.props.modelEntity?.aliases?.filter(({ version }) => version === currentVersion).map(({ alias }) => alias) ||\n      [];\n    return (\n      <Descriptions.Item\n        key=\"description-key-aliases\"\n        label={this.props.intl.formatMessage({\n          defaultMessage: 'Aliases',\n          description: 'Aliases section in the metadata on model version page',\n        })}\n      >\n        <ModelVersionViewAliasEditor\n          aliases={currentVersionAliases}\n          version={this.props.modelVersion.version}\n          modelEntity={this.props.modelEntity}\n          onAliasesModified={this.props.onAliasesModified}\n        />\n      </Descriptions.Item>\n    );\n  };\n\n  getDescriptions(modelVersion: any) {\n    const { usingNextModelsUI } = this.props;\n\n    const defaultOrder = [\n      this.renderRegisteredTimestampDescription(modelVersion.creation_timestamp),\n      this.renderCreatorDescription(modelVersion.user_id),\n      this.renderLastModifiedDescription(modelVersion.last_updated_timestamp),\n      this.renderSourceRunDescription(),\n      this.renderCopiedFromLink(),\n      usingNextModelsUI ? this.renderAliasEditor() : this.renderStageDropdown(modelVersion),\n      usingNextModelsUI ? this.renderDisabledStage(modelVersion) : null,\n    ];\n    return defaultOrder.filter((item) => item !== null);\n  }\n\n  renderMetadata(modelVersion: any) {\n    return (\n      // @ts-expect-error TS(2322): Type '{ children: any[]; className: string; }' is ... Remove this comment to see the full error message\n      <Descriptions columns={5} className=\"metadata-list\">\n        {this.getDescriptions(modelVersion)}\n      </Descriptions>\n    );\n  }\n\n  renderStatusAlert() {\n    const { status, status_message } = this.props.modelVersion;\n    if (status !== ModelVersionStatus.READY) {\n      const defaultMessage = DefaultModelVersionStatusMessages[status];\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore - OSS specific ignore\n      const type = status === ModelVersionStatus.FAILED_REGISTRATION ? 'error' : 'info';\n      return (\n        <Alert\n          type={type}\n          className={`mlflow-status-alert mlflow-status-alert-${type}`}\n          message={status_message || defaultMessage}\n          // @ts-expect-error TS(2322): Type '{ type: \"error\" | \"info\"; className: string;... Remove this comment to see the full error message\n          icon={ModelVersionStatusIcons[status]}\n          banner\n        />\n      );\n    }\n    return null;\n  }\n\n  renderDescriptionEditIcon() {\n    return (\n      <Button\n        componentId=\"codegen_mlflow_app_src_model-registry_components_modelversionview.tsx_516\"\n        data-test-id=\"descriptionEditButton\"\n        type=\"link\"\n        onClick={this.startEditingDescription}\n      >\n        <FormattedMessage\n          defaultMessage=\"Edit\"\n          description=\"Text for the edit button next to the description section title on\n             the model version view page\"\n        />{' '}\n      </Button>\n    );\n  }\n\n  resolveRunLink() {\n    const { modelVersion, runInfo } = this.props;\n    if (modelVersion.run_link) {\n      return (\n        // Reported during ESLint upgrade\n        // eslint-disable-next-line react/jsx-no-target-blank\n        <a target=\"_blank\" href={modelVersion.run_link}>\n          {this.resolveRunName()}\n        </a>\n      );\n    } else if (runInfo) {\n      let artifactPath = null;\n      const modelSource = this.props.modelVersion?.source;\n      if (modelSource) {\n        artifactPath = extractArtifactPathFromModelSource(modelSource, runInfo.runUuid);\n      }\n      return (\n        <Link to={Routers.getRunPageRoute(runInfo.experimentId, runInfo.runUuid, artifactPath)}>\n          {this.resolveRunName()}\n        </Link>\n      );\n    }\n    return null;\n  }\n\n  resolveRunName() {\n    const { modelVersion, runInfo, runDisplayName } = this.props;\n    if (modelVersion.run_link) {\n      // We use the first 37 chars to stay consistent with runDisplayName, which is typically:\n      // Run: [ID]\n      return modelVersion.run_link.substr(0, 37) + '...';\n    } else if (runInfo) {\n      return runDisplayName || runInfo.runUuid;\n    } else {\n      return null;\n    }\n  }\n\n  renderPomoteModelButton() {\n    const { modelVersion, usingNextModelsUI, navigate } = this.props;\n    return usingNextModelsUI ? <PromoteModelButton modelVersion={modelVersion} /> : null;\n  }\n\n  renderTags() {\n    if (!this.sharedTaggingUIEnabled) {\n      return null;\n    }\n\n    return (\n      <Descriptions columns={1} data-testid=\"model-view-tags\">\n        <Descriptions.Item label=\"Tags\">\n          <TagList tags={this.getTags()} onEdit={this.handleEditTags} />\n        </Descriptions.Item>\n      </Descriptions>\n    );\n  }\n\n  getPageHeader(title: any, breadcrumbs: any) {\n    const menu = [\n      {\n        id: 'delete',\n        itemName: (\n          <FormattedMessage\n            defaultMessage=\"Delete\"\n            description=\"Text for delete button on model version view page header\"\n          />\n        ),\n        onClick: this.showDeleteModal,\n        disabled: ACTIVE_STAGES.includes(this.props.modelVersion.current_stage),\n      },\n    ];\n    return (\n      <PageHeader title={title} breadcrumbs={breadcrumbs}>\n        {!this.shouldHideDeleteOption() && <OverflowMenu menu={menu} />}\n        {this.renderPomoteModelButton()}\n      </PageHeader>\n    );\n  }\n\n  render() {\n    const { modelName = '', modelVersion, tags, schema } = this.props;\n    const { description } = modelVersion;\n    const { isDeleteModalVisible, isDeleteModalConfirmLoading, showDescriptionEditor, isTagsRequestPending } =\n      this.state;\n    const title = (\n      <FormattedMessage\n        defaultMessage=\"Version {versionNum}\"\n        description=\"Title text for model version page\"\n        values={{ versionNum: modelVersion.version }}\n      />\n    );\n    const breadcrumbs = [\n      <Link to={ModelRegistryRoutes.modelListPageRoute}>\n        <FormattedMessage\n          defaultMessage=\"Registered Models\"\n          description=\"Text for link back to models page under the header on the model version\n             view page\"\n        />\n      </Link>,\n      <Link data-test-id=\"breadcrumbRegisteredModel\" to={ModelRegistryRoutes.getModelPageRoute(modelName)}>\n        {modelName}\n      </Link>,\n    ];\n    return (\n      <div>\n        {this.getPageHeader(title, breadcrumbs)}\n        {this.renderStatusAlert()}\n\n        {/* Metadata List */}\n        {this.renderMetadata(modelVersion)}\n        {this.renderTags()}\n\n        {/* New models UI switch */}\n        {shouldShowModelsNextUI() && (\n          <div css={{ marginTop: 8, display: 'flex', justifyContent: 'flex-end' }}>\n            <ModelsNextUIToggleSwitch />\n          </div>\n        )}\n\n        {/* Page Sections */}\n        <CollapsibleSection\n          title={\n            <span>\n              <FormattedMessage\n                defaultMessage=\"Description\"\n                description=\"Title text for the description section on the model version view page\"\n              />{' '}\n              {!showDescriptionEditor ? this.renderDescriptionEditIcon() : null}\n            </span>\n          }\n          forceOpen={showDescriptionEditor}\n          defaultCollapsed={!description}\n          data-test-id=\"model-version-description-section\"\n        >\n          <EditableNote\n            defaultMarkdown={description}\n            onSubmit={this.handleSubmitEditDescription}\n            onCancel={this.handleCancelEditDescription}\n            showEditor={showDescriptionEditor}\n          />\n        </CollapsibleSection>\n        {!this.sharedTaggingUIEnabled && (\n          <div data-test-id=\"tags-section\">\n            <CollapsibleSection\n              title={\n                <FormattedMessage\n                  defaultMessage=\"Tags\"\n                  description=\"Title text for the tags section on the model versions view page\"\n                />\n              }\n              defaultCollapsed={Utils.getVisibleTagValues(tags).length === 0}\n              data-test-id=\"model-version-tags-section\"\n            >\n              <EditableTagsTableView\n                // @ts-expect-error TS(2322): Type '{ innerRef: RefObject<unknown>; handleAddTag... Remove this comment to see the full error message\n                innerRef={this.formRef}\n                handleAddTag={this.handleAddTag}\n                handleDeleteTag={this.handleDeleteTag}\n                handleSaveEdit={this.handleSaveEdit}\n                tags={tags}\n                isRequestPending={isTagsRequestPending}\n              />\n            </CollapsibleSection>\n          </div>\n        )}\n        <CollapsibleSection\n          title={\n            <FormattedMessage\n              defaultMessage=\"Schema\"\n              description=\"Title text for the schema section on the model versions view page\"\n            />\n          }\n          data-test-id=\"model-version-schema-section\"\n        >\n          <SchemaTable schema={schema} />\n        </CollapsibleSection>\n        <Modal\n          title={this.props.intl.formatMessage({\n            defaultMessage: 'Delete Model Version',\n            description: 'Title text for model version deletion modal in model versions view page',\n          })}\n          visible={isDeleteModalVisible}\n          confirmLoading={isDeleteModalConfirmLoading}\n          onOk={this.handleDeleteConfirm}\n          okText={this.props.intl.formatMessage({\n            defaultMessage: 'Delete',\n            description: 'OK button text for model version deletion modal in model versions view page',\n          })}\n          // @ts-expect-error TS(2322): Type '{ children: Element; title: any; visible: bo... Remove this comment to see the full error message\n          okType=\"danger\"\n          onCancel={this.hideDeleteModal}\n          cancelText={this.props.intl.formatMessage({\n            defaultMessage: 'Cancel',\n            description: 'Cancel button text for model version deletion modal in model versions view page',\n          })}\n        >\n          <span>\n            <FormattedMessage\n              defaultMessage=\"Are you sure you want to delete model version {versionNum}? This\n                 cannot be undone.\"\n              description=\"Comment text for model version deletion modal in model versions view\n                 page\"\n              values={{ versionNum: modelVersion.version }}\n            />\n          </span>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { modelName } = ownProps;\n  const { version } = ownProps.modelVersion;\n  const tags = getModelVersionTags(modelName, version, state);\n  return { tags };\n};\nconst mapDispatchToProps = { setModelVersionTagApi, deleteModelVersionTagApi };\n\nexport const ModelVersionView = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withNextModelsUIContext(injectIntl<'intl', ModelVersionViewImplProps>(ModelVersionViewImpl)));\n","/**\n * Extract artifact path from provided `modelSource` string\n */\nexport function extractArtifactPathFromModelSource(modelSource: string, runId: string) {\n  return modelSource.match(new RegExp(`/${runId}/artifacts/(.+)`))?.[1];\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  getModelVersionApi,\n  getRegisteredModelApi,\n  updateModelVersionApi,\n  deleteModelVersionApi,\n  transitionModelVersionStageApi,\n  getModelVersionArtifactApi,\n  parseMlModelFile,\n} from '../actions';\nimport { getRunApi } from '../../experiment-tracking/actions';\nimport { getModelVersion, getModelVersionSchemas } from '../reducers';\nimport { ModelVersionView } from './ModelVersionView';\nimport {\n  ActivityTypes,\n  PendingModelVersionActivity,\n  MODEL_VERSION_STATUS_POLL_INTERVAL as POLL_INTERVAL,\n} from '../constants';\nimport Utils from '../../common/utils/Utils';\nimport { getRunInfo, getRunTags } from '../../experiment-tracking/reducers/Reducers';\nimport RequestStateWrapper, { triggerError } from '../../common/components/RequestStateWrapper';\nimport { ErrorView } from '../../common/components/ErrorView';\nimport { Spinner } from '../../common/components/Spinner';\nimport { ModelRegistryRoutes } from '../routes';\nimport { getProtoField } from '../utils';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport _ from 'lodash';\nimport { PageContainer } from '../../common/components/PageContainer';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport type { WithRouterNextProps } from '../../common/utils/withRouterNext';\nimport { withErrorBoundary } from '../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../common/utils/ErrorUtils';\nimport type { ModelEntity, RunInfoEntity } from '../../experiment-tracking/types';\nimport { ReduxState } from '../../redux-types';\nimport { ErrorCodes } from '../../common/constants';\nimport { injectIntl } from 'react-intl';\n\ntype ModelVersionPageImplProps = WithRouterNextProps & {\n  modelName: string;\n  version: string;\n  modelVersion?: any;\n  runInfo?: any;\n  runDisplayName?: string;\n  modelEntity?: ModelEntity;\n  getModelVersionApi: (...args: any[]) => any;\n  getRegisteredModelApi: typeof getRegisteredModelApi;\n  updateModelVersionApi: (...args: any[]) => any;\n  transitionModelVersionStageApi: (...args: any[]) => any;\n  deleteModelVersionApi: (...args: any[]) => any;\n  getRunApi: (...args: any[]) => any;\n  apis: any;\n  getModelVersionArtifactApi: (...args: any[]) => any;\n  parseMlModelFile: (...args: any[]) => any;\n  schema?: any;\n  activities?: Record<string, unknown>[];\n  intl?: any;\n};\n\ntype ModelVersionPageImplState = any;\n\nexport class ModelVersionPageImpl extends React.Component<ModelVersionPageImplProps, ModelVersionPageImplState> {\n  listTransitionRequestId: any;\n  pollIntervalId: any;\n\n  initGetModelVersionDetailsRequestId = getUUID();\n  getRunRequestId = getUUID();\n  updateModelVersionRequestId = getUUID();\n  transitionModelVersionStageRequestId = getUUID();\n  getModelVersionDetailsRequestId = getUUID();\n  initGetMlModelFileRequestId = getUUID();\n  state = {\n    criticalInitialRequestIds: [this.initGetModelVersionDetailsRequestId, this.initGetMlModelFileRequestId],\n  };\n\n  pollingRelatedRequestIds = [this.getModelVersionDetailsRequestId, this.getRunRequestId];\n\n  hasPendingPollingRequest = () =>\n    this.pollingRelatedRequestIds.every((requestId) => {\n      const request = this.props.apis[requestId];\n      return Boolean(request && request.active);\n    });\n\n  loadData = (isInitialLoading: any) => {\n    const promises = [this.getModelVersionDetailAndRunInfo(isInitialLoading)];\n    return Promise.all(promises);\n  };\n\n  pollData = () => {\n    const { modelName, version, navigate } = this.props;\n    if (!this.hasPendingPollingRequest() && Utils.isBrowserTabVisible()) {\n      // @ts-expect-error TS(2554): Expected 1 arguments, but got 0.\n      return this.loadData().catch((e) => {\n        if (e.getErrorCode() === 'RESOURCE_DOES_NOT_EXIST') {\n          Utils.logErrorAndNotifyUser(e);\n          this.props.deleteModelVersionApi(modelName, version, undefined, true);\n          navigate(ModelRegistryRoutes.getModelPageRoute(modelName));\n        } else {\n          // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n          console.error(e);\n        }\n      });\n    }\n    return Promise.resolve();\n  };\n\n  // We need to do this because currently the ModelVersionDetailed we got does not contain\n  // experimentId. We need experimentId to construct a link to the source run. This workaround can\n  // be removed after the availability of experimentId.\n  getModelVersionDetailAndRunInfo(isInitialLoading: any) {\n    const { modelName, version } = this.props;\n    return this.props\n      .getModelVersionApi(\n        modelName,\n        version,\n        isInitialLoading === true ? this.initGetModelVersionDetailsRequestId : this.getModelVersionDetailsRequestId,\n      )\n      .then(({ value }: any) => {\n        // Do not fetch run info if there is no run_id (e.g. model version created directly from a logged model)\n        if (value && !value[getProtoField('model_version')].run_link && value[getProtoField('model_version')]?.run_id) {\n          this.props.getRunApi(value[getProtoField('model_version')].run_id, this.getRunRequestId);\n        }\n      });\n  }\n  // We need this for getting mlModel artifact file,\n  // this will be replaced with a single backend call in the future when supported\n  getModelVersionMlModelFile() {\n    const { modelName, version } = this.props;\n    this.props\n      .getModelVersionArtifactApi(modelName, version)\n      .then((content: any) =>\n        this.props.parseMlModelFile(modelName, version, content.value, this.initGetMlModelFileRequestId),\n      )\n      .catch(() => {\n        // Failure of this call chain should not block the page. Here we remove\n        // `initGetMlModelFileRequestId` from `criticalInitialRequestIds`\n        // to unblock RequestStateWrapper from rendering its content\n        this.setState((prevState: any) => ({\n          criticalInitialRequestIds: _.without(prevState.criticalInitialRequestIds, this.initGetMlModelFileRequestId),\n        }));\n      });\n  }\n\n  // prettier-ignore\n  handleStageTransitionDropdownSelect = (\n    activity: PendingModelVersionActivity,\n    archiveExistingVersions?: boolean,\n  ) => {\n    const { modelName, version } = this.props;\n    const toStage = activity.to_stage;\n    if (activity.type === ActivityTypes.APPLIED_TRANSITION) {\n      this.props\n        .transitionModelVersionStageApi(\n          modelName,\n          version.toString(),\n          toStage,\n          archiveExistingVersions,\n          this.transitionModelVersionStageRequestId,\n        )\n        .then(this.loadData)\n        .catch(Utils.logErrorAndNotifyUser);\n    }\n  };\n\n  handleEditDescription = (description: any) => {\n    const { modelName, version } = this.props;\n    return (\n      this.props\n        .updateModelVersionApi(modelName, version, description, this.updateModelVersionRequestId)\n        .then(this.loadData)\n        // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n        .catch(console.error)\n    );\n  };\n\n  componentDidMount() {\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    this.loadData(true).catch(console.error);\n    this.loadModelDataWithAliases();\n    this.pollIntervalId = setInterval(this.pollData, POLL_INTERVAL);\n    this.getModelVersionMlModelFile();\n  }\n\n  loadModelDataWithAliases = () => {\n    this.props.getRegisteredModelApi(this.props.modelName);\n  };\n\n  // Make a new initial load if model version or name has changed\n  componentDidUpdate(prevProps: ModelVersionPageImplProps) {\n    if (this.props.version !== prevProps.version || this.props.modelName !== prevProps.modelName) {\n      // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n      this.loadData(true).catch(console.error);\n      this.getModelVersionMlModelFile();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.pollIntervalId);\n  }\n\n  render() {\n    const { modelName, version, modelVersion, runInfo, runDisplayName, navigate, schema, modelEntity } = this.props;\n\n    return (\n      <PageContainer>\n        <RequestStateWrapper\n          requestIds={this.state.criticalInitialRequestIds}\n          // eslint-disable-next-line no-trailing-spaces\n        >\n          {(loading: any, hasError: any, requests: any) => {\n            if (hasError) {\n              clearInterval(this.pollIntervalId);\n              const resourceConflictError = Utils.getResourceConflictError(\n                requests,\n                this.state.criticalInitialRequestIds,\n              );\n              if (resourceConflictError) {\n                return (\n                  <ErrorView\n                    statusCode={409}\n                    subMessage={resourceConflictError.error.getMessageField()}\n                    fallbackHomePageReactRoute={ModelRegistryRoutes.modelListPageRoute}\n                  />\n                );\n              }\n              if (Utils.shouldRender404(requests, this.state.criticalInitialRequestIds)) {\n                return (\n                  <ErrorView\n                    statusCode={404}\n                    subMessage={`Model ${modelName} v${version} does not exist`}\n                    fallbackHomePageReactRoute={ModelRegistryRoutes.modelListPageRoute}\n                  />\n                );\n              }\n              // TODO(Zangr) Have a more generic boundary to handle all errors, not just 404.\n              const permissionDeniedErrors = requests.filter((request: any) => {\n                return (\n                  this.state.criticalInitialRequestIds.includes(request.id) &&\n                  request.error?.getErrorCode() === ErrorCodes.PERMISSION_DENIED\n                );\n              });\n              if (permissionDeniedErrors && permissionDeniedErrors[0]) {\n                return (\n                  <ErrorView\n                    statusCode={403}\n                    subMessage={this.props.intl.formatMessage(\n                      {\n                        defaultMessage: 'Permission denied for {modelName} version {version}. Error: \"{errorMsg}\"',\n                        description: 'Permission denied error message on model version detail page',\n                      },\n                      {\n                        modelName: modelName,\n                        version: version,\n                        errorMsg: permissionDeniedErrors[0].error?.getMessageField(),\n                      },\n                    )}\n                    fallbackHomePageReactRoute={ModelRegistryRoutes.modelListPageRoute}\n                  />\n                );\n              }\n              triggerError(requests);\n            } else if (loading) {\n              return <Spinner />;\n            } else if (modelVersion) {\n              // Null check to prevent NPE after delete operation\n              return (\n                <ModelVersionView\n                  modelName={modelName}\n                  modelVersion={modelVersion}\n                  modelEntity={modelEntity}\n                  runInfo={runInfo}\n                  runDisplayName={runDisplayName}\n                  handleEditDescription={this.handleEditDescription}\n                  deleteModelVersionApi={this.props.deleteModelVersionApi}\n                  navigate={navigate}\n                  handleStageTransitionDropdownSelect={this.handleStageTransitionDropdownSelect}\n                  schema={schema}\n                  onAliasesModified={this.loadModelDataWithAliases}\n                />\n              );\n            }\n            return null;\n          }}\n        </RequestStateWrapper>\n      </PageContainer>\n    );\n  }\n}\n\nconst mapStateToProps = (state: ReduxState, ownProps: WithRouterNextProps<{ modelName: string; version: string }>) => {\n  const modelName = decodeURIComponent(ownProps.params.modelName);\n  const { version } = ownProps.params;\n  const modelVersion = getModelVersion(state, modelName, version);\n  const schema = getModelVersionSchemas(state, modelName, version);\n  let runInfo: RunInfoEntity | null = null;\n  if (modelVersion && !modelVersion.run_link) {\n    runInfo = getRunInfo(modelVersion && modelVersion.run_id, state);\n  }\n  const tags = runInfo && getRunTags(runInfo.runUuid, state);\n  const runDisplayName = tags && runInfo && Utils.getRunDisplayName(runInfo, runInfo.runUuid);\n  const modelEntity = state.entities.modelByName[modelName];\n  const { apis } = state;\n  return {\n    modelName,\n    version,\n    modelVersion,\n    schema,\n    runInfo,\n    runDisplayName,\n    apis,\n    modelEntity,\n  };\n};\n\nconst mapDispatchToProps = {\n  getModelVersionApi,\n  getRegisteredModelApi,\n  updateModelVersionApi,\n  transitionModelVersionStageApi,\n  getModelVersionArtifactApi,\n  parseMlModelFile,\n  deleteModelVersionApi,\n  getRunApi,\n};\n\nconst ModelVersionPageWithRouter = withRouterNext(\n  // @ts-expect-error TS(2769): No overload matches this call.\n  connect(mapStateToProps, mapDispatchToProps)(injectIntl(ModelVersionPageImpl)),\n);\n\nexport const ModelVersionPage = withErrorBoundary(ErrorUtils.mlflowServices.MODEL_REGISTRY, ModelVersionPageWithRouter);\n\nexport default ModelVersionPage;\n","import { REGISTERED_MODELS_SEARCH_NAME_FIELD } from '../constants';\nimport { resolveFilterValue } from '../actions';\n\nexport function getModelNameFilter(query: string): string {\n  if (query) {\n    return `${REGISTERED_MODELS_SEARCH_NAME_FIELD} ilike ${resolveFilterValue(query, true)}`;\n  } else {\n    return '';\n  }\n}\n\nexport function getCombinedSearchFilter({\n  query = '',\n}: {\n  query?: string;\n} = {}) {\n  const filters = [];\n  const initialFilter = query.includes('tags.') ? query : getModelNameFilter(query);\n  if (initialFilter) filters.push(initialFilter);\n  return filters.join(' AND ');\n}\n\nexport function constructSearchInputFromURLState(urlState: Record<string, string>): string {\n  if ('searchInput' in urlState) {\n    return urlState['searchInput'];\n  }\n  if ('nameSearchInput' in urlState && 'tagSearchInput' in urlState) {\n    return getModelNameFilter(urlState['nameSearchInput']) + ` AND ` + urlState['tagSearchInput'];\n  }\n  if ('tagSearchInput' in urlState) {\n    return urlState['tagSearchInput'];\n  }\n  if ('nameSearchInput' in urlState) {\n    return urlState['nameSearchInput'];\n  }\n  return '';\n}\n","import { identity, isFunction } from 'lodash';\nimport React from 'react';\n\n/**\n * A safe version of `useDeferredValue` that falls back to identity (A->A) if `useDeferredValue` is not supported\n * by current React version.\n */\nexport const useSafeDeferredValue: <T>(value: T) => T =\n  'useDeferredValue' in React && isFunction(React.useDeferredValue) ? React.useDeferredValue : identity;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { LegacyForm, Input, LegacySelect } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nimport './RegisterModelForm.css';\n\nconst { Option, OptGroup } = LegacySelect;\n\nconst CREATE_NEW_MODEL_LABEL = 'Create New Model';\n// Include 'CREATE_NEW_MODEL_LABEL' as part of the value for filtering to work properly. Also added\n// prefix and postfix to avoid value conflict with actual model names.\nexport const CREATE_NEW_MODEL_OPTION_VALUE = `$$$__${CREATE_NEW_MODEL_LABEL}__$$$`;\nexport const SELECTED_MODEL_FIELD = 'selectedModel';\nexport const MODEL_NAME_FIELD = 'modelName';\nconst DESCRIPTION_FIELD = 'description';\n\ntype Props = {\n  modelByName?: any;\n  isCopy?: boolean;\n  onSearchRegisteredModels: (...args: any[]) => any;\n  innerRef: any;\n};\n\ntype State = any;\n\nexport class RegisterModelForm extends React.Component<Props, State> {\n  state = {\n    selectedModel: null,\n  };\n\n  handleModelSelectChange = (selectedModel: any) => {\n    this.setState({ selectedModel });\n  };\n\n  modelNameValidator = (rule: any, value: any, callback: any) => {\n    const { modelByName } = this.props;\n    callback(modelByName[value] ? `Model \"${value}\" already exists.` : undefined);\n  };\n\n  handleFilterOption = (input: any, option: any) => {\n    const value = (option && option.value) || '';\n    return value.toLowerCase().indexOf(input.toLowerCase()) !== -1;\n  };\n\n  renderExplanatoryText() {\n    const { isCopy } = this.props;\n    const { selectedModel } = this.state;\n    const creatingNewModel = selectedModel === CREATE_NEW_MODEL_OPTION_VALUE;\n\n    if (!selectedModel || creatingNewModel) {\n      return null;\n    }\n\n    const explanation = isCopy ? (\n      <FormattedMessage\n        defaultMessage=\"The model version will be copied to {selectedModel} as a new version.\"\n        description=\"Model registry > OSS Promote model modal > copy explanatory text\"\n        values={{ selectedModel: selectedModel }}\n      />\n    ) : (\n      <FormattedMessage\n        defaultMessage=\"The model will be registered as a new version of {selectedModel}.\"\n        description=\"Explantory text for registering a model\"\n        values={{ selectedModel: selectedModel }}\n      />\n    );\n\n    return <p className=\"modal-explanatory-text\">{explanation}</p>;\n  }\n\n  renderModel(model: any) {\n    return (\n      <Option value={model.name} key={model.name}>\n        {model.name}\n      </Option>\n    );\n  }\n  render() {\n    const { modelByName, innerRef, isCopy } = this.props;\n    const { selectedModel } = this.state;\n    const creatingNewModel = selectedModel === CREATE_NEW_MODEL_OPTION_VALUE;\n    return (\n      // @ts-expect-error TS(2322): Type '{ children: (Element | null)[]; ref: any; la... Remove this comment to see the full error message\n      <LegacyForm ref={innerRef} layout=\"vertical\" className=\"mlflow-register-model-form\">\n        {/* \"+ Create new model\" OR \"Select existing model\" */}\n        <LegacyForm.Item\n          label={isCopy ? <b>Copy to model</b> : 'Model'}\n          name={SELECTED_MODEL_FIELD}\n          rules={[{ required: true, message: 'Please select a model or create a new one.' }]}\n        >\n          <LegacySelect\n            dropdownClassName=\"mlflow-model-select-dropdown\"\n            onChange={this.handleModelSelectChange}\n            placeholder=\"Select a model\"\n            filterOption={this.handleFilterOption}\n            onSearch={this.props.onSearchRegisteredModels}\n            // @ts-expect-error TS(2769): No overload matches this call.\n            showSearch\n          >\n            <Option value={CREATE_NEW_MODEL_OPTION_VALUE} className=\"mlflow-create-new-model-option\">\n              <i className=\"fa fa-plus fa-fw\" style={{ fontSize: 13 }} /> {CREATE_NEW_MODEL_LABEL}\n            </Option>\n            <OptGroup label=\"Models\">{Object.values(modelByName).map((model) => this.renderModel(model))}</OptGroup>\n          </LegacySelect>\n        </LegacyForm.Item>\n\n        {/* Name the new model when \"+ Create new model\" is selected */}\n        {creatingNewModel ? (\n          <LegacyForm.Item\n            label=\"Model Name\"\n            name={MODEL_NAME_FIELD}\n            rules={[\n              { required: true, message: 'Please input a name for the new model.' },\n              { validator: this.modelNameValidator },\n            ]}\n          >\n            <Input\n              componentId=\"codegen_mlflow_app_src_model-registry_components_registermodelform.tsx_132\"\n              placeholder=\"Input a model name\"\n            />\n          </LegacyForm.Item>\n        ) : null}\n\n        {/* Explanatory text shown when existing model is selected */}\n        {this.renderExplanatoryText()}\n      </LegacyForm>\n    );\n  }\n}\n"],"names":["Text","Typography","getColumnTypeRepr","columnType","indentationLevel","type","indentation","repeat","Object","keys","properties","map","propertyName","property","requiredRepr","required","propertyRepr","indentOffset","slice","join","items","_ref","name","styles","ColumnName","spec","undefined","optional","requiredTag","_jsx","bold","children","color","_jsxs","css","ColumnSchema","theme","useDesignSystemTheme","repr","tensorType","dtype","shape","_css","whiteSpace","padding","spacing","sm","marginTop","marginBottom","_ref2","_ref3","SchemaTableRow","schemaData","isEmptySchema","isEmpty","intl","useIntl","isLargeSchema","Boolean","length","searchText","setSearchText","useState","deferredSearchText","useSafeDeferredValue","filteredSchemaData","useMemo","normalizedSearchText","toLowerCase","filter","schemaRow","String","includes","TableRow","TableCell","FormattedMessage","id","defaultMessage","values","link","chunks","href","LogModelWithSignatureUrl","target","rel","_Fragment","Spacer","Hint","currentResults","allResults","Input","placeholder","formatMessage","componentId","value","onChange","e","index","_ref4","_ref5","_ref6","_ref7","_ref8","SchemaTable","schema","defaultExpandAllRows","inputsExpanded","setInputsExpanded","outputsExpanded","setOutputsExpanded","Table","isHeader","TableHeader","paddingLeft","lg","xs","onClick","display","alignItems","gap","width","height","justifyContent","svg","colors","textSecondary","MinusSquareIcon","PlusSquareIcon","numInputs","inputs","numOutputs","outputs","PromoteModelButton","props","navigate","useNavigate","createRegisteredModelRequestId","useRef","getUUID","createModelVersionRequestId","modelVersion","visible","setVisible","confirmLoading","setConfirmLoading","dispatch","useDispatch","modelByName","useSelector","state","entities","form","resetAndClearModalForm","handleRegistrationFailure","Utils","logErrorAndNotifyUser","handleSearchRegisteredModels","useCallback","input","searchRegisteredModelsApi","getModelNameFilter","debouncedHandleSearchRegisteredModels","debounce","useEffect","className","Button","showRegisterModal","Modal","title","sourceModelName","sourceModelVersion","version","onOk","handleCopyModel","current","validateFields","then","selectedModelName","SELECTED_MODEL_FIELD","copySource","CREATE_NEW_MODEL_OPTION_VALUE","newModelName","MODEL_NAME_FIELD","createRegisteredModelApi","createModelVersionApi","run_id","tags","mvResult","ModelRegistryRoutes","getModelVersionPageRoute","catch","okText","cancelText","onCancel","hideRegisterModal","centered","Paragraph","Link","openInNewTab","RegisterModelForm","innerRef","onSearchRegisteredModels","isCopy","ModelStageTransitionFormModalMode","ModelStageTransitionFormModal","toStage","allowArchivingExistingVersions","transitionDescription","onConfirm","mode","RequestOrDirect","useForm","defaultValues","comment","archiveExistingVersions","reset","Approve","Reject","Cancel","handleSubmit","size","FormUI","Label","htmlFor","RHFControlledComponents","TextArea","control","rows","Checkbox","Tooltip","content","archiveExistingVersionToolTipText","marginRight","currentStage","marginLeft","StageTagComponents","archivedStage","Stages","ARCHIVED","ModelStageTransitionDropdown","React","constructor","args","confirmModalVisible","confirmingActivity","handleConfirm","handleMenuItemClick","activity","onSelect","this","setState","handleConfirmModalCancel","getNoneCurrentStages","stages","_","s","getMenu","nonCurrentStages","Menu","stage","Item","ActivityTypes","APPLIED_TRANSITION","to_stage","ArrowRightIcon","renderConfirmModal","ACTIVE_STAGES","renderActivityDescription","render","Dropdown","overlay","trigger","NONE","ChevronDownIcon","cursor","defaultProps","getAliasesModalTitle","ModelVersionViewAliasEditor","aliases","modelEntity","onAliasesModified","_modelEntity$aliases","EditAliasesModal","showEditAliasesModal","useEditAliasesModal","onSuccess","onSave","async","currentlyEditedVersion","existingAliases","draftAliases","_modelEntity$name","setModelVersionAliasesApi","getTitle","description","mlflowAliasesLearnMoreLink","onAddEdit","alias","AliasTag","compact","icon","PencilIcon","ModelVersionViewImpl","isDeleteModalVisible","isDeleteModalConfirmLoading","showDescriptionEditor","isTagsRequestPending","isTagAssignmentModalVisible","isSavingTags","tagSavingError","formRef","sharedTaggingUIEnabled","shouldUseSharedTaggingUI","handleDeleteConfirm","modelName","showConfirmLoading","deleteModelVersionApi","getModelPageRoute","hideConfirmLoading","showDeleteModal","hideDeleteModal","handleCancelEditDescription","handleSubmitEditDescription","handleEditDescription","startEditingDescription","stopPropagation","getTags","getVisibleTagValues","key","handleCloseTagAssignmentModal","handleEditTags","handleSaveTags","newTags","deletedTags","newTagsToSet","setModelVersionTagApi","deletedTagsToDelete","deleteModelVersionTagApi","Promise","all","error","message","ErrorWrapper","getMessageField","handleAddTag","resetFields","ex","console","userVisibleError","displayGlobalErrorNotification","handleSaveEdit","handleDeleteTag","renderAliasEditor","_this$props$modelEnti","_this$props$modelEnti2","currentVersion","currentVersionAliases","Descriptions","label","componentDidMount","pageTitle","updatePageTitle","shouldHideDeleteOption","renderStageDropdown","handleStageTransitionDropdownSelect","status","ModelVersionStatus","READY","current_stage","permissionLevel","permission_level","renderDisabledStage","tooltipContent","modelStagesMigrationGuideLink","StageLabels","LegacyTooltip","placement","InfoIcon","renderRegisteredTimestampDescription","creation_timestamp","formatTimestamp","renderCreatorDescription","user_id","renderLastModifiedDescription","last_updated_timestamp","renderSourceRunDescription","_this$props$modelVers","resolveRunLink","renderCopiedFromLink","source","test","sourceParts","split","to","getDescriptions","usingNextModelsUI","item","renderMetadata","columns","renderStatusAlert","status_message","DefaultModelVersionStatusMessages","FAILED_REGISTRATION","Alert","ModelVersionStatusIcons","banner","renderDescriptionEditIcon","runInfo","run_link","resolveRunName","_this$props$modelVers2","artifactPath","modelSource","runId","_modelSource$match","match","RegExp","extractArtifactPathFromModelSource","runUuid","Routers","getRunPageRoute","experimentId","runDisplayName","substr","renderPomoteModelButton","renderTags","TagList","onEdit","getPageHeader","breadcrumbs","menu","itemName","disabled","PageHeader","OverflowMenu","versionNum","modelListPageRoute","shouldShowModelsNextUI","ModelsNextUIToggleSwitch","CollapsibleSection","forceOpen","defaultCollapsed","EditableNote","defaultMarkdown","onSubmit","showEditor","EditableTagsTableView","isRequestPending","okType","mapDispatchToProps","ModelVersionView","connect","mapStateToProps","ownProps","getModelVersionTags","withNextModelsUIContext","injectIntl","ModelVersionPageImpl","listTransitionRequestId","pollIntervalId","initGetModelVersionDetailsRequestId","getRunRequestId","updateModelVersionRequestId","transitionModelVersionStageRequestId","getModelVersionDetailsRequestId","initGetMlModelFileRequestId","criticalInitialRequestIds","pollingRelatedRequestIds","hasPendingPollingRequest","every","requestId","request","apis","active","loadData","isInitialLoading","promises","getModelVersionDetailAndRunInfo","pollData","isBrowserTabVisible","getErrorCode","resolve","transitionModelVersionStageApi","toString","updateModelVersionApi","loadModelDataWithAliases","getRegisteredModelApi","getModelVersionApi","_value$getProtoField","getProtoField","getRunApi","getModelVersionMlModelFile","getModelVersionArtifactApi","parseMlModelFile","prevState","setInterval","POLL_INTERVAL","componentDidUpdate","prevProps","componentWillUnmount","clearInterval","PageContainer","RequestStateWrapper","requestIds","loading","hasError","requests","resourceConflictError","getResourceConflictError","ErrorView","statusCode","subMessage","fallbackHomePageReactRoute","shouldRender404","permissionDeniedErrors","_request$error","ErrorCodes","PERMISSION_DENIED","_permissionDeniedErro","errorMsg","triggerError","Spinner","ModelVersionPageWithRouter","withRouterNext","decodeURIComponent","params","getModelVersion","getModelVersionSchemas","getRunInfo","getRunTags","getRunDisplayName","ModelVersionPage","withErrorBoundary","ErrorUtils","mlflowServices","MODEL_REGISTRY","query","REGISTERED_MODELS_SEARCH_NAME_FIELD","resolveFilterValue","getCombinedSearchFilter","filters","initialFilter","push","constructSearchInputFromURLState","urlState","isFunction","identity","Option","OptGroup","LegacySelect","CREATE_NEW_MODEL_LABEL","selectedModel","handleModelSelectChange","modelNameValidator","rule","callback","handleFilterOption","option","indexOf","renderExplanatoryText","explanation","renderModel","model","creatingNewModel","LegacyForm","ref","layout","rules","dropdownClassName","filterOption","onSearch","showSearch","style","fontSize","validator"],"sourceRoot":""}