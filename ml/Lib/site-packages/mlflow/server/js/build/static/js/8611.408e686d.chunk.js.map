{"version":3,"file":"static/js/8611.408e686d.chunk.js","mappings":"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","sources":["experiment-tracking/components/CompareRunBox.tsx","experiment-tracking/components/CompareRunUtil.ts","shared/building_blocks/PreviewBadge.tsx","experiment-tracking/components/CompareRunPlotContainer.tsx","common/components/PageContainer.tsx","experiment-tracking/components/CompareRunScatter.tsx","experiment-tracking/components/ParallelCoordinatesPlotView.tsx","experiment-tracking/components/ParallelCoordinatesPlotControls.tsx","experiment-tracking/components/ParallelCoordinatesPlotPanel.tsx","experiment-tracking/components/LazyPlot.tsx","experiment-tracking/components/CompareRunContour.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport {\n  Typography,\n  Row,\n  Col,\n  SimpleSelect,\n  SimpleSelectOptionGroup,\n  SimpleSelectOption,\n  FormUI,\n} from '@databricks/design-system';\nimport { LazyPlot } from './LazyPlot';\nimport { RunInfoEntity } from '../types';\n\ntype Props = {\n  runUuids: string[];\n  runInfos: RunInfoEntity[];\n  metricLists: any[][];\n  paramLists: any[][];\n};\n\ntype Axis = {\n  key?: string;\n  isParam?: boolean;\n};\n\nconst paramOptionPrefix = 'param-';\nconst metricOptionPrefix = 'metric-';\n\n// Note: This component does not pass the value of the parent component to the child component.\n// Doing so will cause weird rendering issues with the label and updating of the value.\nconst Selector = ({\n  id,\n  onChange,\n  paramKeys,\n  metricKeys,\n}: {\n  id: string;\n  onChange: (axis: Axis) => void;\n  paramKeys: string[];\n  metricKeys: string[];\n}) => {\n  const intl = useIntl();\n  return (\n    <SimpleSelect\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_comparerunbox.tsx_46\"\n      id={id}\n      css={{ width: '100%', marginBottom: '16px' }}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Select parameter or metric',\n        description: 'Placeholder text for parameter/metric selector in box plot comparison in MLflow',\n      })}\n      onChange={({ target }) => {\n        const { value } = target;\n        const [_prefix, key] = value.split('-');\n        const isParam = value.startsWith(paramOptionPrefix);\n        onChange({ key, isParam });\n      }}\n    >\n      <SimpleSelectOptionGroup label=\"Parameters\">\n        {paramKeys.map((key) => (\n          <SimpleSelectOption key={key} value={paramOptionPrefix + key}>\n            {key}\n          </SimpleSelectOption>\n        ))}\n      </SimpleSelectOptionGroup>\n      <SimpleSelectOptionGroup label=\"Metrics\">\n        {metricKeys.map((key) => (\n          <SimpleSelectOption key={key} value={metricOptionPrefix + key}>\n            {key}\n          </SimpleSelectOption>\n        ))}\n      </SimpleSelectOptionGroup>\n    </SimpleSelect>\n  );\n};\n\nexport const CompareRunBox = ({ runInfos, metricLists, paramLists }: Props) => {\n  const [xAxis, setXAxis] = useState<Axis>({ key: undefined, isParam: undefined });\n  const [yAxis, setYAxis] = useState<Axis>({ key: undefined, isParam: undefined });\n\n  const paramKeys = Array.from(new Set(paramLists.flat().map(({ key }) => key))).sort();\n  const metricKeys = Array.from(new Set(metricLists.flat().map(({ key }) => key))).sort();\n\n  const getBoxPlotData = () => {\n    const data = {};\n    runInfos.forEach((_, index) => {\n      const params = paramLists[index];\n      const metrics = metricLists[index];\n      const x = (xAxis.isParam ? params : metrics).find(({ key }) => key === xAxis.key);\n      const y = (yAxis.isParam ? params : metrics).find(({ key }) => key === yAxis.key);\n      if (x === undefined || y === undefined) {\n        return;\n      }\n\n      if (x.value in data) {\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        data[x.value].push(y.value);\n      } else {\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        data[x.value] = [y.value];\n      }\n    });\n\n    return Object.entries(data).map(([key, values]) => ({\n      y: values,\n      type: 'box',\n      name: key,\n      jitter: 0.3,\n      pointpos: -1.5,\n      boxpoints: 'all',\n    }));\n  };\n\n  const renderPlot = () => {\n    if (!(xAxis.key && yAxis.key)) {\n      return (\n        <div\n          css={{\n            display: 'flex',\n            width: '100%',\n            height: '100%',\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}\n        >\n          <Typography.Text size=\"xl\">\n            <FormattedMessage\n              defaultMessage=\"Select parameters/metrics to plot.\"\n              description=\"Text to show when x or y axis is not selected on box plot\"\n            />\n          </Typography.Text>\n        </div>\n      );\n    }\n\n    return (\n      <LazyPlot\n        css={{\n          width: '100%',\n          height: '100%',\n          minHeight: '35vw',\n        }}\n        data={getBoxPlotData()}\n        layout={{\n          margin: {\n            t: 30,\n          },\n          hovermode: 'closest',\n          xaxis: {\n            title: xAxis.key,\n          },\n          yaxis: {\n            title: yAxis.key,\n          },\n        }}\n        config={{\n          responsive: true,\n          displaylogo: false,\n          scrollZoom: true,\n          modeBarButtonsToRemove: [\n            'sendDataToCloud',\n            'select2d',\n            'lasso2d',\n            'resetScale2d',\n            'hoverClosestCartesian',\n            'hoverCompareCartesian',\n          ],\n        }}\n        useResizeHandler\n      />\n    );\n  };\n\n  return (\n    <Row>\n      <Col span={6}>\n        <div css={styles.borderSpacer}>\n          <div>\n            <FormUI.Label htmlFor=\"x-axis-selector\">\n              <FormattedMessage\n                defaultMessage=\"X-axis:\"\n                description=\"Label text for X-axis in box plot comparison in MLflow\"\n              />\n            </FormUI.Label>\n          </div>\n          <Selector id=\"x-axis-selector\" onChange={setXAxis} paramKeys={paramKeys} metricKeys={metricKeys} />\n\n          <div>\n            <FormUI.Label htmlFor=\"y-axis-selector\">\n              <FormattedMessage\n                defaultMessage=\"Y-axis:\"\n                description=\"Label text for Y-axis in box plot comparison in MLflow\"\n              />\n            </FormUI.Label>\n          </div>\n          <Selector id=\"y-axis-selector\" onChange={setYAxis} paramKeys={paramKeys} metricKeys={metricKeys} />\n        </div>\n      </Col>\n      <Col span={18}>{renderPlot()}</Col>\n    </Row>\n  );\n};\n\nconst styles = {\n  borderSpacer: (theme: any) => ({\n    paddingLeft: theme.spacing.xs,\n  }),\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nexport default class CompareRunUtil {\n  /**\n   * Find in a list of metrics/params a certain key\n   */\n  static findInList(data: any, key: any) {\n    let found = undefined;\n    data.forEach((value: any) => {\n      if (value.key === key) {\n        found = value;\n      }\n    });\n    return found;\n  }\n\n  /**\n   * Get all keys present in the data in ParamLists or MetricLists or Schema input and outputs lists\n   */\n  static getKeys(lists: any, numeric: any) {\n    const keys = {};\n    lists.forEach((list: any) =>\n      list.forEach((item: any) => {\n        if (!(item.key in keys)) {\n          // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n          keys[item.key] = true;\n        }\n        if (numeric && isNaN(parseFloat(item.value))) {\n          // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n          keys[item.key] = false;\n        }\n      }),\n    );\n    return (\n      Object.keys(keys)\n        // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        .filter((k) => keys[k])\n        .sort()\n    );\n  }\n}\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Tag, useDesignSystemTheme } from '@databricks/design-system';\nexport const PreviewBadge = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_shared_building_blocks_previewbadge.tsx_14\"\n      className={className}\n      css={{ marginLeft: theme.spacing.xs }}\n      color=\"turquoise\"\n    >\n      <FormattedMessage\n        defaultMessage=\"Experimental\"\n        description=\"Experimental badge shown for features which are experimental\"\n      />\n    </Tag>\n  );\n};\n","import { Theme } from '@emotion/react';\n\ninterface CompareRunPlotContainerProps {\n  controls: React.ReactNode;\n}\n\nexport const CompareRunPlotContainer = (props: React.PropsWithChildren<CompareRunPlotContainerProps>) => (\n  <div css={styles.wrapper}>\n    <div css={styles.controls}>{props.controls}</div>\n    <div css={styles.plotWrapper}>{props.children}</div>\n  </div>\n);\n\nconst styles = {\n  plotWrapper: {\n    overflow: 'hidden',\n    width: '100%',\n    height: '100%',\n    minHeight: 450,\n  },\n  wrapper: {\n    display: 'grid',\n    gridTemplateColumns: 'minmax(300px, 1fr) 3fr',\n  },\n  controls: (theme: Theme) => ({\n    padding: `0 ${theme.spacing.xs}px`,\n  }),\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { PageWrapper, Spacer } from '@databricks/design-system';\n\ntype OwnProps = {\n  usesFullHeight?: boolean;\n  children?: React.ReactNode;\n};\n\n// @ts-expect-error TS(2565): Property 'defaultProps' is used before being assig... Remove this comment to see the full error message\ntype Props = OwnProps & typeof PageContainer.defaultProps;\n\nexport function PageContainer(props: Props) {\n  const { usesFullHeight, ...restProps } = props;\n  return (\n    // @ts-expect-error TS(2322): Type '{ height: string; display: string; flexDirec... Remove this comment to see the full error message\n    <PageWrapper css={usesFullHeight ? styles.useFullHeightLayout : styles.wrapper}>\n      {/* @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message */}\n      <Spacer css={styles.fixedSpacer} />\n      {usesFullHeight ? props.children : <div {...restProps} css={styles.container} />}\n    </PageWrapper>\n  );\n}\n\nPageContainer.defaultProps = {\n  usesFullHeight: false,\n};\n\nconst styles = {\n  useFullHeightLayout: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    '&:last-child': {\n      flexGrow: 1,\n    },\n  },\n  wrapper: { flex: 1 },\n  fixedSpacer: {\n    // Ensure spacer's fixed height regardless of flex\n    flexShrink: 0,\n  },\n  container: {\n    width: '100%',\n    flexGrow: 1,\n    paddingBottom: 24,\n  },\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { escape } from 'lodash';\nimport React, { Component } from 'react';\nimport { getParams, getRunInfo } from '../reducers/Reducers';\nimport { connect } from 'react-redux';\nimport { FormUI, SimpleSelect, SimpleSelectOption, SimpleSelectOptionGroup, Spacer } from '@databricks/design-system';\nimport Utils from '../../common/utils/Utils';\nimport { getLatestMetrics } from '../reducers/MetricReducer';\nimport CompareRunUtil from './CompareRunUtil';\nimport { FormattedMessage } from 'react-intl';\nimport { LazyPlot } from './LazyPlot';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\n\ntype CompareRunScatterImplProps = {\n  runUuids: string[];\n  runInfos: any[]; // TODO: PropTypes.instanceOf(RunInfo)\n  metricLists: any[][];\n  paramLists: any[][];\n  runDisplayNames: string[];\n};\n\ntype CompareRunScatterImplState = any;\n\nexport class CompareRunScatterImpl extends Component<CompareRunScatterImplProps, CompareRunScatterImplState> {\n  // Size limits for displaying keys and values in our plot axes and tooltips\n  static MAX_PLOT_KEY_LENGTH = 40;\n  static MAX_PLOT_VALUE_LENGTH = 60;\n\n  metricKeys: any;\n  paramKeys: any;\n\n  constructor(props: CompareRunScatterImplProps) {\n    super(props);\n\n    this.metricKeys = CompareRunUtil.getKeys(this.props.metricLists, false);\n    this.paramKeys = CompareRunUtil.getKeys(this.props.paramLists, false);\n\n    if (this.paramKeys.length + this.metricKeys.length < 2) {\n      this.state = { disabled: true };\n    } else {\n      this.state = {\n        disabled: false,\n        x:\n          this.paramKeys.length > 0\n            ? {\n                key: this.paramKeys[0],\n                isMetric: false,\n              }\n            : {\n                key: this.metricKeys[1],\n                isMetric: true,\n              },\n        y:\n          this.metricKeys.length > 0\n            ? {\n                key: this.metricKeys[0],\n                isMetric: true,\n              }\n            : {\n                key: this.paramKeys[1],\n                isMetric: false,\n              },\n      };\n    }\n  }\n\n  /**\n   * Get the value of the metric/param described by {key, isMetric}, in run i\n   */\n  getValue(i: any, { key, isMetric }: any) {\n    const value = CompareRunUtil.findInList((isMetric ? this.props.metricLists : this.props.paramLists)[i], key);\n    return value === undefined ? value : (value as any).value;\n  }\n\n  render() {\n    // @ts-expect-error TS(4111): Property 'disabled' comes from an index signature,... Remove this comment to see the full error message\n    if (this.state.disabled) {\n      return <div />;\n    }\n\n    const keyLength = CompareRunScatterImpl.MAX_PLOT_KEY_LENGTH;\n\n    const xs: any = [];\n    const ys: any = [];\n    const tooltips: any = [];\n\n    this.props.runInfos.forEach((_, index) => {\n      // @ts-expect-error TS(4111): Property 'x' comes from an index signature, so it ... Remove this comment to see the full error message\n      const x = this.getValue(index, this.state.x);\n      // @ts-expect-error TS(4111): Property 'y' comes from an index signature, so it ... Remove this comment to see the full error message\n      const y = this.getValue(index, this.state.y);\n      if (x === undefined || y === undefined) {\n        return;\n      }\n      xs.push(x);\n      ys.push(y);\n      tooltips.push(this.getPlotlyTooltip(index));\n    });\n\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <>\n            <div>\n              <FormUI.Label htmlFor=\"x-axis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"X-axis:\"\n                  description=\"Label text for x-axis in scatter plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('x')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"y-axis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Y-axis:\"\n                  description=\"Label text for y-axis in scatter plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('y')}\n            </div>\n          </>\n        }\n      >\n        <LazyPlot\n          data={[\n            {\n              x: xs,\n              y: ys,\n              text: tooltips,\n              hoverinfo: 'text',\n              type: 'scattergl',\n              mode: 'markers',\n              marker: {\n                size: 10,\n                color: 'rgba(200, 50, 100, .75)',\n              },\n            },\n          ]}\n          layout={{\n            margin: {\n              t: 30,\n            },\n            hovermode: 'closest',\n            xaxis: {\n              title: escape(Utils.truncateString(this.state['x'].key, keyLength)),\n            },\n            yaxis: {\n              title: escape(Utils.truncateString(this.state['y'].key, keyLength)),\n            },\n          }}\n          css={styles.plot}\n          config={{\n            responsive: true,\n            displaylogo: false,\n            scrollZoom: true,\n            modeBarButtonsToRemove: [\n              'sendDataToCloud',\n              'select2d',\n              'lasso2d',\n              'resetScale2d',\n              'hoverClosestCartesian',\n              'hoverCompareCartesian',\n            ],\n          }}\n          useResizeHandler\n        />\n      </CompareRunPlotContainer>\n    );\n  }\n\n  renderSelect(axis: any) {\n    return (\n      <SimpleSelect\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_comparerunscatter.tsx_182\"\n        css={styles.select}\n        id={axis + '-axis-selector'}\n        onChange={({ target }) => {\n          const { value } = target;\n          const [prefix, ...keyParts] = value.split('-');\n          const key = keyParts.join('-');\n          const isMetric = prefix === 'metric';\n          this.setState({ [axis]: { isMetric, key } });\n        }}\n        value={(this.state[axis].isMetric ? 'metric-' : 'param-') + this.state[axis].key}\n      >\n        <SimpleSelectOptionGroup label=\"Parameter\">\n          {this.paramKeys.map((p: any) => (\n            <SimpleSelectOption key={'param-' + p} value={'param-' + p}>\n              {p}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n        <SimpleSelectOptionGroup label=\"Metric\">\n          {this.metricKeys.map((m: any) => (\n            <SimpleSelectOption key={'metric-' + m} value={'metric-' + m}>\n              {m}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n      </SimpleSelect>\n    );\n  }\n\n  getPlotlyTooltip(index: any) {\n    const keyLength = CompareRunScatterImpl.MAX_PLOT_KEY_LENGTH;\n    const valueLength = CompareRunScatterImpl.MAX_PLOT_VALUE_LENGTH;\n    const runName = this.props.runDisplayNames[index];\n    let result = `<b>${escape(runName)}</b><br>`;\n    const paramList = this.props.paramLists[index];\n    paramList.forEach((p) => {\n      result +=\n        escape(Utils.truncateString(p.key, keyLength)) +\n        ': ' +\n        escape(Utils.truncateString(p.value, valueLength)) +\n        '<br>';\n    });\n    const metricList = this.props.metricLists[index];\n    if (metricList.length > 0) {\n      result += paramList.length > 0 ? '<br>' : '';\n      metricList.forEach((m) => {\n        result += escape(Utils.truncateString(m.key, keyLength)) + ': ' + Utils.formatMetric(m.value) + '<br>';\n      });\n    }\n    return result;\n  }\n}\n\nconst styles = {\n  select: {\n    width: '100%',\n  },\n  plot: {\n    width: '100%',\n  },\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const runInfos: any = [];\n  const metricLists: any = [];\n  const paramLists: any = [];\n  const { runUuids } = ownProps;\n  runUuids.forEach((runUuid: any) => {\n    runInfos.push(getRunInfo(runUuid, state));\n    metricLists.push(Object.values(getLatestMetrics(runUuid, state)));\n    paramLists.push(Object.values(getParams(runUuid, state)));\n  });\n  return { runInfos, metricLists, paramLists };\n};\n\nexport const CompareRunScatter = connect(mapStateToProps)(CompareRunScatterImpl);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { LazyPlot } from './LazyPlot';\n\nconst AXIS_LABEL_CLS = '.pcp-plot .parcoords .y-axis .axis-heading .axis-title';\nexport const UNKNOWN_TERM = 'unknown';\n\ntype ParallelCoordinatesPlotViewProps = {\n  runUuids: string[];\n  paramKeys: string[];\n  metricKeys: string[];\n  paramDimensions: any[];\n  metricDimensions: any[];\n};\n\ntype ParallelCoordinatesPlotViewState = any;\n\nexport class ParallelCoordinatesPlotView extends React.Component<\n  ParallelCoordinatesPlotViewProps,\n  ParallelCoordinatesPlotViewState\n> {\n  state = {\n    // Current sequence of all axes, both parameters and metrics.\n    sequence: [...this.props.paramKeys, ...this.props.metricKeys],\n  };\n\n  static getDerivedStateFromProps(props: any, state: any) {\n    const keysFromProps = [...props.paramKeys, ...props.metricKeys];\n    const keysFromState = state.sequence;\n    if (!_.isEqual(_.sortBy(keysFromProps), _.sortBy(keysFromState))) {\n      return { sequence: keysFromProps };\n    }\n    return null;\n  }\n\n  getData() {\n    const { sequence } = this.state;\n    const { paramDimensions, metricDimensions, metricKeys } = this.props;\n    const lastMetricKey = this.findLastKeyFromState(metricKeys);\n    const lastMetricDimension = this.props.metricDimensions.find((d) => d.label === lastMetricKey);\n    const colorScaleConfigs = ParallelCoordinatesPlotView.getColorScaleConfigsForDimension(lastMetricDimension);\n    // This make sure axis order consistency across renders.\n    const orderedDimensions = ParallelCoordinatesPlotView.getDimensionsOrderedBySequence(\n      [...paramDimensions, ...metricDimensions],\n      sequence,\n    );\n    return [\n      {\n        type: 'parcoords',\n        line: { ...colorScaleConfigs },\n        dimensions: orderedDimensions,\n      },\n    ];\n  }\n\n  static getDimensionsOrderedBySequence(dimensions: any, sequence: any) {\n    return _.sortBy(dimensions, [(dimension) => sequence.indexOf(dimension.label)]);\n  }\n\n  static getLabelElementsFromDom = () => Array.from(document.querySelectorAll(AXIS_LABEL_CLS));\n\n  findLastKeyFromState(keys: any) {\n    const { sequence } = this.state;\n    const keySet = new Set(keys);\n    return _.findLast(sequence, (key) => keySet.has(key));\n  }\n\n  static getColorScaleConfigsForDimension(dimension: any) {\n    if (!dimension) return null;\n    const cmin = _.min(dimension.values);\n    const cmax = _.max(dimension.values);\n    return {\n      showscale: true,\n      colorscale: 'Jet',\n      cmin,\n      cmax,\n      color: dimension.values,\n    };\n  }\n\n  // Update styles(green & bold) for metric axes.\n  // Note(Zangr) 2019-6-25 this is needed because there is no per axis label setting available. This\n  // needs to be called every time chart updates. More information about currently available label\n  // setting here: https://plot.ly/javascript/reference/#parcoords-labelfont\n  updateMetricAxisLabelStyle = () => {\n    /* eslint-disable no-param-reassign */\n    const metricsKeySet = new Set(this.props.metricKeys);\n    // TODO(Zangr) 2019-06-20 This assumes name uniqueness across params & metrics. Find a way to\n    // make it more deterministic. Ex. Add add different data attributes to indicate axis kind.\n    ParallelCoordinatesPlotView.getLabelElementsFromDom()\n      .filter((el) => metricsKeySet.has(el.innerHTML))\n      .forEach((el) => {\n        (el as any).style.fill = 'green';\n        (el as any).style.fontWeight = 'bold';\n      });\n  };\n\n  maybeUpdateStateForColorScale = (currentSequenceFromPlotly: any) => {\n    const rightmostMetricKeyFromState = this.findLastKeyFromState(this.props.metricKeys);\n    const metricsKeySet = new Set(this.props.metricKeys);\n    const rightmostMetricKeyFromPlotly = _.findLast(currentSequenceFromPlotly, (key) => metricsKeySet.has(key));\n    // Currently we always render color scale based on the rightmost metric axis, so if that changes\n    // we need to setState with the new axes sequence to trigger a rerender.\n    if (rightmostMetricKeyFromState !== rightmostMetricKeyFromPlotly) {\n      this.setState({ sequence: currentSequenceFromPlotly });\n    }\n  };\n\n  handlePlotUpdate = ({ data: [{ dimensions }] }: any) => {\n    this.updateMetricAxisLabelStyle();\n    this.maybeUpdateStateForColorScale(dimensions.map((d: any) => d.label));\n  };\n\n  render() {\n    return (\n      <LazyPlot\n        layout={{ autosize: true, margin: { t: 50 } }}\n        useResizeHandler\n        css={styles.plot}\n        data={this.getData()}\n        onUpdate={this.handlePlotUpdate}\n        className=\"pcp-plot\"\n        config={{ displayModeBar: false }}\n      />\n    );\n  }\n}\n\nexport const generateAttributesForCategoricalDimension = (labels: any) => {\n  // Create a lookup from label to its own alphabetical sorted order.\n  // Ex. ['A', 'B', 'C'] => { 'A': '0', 'B': '1', 'C': '2' }\n  const sortedUniqLabels = _.uniq(labels).sort();\n\n  // We always want the UNKNOWN_TERM to be at the top\n  // of the chart which is end of the sorted label array\n  // Ex. ['A', 'UNKNOWN_TERM', 'B'] => { 'A': '0', 'B': '1', 'UNKNOWN_TERM': '2' }\n  let addUnknownTerm = false;\n  const filteredSortedUniqLabels = sortedUniqLabels.filter((label) => {\n    if (label === UNKNOWN_TERM) addUnknownTerm = true;\n    return label !== UNKNOWN_TERM;\n  });\n  if (addUnknownTerm) {\n    filteredSortedUniqLabels.push(UNKNOWN_TERM);\n  }\n  const labelToIndexStr = _.invert(filteredSortedUniqLabels);\n  const attributes = {};\n\n  // Values are assigned to their alphabetical sorted index number\n  (attributes as any).values = labels.map((label: any) => Number(labelToIndexStr[label]));\n\n  // Default to alphabetical order for categorical axis here. Ex. [0, 1, 2, 3 ...]\n  (attributes as any).tickvals = _.range(filteredSortedUniqLabels.length);\n\n  // Default to alphabetical order for categorical axis here. Ex. ['A', 'B', 'C', 'D' ...]\n  (attributes as any).ticktext = filteredSortedUniqLabels.map((sortedUniqLabel) =>\n    (sortedUniqLabel as any).substring(0, 10),\n  );\n\n  return attributes;\n};\n\n/**\n * Infer the type of data in a run. If all the values are numbers or castable to numbers, then\n * treat it as a number column.\n */\nexport const inferType = (key: any, runUuids: any, entryByRunUuid: any) => {\n  for (let i = 0; i < runUuids.length; i++) {\n    if (entryByRunUuid[runUuids[i]][key]) {\n      const { value } = entryByRunUuid[runUuids[i]][key];\n      if (typeof value === 'string' && isNaN(Number(value)) && value !== 'NaN') {\n        return 'string';\n      }\n    }\n  }\n  return 'number';\n};\n\nexport const createDimension = (key: any, runUuids: any, entryByRunUuid: any) => {\n  let attributes = {};\n  const dataType = inferType(key, runUuids, entryByRunUuid);\n  if (dataType === 'string') {\n    attributes = generateAttributesForCategoricalDimension(\n      runUuids.map((runUuid: any) =>\n        entryByRunUuid[runUuid][key] ? entryByRunUuid[runUuid][key].value : UNKNOWN_TERM,\n      ),\n    );\n  } else {\n    let maxValue = Number.MIN_SAFE_INTEGER;\n    const values = runUuids.map((runUuid: any) => {\n      if (entryByRunUuid[runUuid][key]) {\n        const { value } = entryByRunUuid[runUuid][key];\n        const numericValue = Number(value);\n        if (maxValue < numericValue) maxValue = numericValue;\n        return numericValue;\n      }\n      return UNKNOWN_TERM;\n    });\n\n    // For Numerical values, we take the max value of all the attribute\n    // values and 0.01 to it so it is always at top of the graph.\n    (attributes as any).values = values.map((value: any) => {\n      if (value === UNKNOWN_TERM) return maxValue + 0.01;\n      return value;\n    });\n\n    // For some reason, Plotly tries to plot these values with SI prefixes by default\n    // Explicitly set to 5 fixed digits float here\n    (attributes as any).tickformat = '.5f';\n  }\n  return {\n    label: key,\n    ...attributes,\n  };\n};\n\nconst styles = {\n  plot: {\n    width: '100%',\n  },\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuids, paramKeys, metricKeys } = ownProps;\n  const { latestMetricsByRunUuid, paramsByRunUuid } = state.entities;\n  const paramDimensions = paramKeys.map((paramKey: any) => createDimension(paramKey, runUuids, paramsByRunUuid));\n  const metricDimensions = metricKeys.map((metricKey: any) =>\n    createDimension(metricKey, runUuids, latestMetricsByRunUuid),\n  );\n  return { paramDimensions, metricDimensions };\n};\n\nexport default connect(mapStateToProps)(ParallelCoordinatesPlotView);\n","import { Button, LegacySelect } from '@databricks/design-system';\nimport { type Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\n\ntype Props = {\n  paramKeys: string[];\n  metricKeys: string[];\n  selectedParamKeys: string[];\n  selectedMetricKeys: string[];\n  handleParamsSelectChange: (paramValues: string[]) => void;\n  handleMetricsSelectChange: (metricValues: string[]) => void;\n  onClearAllSelect: () => void;\n};\n\nexport function ParallelCoordinatesPlotControls({\n  paramKeys,\n  metricKeys,\n  selectedParamKeys,\n  selectedMetricKeys,\n  handleParamsSelectChange,\n  handleMetricsSelectChange,\n  onClearAllSelect,\n}: Props) {\n  return (\n    <div css={styles.wrapper}>\n      <div>\n        <FormattedMessage\n          defaultMessage=\"Parameters:\"\n          description=\"Label text for parameters in parallel coordinates plot in MLflow\"\n        />\n      </div>\n      <LegacySelect\n        mode=\"multiple\"\n        css={styles.select}\n        placeholder={\n          <FormattedMessage\n            defaultMessage=\"Please select parameters\"\n            description=\"Placeholder text for parameters in parallel coordinates plot in MLflow\"\n          />\n        }\n        value={selectedParamKeys}\n        onChange={handleParamsSelectChange}\n      >\n        {paramKeys.map((key) => (\n          <LegacySelect.Option value={key} key={key}>\n            {key}\n          </LegacySelect.Option>\n        ))}\n      </LegacySelect>\n      <div style={{ marginTop: 20 }}>\n        <FormattedMessage\n          defaultMessage=\"Metrics:\"\n          description=\"Label text for metrics in parallel coordinates plot in MLflow\"\n        />\n      </div>\n      <LegacySelect\n        mode=\"multiple\"\n        css={styles.select}\n        placeholder={\n          <FormattedMessage\n            defaultMessage=\"Please select metrics\"\n            description=\"Placeholder text for metrics in parallel coordinates plot in MLflow\"\n          />\n        }\n        value={selectedMetricKeys}\n        onChange={handleMetricsSelectChange}\n      >\n        {metricKeys.map((key) => (\n          <LegacySelect.Option value={key} key={key}>\n            {key}\n          </LegacySelect.Option>\n        ))}\n      </LegacySelect>\n      <div style={{ marginTop: 20 }}>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_parallelcoordinatesplotcontrols.tsx_84\"\n          data-test-id=\"clear-button\"\n          onClick={onClearAllSelect}\n        >\n          <FormattedMessage\n            defaultMessage=\"Clear All\"\n            description=\"String for the clear button to clear any selected parameters and metrics\"\n          />\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  wrapper: (theme: Theme) => ({\n    padding: `0 ${theme.spacing.xs}px`,\n  }),\n  select: { width: '100%' },\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ParallelCoordinatesPlotView from './ParallelCoordinatesPlotView';\nimport { ParallelCoordinatesPlotControls } from './ParallelCoordinatesPlotControls';\nimport {\n  getAllParamKeysByRunUuids,\n  getAllMetricKeysByRunUuids,\n  getSharedMetricKeysByRunUuids,\n  getRunInfo,\n} from '../reducers/Reducers';\nimport _ from 'lodash';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\nimport { FormattedMessage } from 'react-intl';\nimport { Typography } from '@databricks/design-system';\n\ntype ParallelCoordinatesPlotPanelProps = {\n  runUuids: string[];\n  allParamKeys: string[];\n  allMetricKeys: string[];\n  sharedMetricKeys: string[];\n  diffParamKeys: string[];\n};\n\ntype ParallelCoordinatesPlotPanelState = any;\n\nexport class ParallelCoordinatesPlotPanel extends React.Component<\n  ParallelCoordinatesPlotPanelProps,\n  ParallelCoordinatesPlotPanelState\n> {\n  state = {\n    // Default to select differing parameters. Sort alphabetically (to match\n    // highlighted params in param table), then cap at first 3\n    selectedParamKeys: this.props.diffParamKeys.sort().slice(0, 3),\n    // Default to select the first metric key.\n    // Note that there will be no color scaling if no metric is selected.\n    selectedMetricKeys: this.props.sharedMetricKeys.slice(0, 1),\n  };\n\n  handleParamsSelectChange = (paramValues: any) => {\n    this.setState({ selectedParamKeys: paramValues });\n  };\n\n  handleMetricsSelectChange = (metricValues: any) => {\n    this.setState({ selectedMetricKeys: metricValues });\n  };\n\n  onClearAllSelect = () => {\n    this.setState({ selectedParamKeys: [], selectedMetricKeys: [] });\n  };\n\n  render() {\n    const { runUuids, allParamKeys, allMetricKeys } = this.props;\n    const { selectedParamKeys, selectedMetricKeys } = this.state;\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <ParallelCoordinatesPlotControls\n            paramKeys={allParamKeys}\n            metricKeys={allMetricKeys}\n            selectedParamKeys={selectedParamKeys}\n            selectedMetricKeys={selectedMetricKeys}\n            handleMetricsSelectChange={this.handleMetricsSelectChange}\n            handleParamsSelectChange={this.handleParamsSelectChange}\n            onClearAllSelect={this.onClearAllSelect}\n          />\n        }\n      >\n        {!_.isEmpty(selectedParamKeys) || !_.isEmpty(selectedMetricKeys) ? (\n          <ParallelCoordinatesPlotView\n            runUuids={runUuids}\n            paramKeys={selectedParamKeys}\n            metricKeys={selectedMetricKeys}\n          />\n        ) : (\n          // @ts-expect-error TS(2322): Type '(theme: any) => { padding: any; textAlign: s... Remove this comment to see the full error message\n          <div css={styles.noValuesSelected} data-testid=\"no-values-selected\">\n            <Typography.Title level={2}>\n              <FormattedMessage\n                defaultMessage=\"Nothing to compare!\"\n                // eslint-disable-next-line max-len\n                description=\"Header displayed in the metrics and params compare plot when no values are selected\"\n              />\n            </Typography.Title>\n            <FormattedMessage\n              defaultMessage=\"Please select parameters and/or metrics to display the comparison.\"\n              // eslint-disable-next-line max-len\n              description=\"Explanation displayed in the metrics and params compare plot when no values are selected\"\n            />\n          </div>\n        )}\n      </CompareRunPlotContainer>\n    );\n  }\n}\n\nexport const getDiffParams = (allParamKeys: any, runUuids: any, paramsByRunUuid: any) => {\n  const diffParamKeys: any = [];\n  allParamKeys.forEach((param: any) => {\n    // collect all values for this param\n    const paramVals = runUuids.map(\n      (runUuid: any) => paramsByRunUuid[runUuid][param] && paramsByRunUuid[runUuid][param].value,\n    );\n    if (!paramVals.every((x: any, i: any, arr: any) => x === arr[0])) diffParamKeys.push(param);\n  });\n  return diffParamKeys;\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { runUuids: allRunUuids } = ownProps;\n\n  // Filter out runUuids that do not have corresponding runInfos\n  const runUuids = (allRunUuids ?? []).filter((uuid: string) => getRunInfo(uuid, state));\n  const allParamKeys = getAllParamKeysByRunUuids(runUuids, state);\n  const allMetricKeys = getAllMetricKeysByRunUuids(runUuids, state);\n  const sharedMetricKeys = getSharedMetricKeysByRunUuids(runUuids, state);\n  const { paramsByRunUuid } = state.entities;\n  const diffParamKeys = getDiffParams(allParamKeys, runUuids, paramsByRunUuid);\n\n  return {\n    allParamKeys,\n    allMetricKeys,\n    sharedMetricKeys,\n    diffParamKeys,\n  };\n};\n\nconst styles = {\n  noValuesSelected: (theme: any) => ({\n    padding: theme.spacing.md,\n    textAlign: 'center',\n  }),\n};\n\n// @ts-expect-error TS(2345): Argument of type 'typeof ParallelCoordinatesPlotPa... Remove this comment to see the full error message\nexport default connect(mapStateToProps)(ParallelCoordinatesPlotPanel);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { LegacySkeleton } from '@databricks/design-system';\nimport { SectionErrorBoundary } from '../../common/components/error-boundaries/SectionErrorBoundary';\n\nconst Plot = React.lazy(() => import('react-plotly.js'));\n\nexport const LazyPlot = ({ fallback, ...props }: any) => (\n  <SectionErrorBoundary>\n    <React.Suspense fallback={fallback ?? <LegacySkeleton active />}>\n      <Plot {...props} />\n    </React.Suspense>\n  </SectionErrorBoundary>\n);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { escape } from 'lodash';\nimport React, { Component } from 'react';\nimport {\n  Switch,\n  Spacer,\n  SimpleSelect,\n  SimpleSelectOptionGroup,\n  SimpleSelectOption,\n  FormUI,\n} from '@databricks/design-system';\nimport { getParams, getRunInfo } from '../reducers/Reducers';\nimport { connect } from 'react-redux';\nimport Utils from '../../common/utils/Utils';\nimport { getLatestMetrics } from '../reducers/MetricReducer';\nimport CompareRunUtil from './CompareRunUtil';\nimport { FormattedMessage } from 'react-intl';\nimport { LazyPlot } from './LazyPlot';\nimport { CompareRunPlotContainer } from './CompareRunPlotContainer';\n\ntype CompareRunContourProps = {\n  runInfos: any[]; // TODO: PropTypes.instanceOf(RunInfo)\n  metricLists: any[][];\n  paramLists: any[][];\n  runDisplayNames: string[];\n};\n\ntype CompareRunContourState = any;\n\nexport class CompareRunContour extends Component<CompareRunContourProps, CompareRunContourState> {\n  // Size limits for displaying keys and values in our plot axes and tooltips\n  static MAX_PLOT_KEY_LENGTH = 40;\n  static MAX_PLOT_VALUE_LENGTH = 60;\n\n  metricKeys: any;\n  paramKeys: any;\n\n  constructor(props: CompareRunContourProps) {\n    super(props);\n\n    this.metricKeys = CompareRunUtil.getKeys(this.props.metricLists, true);\n    this.paramKeys = CompareRunUtil.getKeys(this.props.paramLists, true);\n\n    if (this.paramKeys.length + this.metricKeys.length < 3) {\n      this.state = { disabled: true };\n    } else {\n      const common = { disabled: false, reverseColor: false };\n      if (this.metricKeys.length === 0) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.paramKeys[1], isMetric: false },\n          zaxis: { key: this.paramKeys[2], isMetric: false },\n        };\n      } else if (this.paramKeys.length === 0) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.metricKeys[0], isMetric: true },\n          yaxis: { key: this.metricKeys[1], isMetric: true },\n          zaxis: { key: this.metricKeys[2], isMetric: true },\n        };\n      } else if (this.paramKeys.length === 1) {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.metricKeys[0], isMetric: true },\n          zaxis: { key: this.metricKeys[1], isMetric: true },\n        };\n      } else {\n        this.state = {\n          ...common,\n          xaxis: { key: this.paramKeys[0], isMetric: false },\n          yaxis: { key: this.paramKeys[1], isMetric: false },\n          zaxis: { key: this.metricKeys[0], isMetric: true },\n        };\n      }\n    }\n  }\n\n  /**\n   * Get the value of the metric/param described by {key, isMetric}, in run i\n   */\n  getValue(i: any, { key, isMetric }: any) {\n    const value = CompareRunUtil.findInList((isMetric ? this.props.metricLists : this.props.paramLists)[i], key);\n    return value === undefined ? value : (value as any).value;\n  }\n\n  getColorscale() {\n    /*\n     * contour plot has an option named \"reversescale\" which\n     * reverses the color mapping if True, but it doesn't work properly now.\n     *\n     * https://github.com/plotly/plotly.js/issues/4430\n     *\n     * This function is a temporary workaround for the issue.\n     */\n    const colorscale = [\n      [0, 'rgb(5,10,172)'],\n      [0.35, 'rgb(40,60,190)'],\n      [0.5, 'rgb(70,100,245)'],\n      [0.6, 'rgb(90,120,245)'],\n      [0.7, 'rgb(106,137,247)'],\n      [1, 'rgb(220,220,220)'],\n    ];\n\n    // @ts-expect-error TS(4111): Property 'reverseColor' comes from an index signat... Remove this comment to see the full error message\n    if (this.state.reverseColor) {\n      return colorscale;\n    } else {\n      // reverse only RGB values\n      return colorscale.map(([val], index) => [val, colorscale[colorscale.length - 1 - index][1]]);\n    }\n  }\n\n  render() {\n    // @ts-expect-error TS(4111): Property 'disabled' comes from an index signature,... Remove this comment to see the full error message\n    if (this.state.disabled) {\n      return (\n        <div>\n          <FormattedMessage\n            defaultMessage=\"Contour plots can only be rendered when comparing a group of runs\n              with three or more unique metrics or params. Log more metrics or params to your\n              runs to visualize them using the contour plot.\"\n            description=\"Text explanation when contour plot is disabled in comparison pages\n              in MLflow\"\n          />\n        </div>\n      );\n    }\n\n    const keyLength = CompareRunContour.MAX_PLOT_KEY_LENGTH;\n\n    const xs: any = [];\n    const ys: any = [];\n    const zs: any = [];\n    const tooltips: any = [];\n\n    this.props.runInfos.forEach((_, index) => {\n      // @ts-expect-error TS(4111): Property 'xaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const x = this.getValue(index, this.state.xaxis);\n      // @ts-expect-error TS(4111): Property 'yaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const y = this.getValue(index, this.state.yaxis);\n      // @ts-expect-error TS(4111): Property 'zaxis' comes from an index signature, so... Remove this comment to see the full error message\n      const z = this.getValue(index, this.state.zaxis);\n      if (x === undefined || y === undefined || z === undefined) {\n        return;\n      }\n      xs.push(parseFloat(x));\n      ys.push(parseFloat(y));\n      zs.push(parseFloat(z));\n      tooltips.push(this.getPlotlyTooltip(index));\n    });\n\n    const maybeRenderPlot = () => {\n      const invalidAxes = [];\n      if (new Set(xs).size < 2) {\n        invalidAxes.push('X');\n      }\n      if (new Set(ys).size < 2) {\n        invalidAxes.push('Y');\n      }\n      if (invalidAxes.length > 0) {\n        const messageHead =\n          invalidAxes.length > 1 ? `The ${invalidAxes.join(' and ')} axes don't` : `The ${invalidAxes[0]} axis doesn't`;\n        return (\n          <div\n            css={styles.noDataMessage}\n          >{`${messageHead} have enough unique data points to render the contour plot.`}</div>\n        );\n      }\n\n      return (\n        <LazyPlot\n          css={styles.plot}\n          data={[\n            // contour plot\n            {\n              z: zs,\n              x: xs,\n              y: ys,\n              type: 'contour',\n              hoverinfo: 'none',\n              colorscale: this.getColorscale(),\n              connectgaps: true,\n              contours: {\n                coloring: 'heatmap',\n              },\n            },\n            // scatter plot\n            {\n              x: xs,\n              y: ys,\n              text: tooltips,\n              hoverinfo: 'text',\n              type: 'scattergl',\n              mode: 'markers',\n              marker: {\n                size: 10,\n                color: 'rgba(200, 50, 100, .75)',\n              },\n            },\n          ]}\n          layout={{\n            margin: {\n              t: 30,\n            },\n            hovermode: 'closest',\n            xaxis: {\n              title: escape(Utils.truncateString(this.state['xaxis'].key, keyLength)),\n              range: [Math.min(...xs), Math.max(...xs)],\n            },\n            yaxis: {\n              title: escape(Utils.truncateString(this.state['yaxis'].key, keyLength)),\n              range: [Math.min(...ys), Math.max(...ys)],\n            },\n          }}\n          config={{\n            responsive: true,\n            displaylogo: false,\n            scrollZoom: true,\n            modeBarButtonsToRemove: [\n              'sendDataToCloud',\n              'select2d',\n              'lasso2d',\n              'resetScale2d',\n              'hoverClosestCartesian',\n              'hoverCompareCartesian',\n            ],\n          }}\n          useResizeHandler\n        />\n      );\n    };\n\n    return (\n      <CompareRunPlotContainer\n        controls={\n          <>\n            <div>\n              <FormUI.Label htmlFor=\"xaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"X-axis:\"\n                  description=\"Label text for x-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('xaxis')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"yaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Y-axis:\"\n                  description=\"Label text for y-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('yaxis')}\n            </div>\n            <Spacer />\n            <div>\n              <FormUI.Label htmlFor=\"zaxis-selector\">\n                <FormattedMessage\n                  defaultMessage=\"Z-axis:\"\n                  description=\"Label text for z-axis in contour plot comparison in MLflow\"\n                />\n              </FormUI.Label>\n              {this.renderSelect('zaxis')}\n            </div>\n            <Spacer />\n            <div className=\"inline-control\">\n              <FormattedMessage\n                defaultMessage=\"Reverse color:\"\n                description=\"Label text for reverse color toggle in contour plot comparison\n                      in MLflow\"\n              />{' '}\n              <Switch\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_compareruncontour.tsx_282\"\n                className=\"show-point-toggle\"\n                // @ts-expect-error TS(4111): Property 'reverseColor' comes from an index signat... Remove this comment to see the full error message\n                checked={this.state.reverseColor}\n                onChange={(checked) => this.setState({ reverseColor: checked })}\n              />\n            </div>\n          </>\n        }\n      >\n        {maybeRenderPlot()}\n      </CompareRunPlotContainer>\n    );\n  }\n\n  renderSelect(axis: string) {\n    return (\n      <SimpleSelect\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_compareruncontour.tsx_299\"\n        css={{ width: '100%' }}\n        id={axis + '-selector'}\n        onChange={({ target }) => {\n          const { value } = target;\n          const [prefix, ...keyParts] = value.split('-');\n          const key = keyParts.join('-');\n          const isMetric = prefix === 'metric';\n          this.setState({ [axis]: { isMetric, key } });\n        }}\n        value={(this.state[axis].isMetric ? 'metric-' : 'param-') + this.state[axis].key}\n      >\n        <SimpleSelectOptionGroup label=\"Parameter\">\n          {this.paramKeys.map((p: any) => (\n            <SimpleSelectOption key={'param-' + p} value={'param-' + p}>\n              {p}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n        <SimpleSelectOptionGroup label=\"Metric\">\n          {this.metricKeys.map((m: any) => (\n            <SimpleSelectOption key={'metric-' + m} value={'metric-' + m}>\n              {m}\n            </SimpleSelectOption>\n          ))}\n        </SimpleSelectOptionGroup>\n      </SimpleSelect>\n    );\n  }\n\n  getPlotlyTooltip(index: any) {\n    const keyLength = CompareRunContour.MAX_PLOT_KEY_LENGTH;\n    const valueLength = CompareRunContour.MAX_PLOT_VALUE_LENGTH;\n    const runName = this.props.runDisplayNames[index];\n    let result = `<b>${escape(runName)}</b><br>`;\n    const paramList = this.props.paramLists[index];\n    paramList.forEach((p) => {\n      result +=\n        escape(Utils.truncateString(p.key, keyLength)) +\n        ': ' +\n        escape(Utils.truncateString(p.value, valueLength)) +\n        '<br>';\n    });\n    const metricList = this.props.metricLists[index];\n    if (metricList.length > 0) {\n      result += paramList.length > 0 ? '<br>' : '';\n      metricList.forEach((m) => {\n        result += escape(Utils.truncateString(m.key, keyLength)) + ': ' + Utils.formatMetric(m.value) + '<br>';\n      });\n    }\n    return result;\n  }\n}\n\nconst styles = {\n  plot: {\n    width: '100%',\n  },\n  noDataMessage: (theme: any) => ({\n    padding: theme.spacing.sm,\n    display: 'flex',\n    justifyContent: 'center',\n  }),\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const runInfos: any = [];\n  const metricLists: any = [];\n  const paramLists: any = [];\n  const { runUuids } = ownProps;\n  runUuids.forEach((runUuid: any) => {\n    runInfos.push(getRunInfo(runUuid, state));\n    metricLists.push(Object.values(getLatestMetrics(runUuid, state)));\n    paramLists.push(Object.values(getParams(runUuid, state)));\n  });\n  return { runInfos, metricLists, paramLists };\n};\n\nexport default connect(mapStateToProps)(CompareRunContour);\n"],"names":["paramOptionPrefix","_ref","name","styles","Selector","id","onChange","paramKeys","metricKeys","intl","useIntl","_jsxs","SimpleSelect","componentId","css","placeholder","formatMessage","defaultMessage","target","value","_prefix","key","split","isParam","startsWith","children","_jsx","SimpleSelectOptionGroup","label","map","SimpleSelectOption","_ref2","_ref3","CompareRunBox","runInfos","metricLists","paramLists","xAxis","setXAxis","useState","undefined","yAxis","setYAxis","Array","from","Set","flat","sort","getBoxPlotData","data","forEach","_","index","params","metrics","x","find","y","push","Object","entries","values","type","jitter","pointpos","boxpoints","Row","Col","span","borderSpacer","FormUI","Label","htmlFor","FormattedMessage","LazyPlot","layout","margin","t","hovermode","xaxis","title","yaxis","config","responsive","displaylogo","scrollZoom","modeBarButtonsToRemove","useResizeHandler","Typography","Text","size","theme","paddingLeft","spacing","xs","CompareRunUtil","findInList","found","getKeys","lists","numeric","keys","list","item","isNaN","parseFloat","filter","k","PreviewBadge","className","useDesignSystemTheme","Tag","_css","marginLeft","color","CompareRunPlotContainer","props","wrapper","controls","plotWrapper","overflow","width","height","minHeight","display","gridTemplateColumns","padding","PageContainer","usesFullHeight","restProps","PageWrapper","useFullHeightLayout","Spacer","fixedSpacer","container","defaultProps","flexDirection","flexGrow","flex","flexShrink","paddingBottom","CompareRunScatterImpl","Component","constructor","super","this","length","state","disabled","isMetric","getValue","i","render","keyLength","MAX_PLOT_KEY_LENGTH","ys","tooltips","getPlotlyTooltip","_Fragment","renderSelect","text","hoverinfo","mode","marker","escape","Utils","truncateString","plot","axis","select","prefix","keyParts","join","setState","p","m","valueLength","MAX_PLOT_VALUE_LENGTH","runName","runDisplayNames","result","paramList","metricList","formatMetric","CompareRunScatter","connect","mapStateToProps","ownProps","runUuids","runUuid","getRunInfo","getLatestMetrics","getParams","UNKNOWN_TERM","ParallelCoordinatesPlotView","React","args","sequence","updateMetricAxisLabelStyle","metricsKeySet","getLabelElementsFromDom","el","has","innerHTML","style","fill","fontWeight","maybeUpdateStateForColorScale","currentSequenceFromPlotly","rightmostMetricKeyFromState","findLastKeyFromState","handlePlotUpdate","dimensions","d","getDerivedStateFromProps","keysFromProps","keysFromState","getData","paramDimensions","metricDimensions","lastMetricKey","lastMetricDimension","line","getColorScaleConfigsForDimension","getDimensionsOrderedBySequence","dimension","indexOf","keySet","showscale","colorscale","cmin","cmax","autosize","onUpdate","displayModeBar","document","querySelectorAll","createDimension","entryByRunUuid","attributes","dataType","inferType","Number","labels","sortedUniqLabels","addUnknownTerm","filteredSortedUniqLabels","labelToIndexStr","tickvals","ticktext","sortedUniqLabel","substring","generateAttributesForCategoricalDimension","maxValue","MIN_SAFE_INTEGER","numericValue","tickformat","latestMetricsByRunUuid","paramsByRunUuid","entities","paramKey","metricKey","ParallelCoordinatesPlotControls","selectedParamKeys","selectedMetricKeys","handleParamsSelectChange","handleMetricsSelectChange","onClearAllSelect","LegacySelect","Option","marginTop","Button","onClick","ParallelCoordinatesPlotPanel","diffParamKeys","slice","sharedMetricKeys","paramValues","metricValues","allParamKeys","allMetricKeys","noValuesSelected","Title","level","md","textAlign","allRunUuids","uuid","getAllParamKeysByRunUuids","getAllMetricKeysByRunUuids","getSharedMetricKeysByRunUuids","getDiffParams","param","every","arr","Plot","fallback","SectionErrorBoundary","LegacySkeleton","active","CompareRunContour","common","reverseColor","zaxis","getColorscale","val","zs","z","Switch","checked","maybeRenderPlot","invalidAxes","messageHead","noDataMessage","connectgaps","contours","coloring","range","Math","min","max","sm","justifyContent"],"sourceRoot":""}