{"version":3,"file":"static/js/7554.28d4115d.chunk.js","mappings":"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","sources":["experiment-tracking/components/experiment-page/utils/persistSearchFacets.serializers.ts","experiment-tracking/components/experiment-page/hooks/useExperimentPageSearchFacets.tsx","../node_modules/invariant/browser.js","shared/web-shared/snippet/actions/SnippetActionButton.tsx","shared/web-shared/snippet/actions/SnippetCopyAction.tsx","shared/web-shared/snippet/hooks/useCopyController.tsx","shared/web-shared/snippet/index.tsx","common/utils/StringUtils.ts","experiment-tracking/components/experiment-page/components/ExperimentViewTraces.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentPageViewMode.tsx","shared/building_blocks/CopyButton.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsModeSwitch.tsx","../node_modules/use-debounce/src/useDebouncedCallback.ts","../node_modules/use-debounce/src/useDebounce.ts","experiment-tracking/components/experiment-page/models/ExperimentPageSearchFacetsState.tsx","experiment-tracking/pages/experiment-traces/ExperimentTracesPage.tsx","../node_modules/use-clipboard-copy/dist/index.js"],"sourcesContent":["import { isArray } from 'lodash';\nimport { atobUtf8, btoaUtf8 } from '../../../../common/utils/StringUtils';\nimport { ExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport { ExperimentPageUIState } from '../models/ExperimentPageUIState';\n\ntype PersistSearchSerializeFunctions<Serialized = any, Unserialized = any> = {\n  serializeLocalStorage?(input: Unserialized): Serialized;\n  serializeQueryString?(input: Unserialized): Serialized;\n  deserializeLocalStorage?(input: Serialized): Unserialized;\n  deserializeQueryString?(input: Serialized): Unserialized;\n};\n\n/**\n * \"Flattens\" the strings array, i.e. merges it into a single value\n */\nconst flattenString = (input: string | string[]) => (isArray(input) ? input.join() : input);\n\n/**\n * All known field serialization and deserialization mechanisms used in search facets state persisting mechanism.\n */\nconst persistSearchStateFieldSerializers: Record<string, PersistSearchSerializeFunctions> = {\n  /**\n   * In rare cases, search filter might contain commas that interfere with `querystring` library\n   * parsing causing it to return array instead of string. Since it's difficult to selectively\n   * change `querystring`'s parsing action, we are making sure that the parsed values are always strings.\n   */\n  searchFilter: {\n    deserializeLocalStorage: flattenString,\n    deserializeQueryString: flattenString,\n  },\n  orderByAsc: {\n    serializeQueryString(input: boolean) {\n      return input.toString();\n    },\n    deserializeQueryString(input: string) {\n      return input === 'true';\n    },\n  },\n  datasetsFilter: {\n    serializeQueryString(inputs: ExperimentPageSearchFacetsState['datasetsFilter']) {\n      const inputsWithoutExperimentId = inputs.map(({ name, digest, context }) => ({\n        name,\n        digest,\n        context,\n      }));\n      return btoaUtf8(JSON.stringify(inputsWithoutExperimentId));\n    },\n    deserializeQueryString(input: string): ExperimentPageSearchFacetsState['datasetsFilter'] {\n      try {\n        // Process the URL defensively against intended and unintended malformation\n        const parsedResult = JSON.parse(atobUtf8(input));\n        if (!Array.isArray(parsedResult)) {\n          return [];\n        }\n        return parsedResult;\n      } catch {\n        return [];\n      }\n    },\n  },\n  /**\n   * Array of visible configured charts are serialized into base64-encoded JSON when put into query string\n   */\n  compareRunCharts: {\n    serializeQueryString(input: ExperimentPageUIState['compareRunCharts']) {\n      return btoaUtf8(JSON.stringify(input));\n    },\n    deserializeQueryString(input: string): ExperimentPageUIState['compareRunCharts'] {\n      try {\n        // Process the URL defensively against intended and unintended malformation\n        const parsedResult = JSON.parse(atobUtf8(input));\n        if (!Array.isArray(parsedResult)) {\n          return undefined;\n        }\n        return parsedResult;\n      } catch {\n        return undefined;\n      }\n    },\n  },\n  /**\n   * For \"compareRunsMode\", we will always save \"undefined\" value to local storage so users will\n   * get back to default view after visiting the view once more.\n   */\n  compareRunsMode: {\n    serializeLocalStorage() {\n      return undefined;\n    },\n  },\n};\n\ntype StateKey = keyof Partial<ExperimentPageSearchFacetsState>;\n\n/**\n * Consumes an object with persistable search facets and transforms relevant fields\n * with the registered serialization functions specific to query string.\n * Example scenario: serializing an array of visible configured charts into base64-encoded JSON.\n */\nexport const serializeFieldsToQueryString = (input: Partial<ExperimentPageSearchFacetsState>) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const serializeFn = persistSearchStateFieldSerializers[field]?.serializeQueryString;\n    if (serializeFn) {\n      resultObject[field] = serializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with search facets extracted from query string and transforms relevant fields\n * with the registered deserialization functions. Example scenario: deserializing an array of\n * visible configured charts from base64-encoded JSON.\n */\nexport const deserializeFieldsFromQueryString = (\n  input: Partial<ExperimentPageSearchFacetsState> | Record<string, any>,\n) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const deserializeFn = persistSearchStateFieldSerializers[field]?.deserializeQueryString;\n    if (deserializeFn) {\n      resultObject[field] = deserializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with persistable search facets and transforms relevant fields\n * with the registered serialization functions specific to local storage.\n * Example scenario: serializing an array of visible configured charts into base64-encoded JSON.\n */\nexport const serializeFieldsToLocalStorage = (input: Partial<ExperimentPageSearchFacetsState>) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const serializeFn = persistSearchStateFieldSerializers[field]?.serializeLocalStorage;\n    if (serializeFn) {\n      resultObject[field] = serializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with search facets extracted from local storage and transforms relevant fields\n * with the registered deserialization functions. Example scenario: deserializing an array of\n * visible configured charts from base64-encoded JSON.\n */\nexport const deserializeFieldsFromLocalStorage = (\n  input: Partial<ExperimentPageSearchFacetsState> | Record<string, any>,\n) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const deserializeFn = persistSearchStateFieldSerializers[field]?.deserializeLocalStorage;\n    if (deserializeFn) {\n      resultObject[field] = deserializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n","import { assign, entries, isNil, keys, omitBy, pick } from 'lodash';\nimport { useMemo } from 'react';\nimport { NavigateOptions, useParams, useSearchParams } from '../../../../common/utils/RoutingUtils';\nimport {\n  ExperimentPageSearchFacetsState,\n  createExperimentPageSearchFacetsState,\n} from '../models/ExperimentPageSearchFacetsState';\nimport {\n  deserializeFieldsFromQueryString,\n  serializeFieldsToQueryString,\n} from '../utils/persistSearchFacets.serializers';\n\nexport const EXPERIMENT_PAGE_QUERY_PARAM_KEYS = [\n  'searchFilter',\n  'orderByKey',\n  'orderByAsc',\n  'startTime',\n  'lifecycleFilter',\n  'modelVersionFilter',\n  'datasetsFilter',\n];\n\nexport const EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW = 'isPreview';\n\nexport type ExperimentPageQueryParams = any;\n\nexport type ExperimentQueryParamsSearchFacets = ExperimentPageSearchFacetsState & {\n  experimentIds?: string[];\n};\n\nconst getComparedExperimentIds = (comparedExperimentIds: string): string[] => {\n  try {\n    return comparedExperimentIds ? JSON.parse(comparedExperimentIds) : [];\n  } catch {\n    return [];\n  }\n};\n\nexport const useExperimentPageSearchFacets = (): [ExperimentQueryParamsSearchFacets | null, string[], boolean] => {\n  const [queryParams] = useSearchParams();\n\n  // Pick only the keys we care about\n  const pickedValues = useMemo(\n    () => pick(Object.fromEntries(queryParams.entries()), EXPERIMENT_PAGE_QUERY_PARAM_KEYS),\n    [queryParams],\n  );\n\n  // Check if the page is in preview mode. If so, it should not be persisted until explicitly changed\n  const isPreview = queryParams.get(EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW) === 'true';\n\n  // Destructure to get raw values\n  const { searchFilter, orderByKey, orderByAsc, startTime, lifecycleFilter, modelVersionFilter, datasetsFilter } =\n    pickedValues;\n\n  const areValuesEmpty = keys(pickedValues).length < 1;\n\n  const { experimentId } = useParams<{ experimentId: string }>();\n  const queryParamsExperimentIds = queryParams.get('experiments');\n\n  // Calculate experiment IDs\n  const experimentIds = useMemo(() => {\n    if (experimentId) {\n      return [experimentId];\n    }\n    if (queryParamsExperimentIds) {\n      return getComparedExperimentIds(queryParamsExperimentIds);\n    }\n    return [];\n  }, [experimentId, queryParamsExperimentIds]);\n\n  // Calculate and memoize search facets\n  const searchFacets = useMemo(() => {\n    if (areValuesEmpty) {\n      return null;\n    }\n    const deserializedFields = deserializeFieldsFromQueryString(\n      omitBy(\n        {\n          searchFilter,\n          orderByKey,\n          orderByAsc,\n          startTime,\n          lifecycleFilter,\n          modelVersionFilter,\n          datasetsFilter,\n        },\n        isNil,\n      ),\n    ) as ExperimentPageSearchFacetsState;\n\n    // If not all fields are provided, fill the gaps with default values\n    return assign(createExperimentPageSearchFacetsState(), deserializedFields);\n  }, [\n    // Use exact values to avoid unnecessary re-renders\n    searchFilter,\n    orderByKey,\n    orderByAsc,\n    startTime,\n    lifecycleFilter,\n    modelVersionFilter,\n    datasetsFilter,\n    areValuesEmpty,\n  ]);\n\n  return [searchFacets, experimentIds, isPreview];\n};\n\nexport const useUpdateExperimentPageSearchFacets = () => {\n  const [, setParams] = useSearchParams();\n\n  return (partialFacets: Partial<ExperimentPageSearchFacetsState>, options?: NavigateOptions) => {\n    const newParams = serializeFieldsToQueryString(partialFacets);\n    setParams((currentParams) => {\n      entries(newParams).forEach(([key, value]) => {\n        currentParams.set(key, value);\n      });\n      currentParams.delete(EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW);\n      return currentParams;\n    }, options);\n  };\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","import { css } from '@emotion/react';\nimport type { ReactNode } from 'react';\nimport React from 'react';\n\nimport type { ButtonProps } from '@databricks/design-system';\nimport { Button, LegacyTooltip } from '@databricks/design-system';\n\ntype SnippetActionButtonProps = Pick<ButtonProps, 'icon' | 'onClick' | 'href' | 'rel' | 'target'> & {\n  tooltipMessage: NonNullable<ReactNode>;\n};\n\nexport default function SnippetActionButton({ tooltipMessage, ...buttonProps }: SnippetActionButtonProps) {\n  const style = css({\n    zIndex: 1, // required for action buttons to be visible and float\n  });\n  return (\n    <LegacyTooltip title={tooltipMessage}>\n      <Button\n        componentId=\"codegen_web-shared_src_snippet_actions_snippetactionbutton.tsx_33\"\n        {...buttonProps}\n        css={style}\n      />\n    </LegacyTooltip>\n  );\n}\n","import React from 'react';\n\nimport type { ButtonProps } from '@databricks/design-system';\n\nimport SnippetActionButton from './SnippetActionButton';\nimport { useCopyController } from '../hooks/useCopyController';\n\nexport interface SnippetCopyActionProps extends ButtonProps {\n  /**\n   * The text to be copied into clipboard when action button is clicked.\n   */\n  copyText: string;\n  onClick?: (e: React.MouseEvent) => void;\n}\n\nexport function SnippetCopyAction({ copyText, onClick, ...props }: SnippetCopyActionProps) {\n  const { actionIcon, tooltipMessage, copy } = useCopyController(copyText);\n\n  return (\n    <SnippetActionButton\n      tooltipMessage={tooltipMessage}\n      icon={actionIcon}\n      onClick={(e) => {\n        copy();\n        onClick?.(e);\n      }}\n      {...props}\n    />\n  );\n}\n","import type { ReactElement } from 'react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useClipboard } from 'use-clipboard-copy';\n\nimport { CheckIcon, CopyIcon } from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nexport interface CopyController {\n  actionIcon: ReactElement;\n  tooltipMessage: string;\n  copy: () => void;\n  copied: boolean;\n  ariaLabel: string;\n  tooltipOpen: boolean;\n  handleTooltipOpenChange: (open: boolean) => void;\n}\n\n/**\n * Utility hook that is internal to web-shared, use: `Copyable` or `CopyActionButton`\n *  or if it's a `CodeSnippet`, `SnippetCopyAction`\n */\nexport function useCopyController(text: string, copyTooltip?: string, onCopy?: () => void): CopyController {\n  const intl = useIntl();\n\n  const copyMessage = copyTooltip\n    ? copyTooltip\n    : intl.formatMessage({\n        defaultMessage: 'Copy',\n        description: 'Tooltip message displayed on copy action',\n      });\n\n  const copiedMessage = intl.formatMessage({\n    defaultMessage: 'Copied',\n    description: 'Tooltip message displayed on copy action after it has been clicked',\n  });\n\n  const clipboard = useClipboard();\n  const copiedTimerIdRef = useRef<number>();\n  const [copied, setCopied] = useState(false);\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(copiedTimerIdRef.current);\n    };\n  }, []);\n\n  const copy = () => {\n    clipboard.copy(text);\n    window.clearTimeout(copiedTimerIdRef.current);\n    setCopied(true);\n    onCopy?.();\n    copiedTimerIdRef.current = window.setTimeout(() => {\n      setCopied(false);\n    }, 3000);\n  };\n\n  return {\n    actionIcon: copied ? <CheckIcon /> : <CopyIcon />,\n    tooltipMessage: copied ? copiedMessage : copyMessage,\n    copy,\n    copied,\n    ariaLabel: copyMessage,\n    tooltipOpen: open || copied,\n    handleTooltipOpenChange: setOpen,\n  };\n}\n","import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport go from 'react-syntax-highlighter/dist/cjs/languages/prism/go';\nimport java from 'react-syntax-highlighter/dist/cjs/languages/prism/java';\nimport javascript from 'react-syntax-highlighter/dist/cjs/languages/prism/javascript';\nimport json from 'react-syntax-highlighter/dist/cjs/languages/prism/json';\nimport python from 'react-syntax-highlighter/dist/cjs/languages/prism/python';\nimport yaml from 'react-syntax-highlighter/dist/cjs/languages/prism/yaml';\nimport sql from 'react-syntax-highlighter/dist/cjs/languages/prism/sql';\n\nSyntaxHighlighter.registerLanguage('sql', sql);\nSyntaxHighlighter.registerLanguage('java', java);\nSyntaxHighlighter.registerLanguage('python', python);\nSyntaxHighlighter.registerLanguage('go', go);\nSyntaxHighlighter.registerLanguage('javascript', javascript);\nSyntaxHighlighter.registerLanguage('yaml', yaml);\nSyntaxHighlighter.registerLanguage('json', json);\n\nimport duotoneDarkStyle from './theme/databricks-duotone-dark';\nimport lightStyle from './theme/databricks-light';\nimport { CSSProperties, ReactNode } from 'react';\nimport { pick } from 'lodash';\nexport type CodeSnippetTheme = 'duotoneDark' | 'light';\nexport const buttonBackgroundColorDark = 'rgba(140, 203, 255, 0)';\nexport const buttonColorDark = 'rgba(255, 255, 255, 0.84)';\nexport const buttonHoverColorDark = '#8ccbffcc';\nexport const buttonHoverBackgroundColorDark = 'rgba(140, 203, 255, 0.08)';\nexport const duboisAlertBackgroundColor = '#fff0f0';\nexport const snippetPadding = '24px';\nconst themesStyles: Record<CodeSnippetTheme, any> = {\n  light: lightStyle,\n  duotoneDark: duotoneDarkStyle,\n};\n\nexport type CodeSnippetLanguage = 'sql' | 'java' | 'python' | 'javascript' | 'go' | 'yaml' | 'text' | 'json';\n\nexport interface CodeSnippetProps {\n  /**\n   * The code string\n   */\n  children: string;\n  /**\n   * The actions that are displayed on the right top corner of the component\n   *  see `./actions` for built-in actions\n   */\n  actions?: NonNullable<ReactNode> | NonNullable<ReactNode>[];\n  /**\n   * The theme, default theme is `light`\n   */\n  theme?: CodeSnippetTheme;\n  /**\n   * Language of the code (`children`)\n   */\n  language: CodeSnippetLanguage;\n  /**\n   * Custom styles (passed to the internal `<pre>`)\n   */\n  style?: CSSProperties;\n  /**\n   * Whether to show line numbers on the left or not\n   */\n  showLineNumbers?: boolean;\n  /**\n   * Custom styles for line numbers\n   */\n  lineNumberStyle?: CSSProperties;\n  /**\n   * Boolean to specify whether to style the <code> block with white-space: pre-wrap or white-space: pre\n   */\n  wrapLongLines?: boolean;\n  /**\n   * Boolean that determines whether or not each line of code should be wrapped in a parent element\n   */\n  wrapLines?: boolean;\n  /**\n   * Props to pass to the line elements\n   */\n  lineProps?: React.HTMLProps<HTMLElement> | undefined;\n  /**\n   * Custom tag to use for the `<pre>` element\n   */\n  PreTag?: keyof JSX.IntrinsicElements | React.ComponentType<any> | undefined;\n}\n\n/**\n * `CodeSnippet` is used for highlighting code, use this instead of\n */\nexport function CodeSnippet({\n  theme = 'light',\n  language,\n  actions,\n  style,\n  children,\n  showLineNumbers,\n  lineNumberStyle,\n  wrapLongLines,\n  wrapLines,\n  PreTag,\n}: CodeSnippetProps) {\n  const customStyle = {\n    border: 'none',\n    borderRadius: 0,\n    margin: 0,\n    padding: snippetPadding,\n    ...style,\n  };\n  return (\n    <SyntaxHighlighter\n      showLineNumbers={showLineNumbers}\n      lineNumberStyle={lineNumberStyle}\n      language={language}\n      style={themesStyles[theme]}\n      customStyle={customStyle}\n      codeTagProps={{\n        style: pick(style, 'backgroundColor'),\n      }}\n      wrapLongLines={wrapLongLines}\n      wrapLines={wrapLines}\n      PreTag={PreTag}\n    >\n      {children}\n    </SyntaxHighlighter>\n  );\n}\n\nexport * from './actions/SnippetCopyAction';\n","import _ from 'lodash';\n// Import pako lazily to reduce bundle size\nconst lazyPako = () => import('pako');\n\nexport const truncateToFirstLineWithMaxLength = (str: string, maxLength: number): string => {\n  const truncated = _.truncate(str, {\n    length: maxLength,\n  });\n  return _.takeWhile(truncated, (char) => char !== '\\n').join('');\n};\n\nexport const capitalizeFirstChar = (str: unknown) => {\n  if (!str || typeof str !== 'string' || str.length < 1) {\n    return str;\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n};\n\nexport const middleTruncateStr = (str: string, maxLen: number) => {\n  if (str.length > maxLen) {\n    const firstPartLen = Math.floor((maxLen - 3) / 2);\n    const lastPartLen = maxLen - 3 - firstPartLen;\n    return str.substring(0, firstPartLen) + '...' + str.substring(str.length - lastPartLen, str.length);\n  } else {\n    return str;\n  }\n};\n\nconst capitalizeFirstLetter = (string: string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n/* eslint-disable no-bitwise */\n/**\n * UTF-8 safe version of base64 encoder\n * Source: http://www.webtoolkit.info/javascript_base64.html\n *\n * @param {string} input - Text to encode\n */\nexport const btoaUtf8 = (input: string) => {\n  let output = '';\n  let i = 0;\n\n  const result = _utf8_encode(input);\n\n  while (i < result.length) {\n    const chr1 = result.charCodeAt(i++);\n    const chr2 = result.charCodeAt(i++);\n    const chr3 = result.charCodeAt(i++);\n\n    const enc1 = chr1 >> 2;\n    const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n    let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n    let enc4 = chr3 & 63;\n\n    if (isNaN(chr2)) {\n      enc4 = 64;\n      enc3 = enc4;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n\n    output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n  }\n\n  return output;\n};\n\n/**\n * UTF-8 safe version of base64 decoder\n * Source: http://www.webtoolkit.info/javascript_base64.html\n *\n * @param {string} input - Text to decode\n */\nexport const atobUtf8 = (input: string) => {\n  let output = '';\n  let i = 0;\n\n  const result = input?.replace(/[^A-Za-z0-9+/=]/g, '') || '';\n\n  while (i < result.length) {\n    const enc1 = _keyStr.indexOf(result.charAt(i++));\n    const enc2 = _keyStr.indexOf(result.charAt(i++));\n    const enc3 = _keyStr.indexOf(result.charAt(i++));\n    const enc4 = _keyStr.indexOf(result.charAt(i++));\n\n    const chr1 = (enc1 << 2) | (enc2 >> 4);\n    const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n    const chr3 = ((enc3 & 3) << 6) | enc4;\n\n    output += String.fromCharCode(chr1);\n\n    if (enc3 !== 64) {\n      output += String.fromCharCode(chr2);\n    }\n\n    if (enc4 !== 64) {\n      output += String.fromCharCode(chr3);\n    }\n  }\n\n  return _utf8_decode(output);\n};\n\n/**\n * (private method) does a UTF-8 encoding\n *\n * @private\n * @param {string} string - Text to encode\n */\nconst _utf8_encode = (string = '') => {\n  const result = string.replace(/\\r\\n/g, '\\n');\n  let utftext = '';\n\n  for (let n = 0; n < result.length; n++) {\n    const c = result.charCodeAt(n);\n\n    if (c < 128) {\n      utftext += String.fromCharCode(c);\n    } else if (c > 127 && c < 2048) {\n      utftext += String.fromCharCode((c >> 6) | 192) + String.fromCharCode((c & 63) | 128);\n    } else {\n      utftext +=\n        String.fromCharCode((c >> 12) | 224) +\n        String.fromCharCode(((c >> 6) & 63) | 128) +\n        String.fromCharCode((c & 63) | 128);\n    }\n  }\n\n  return utftext;\n};\n\n/**\n * (private method) does a UTF-8 decoding\n *\n * @private\n * @param {string} utftext - UTF-8 text to dencode\n */\nconst _utf8_decode = (utftext = '') => {\n  let string = '';\n  let i = 0;\n\n  while (i < utftext.length) {\n    const c = utftext.charCodeAt(i);\n\n    if (c < 128) {\n      string += String.fromCharCode(c);\n      i++;\n    } else if (c > 191 && c < 224) {\n      const c2 = utftext.charCodeAt(i + 1);\n      string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n      i += 2;\n    } else {\n      const c2 = utftext.charCodeAt(i + 1);\n      const c3 = utftext.charCodeAt(i + 2);\n      string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n      i += 3;\n    }\n  }\n  return string;\n};\n/* eslint-enable no-bitwise */\n\n/**\n * Returns a SHA256 hash of the input string\n */\nexport const getStringSHA256 = (input: string) => {\n  return crypto.subtle.digest('SHA-256', new TextEncoder().encode(input)).then((arrayBuffer) => {\n    return Array.prototype.map.call(new Uint8Array(arrayBuffer), (x) => ('00' + x.toString(16)).slice(-2)).join('');\n  });\n};\n\nconst COMPRESSED_TEXT_DEFLATE_PREFIX = 'deflate;';\n\nexport const textCompressDeflate = async (text: string) => {\n  const pako = await lazyPako();\n  const binaryData = pako.deflate(text);\n\n  // Buffer-based implementation\n  if (typeof Buffer !== 'undefined') {\n    const b64encoded = Buffer.from(binaryData).toString('base64');\n    return `${COMPRESSED_TEXT_DEFLATE_PREFIX}${b64encoded}`;\n  }\n\n  // btoa-based implementation\n  const binaryString = Array.from(binaryData, (byte) => String.fromCodePoint(byte)).join('');\n  return `${COMPRESSED_TEXT_DEFLATE_PREFIX}${btoa(binaryString)}`;\n};\n\nexport const textDecompressDeflate = async (compressedText: string) => {\n  const pako = await lazyPako();\n  if (!compressedText.startsWith(COMPRESSED_TEXT_DEFLATE_PREFIX)) {\n    throw new Error('Invalid compressed text, payload header invalid');\n  }\n  const compressedTextWithoutPrefix = compressedText.slice(COMPRESSED_TEXT_DEFLATE_PREFIX.length);\n\n  // Buffer-based implementation\n  if (typeof Buffer !== 'undefined') {\n    const binaryString = Buffer.from(compressedTextWithoutPrefix, 'base64');\n    return pako.inflate(\n      // This doesn't fail in Mlflow-Copybara-Tester-Pr. TODO: check why.\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore [FEINF-4084] No overload matches this call.\n      binaryString,\n      { to: 'string' },\n    );\n  }\n\n  // atob-based implementation\n  const binaryString = atob(compressedTextWithoutPrefix);\n  return pako.inflate(\n    Uint8Array.from(binaryString, (m) => m.codePointAt(0) ?? 0),\n    { to: 'string' },\n  );\n};\n\nexport const isTextCompressedDeflate = (text: string) => text.startsWith(COMPRESSED_TEXT_DEFLATE_PREFIX);\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { TracesView } from '../../traces/TracesView';\nimport { ExperimentViewRunsModeSwitch } from './runs/ExperimentViewRunsModeSwitch';\nimport { shouldEnableExperimentPageHeaderV2 } from '../../../../common/utils/FeatureUtils';\n\nexport const ExperimentViewTraces = ({ experimentIds }: { experimentIds: string[] }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        minHeight: 225, // This is the exact height for displaying a minimum five rows and table header\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        flex: 1,\n        overflow: 'hidden',\n      }}\n    >\n      {shouldEnableExperimentPageHeaderV2() ? null : <ExperimentViewRunsModeSwitch hideBorder={false} />}\n      <TracesComponent experimentIds={experimentIds} />\n    </div>\n  );\n};\n\nconst TracesComponent = ({ experimentIds }: { experimentIds: string[] }) => {\n  return <TracesView experimentIds={experimentIds} />;\n};\n","import { useNavigate, useSearchParams } from '../../../../common/utils/RoutingUtils';\nimport { ExperimentPageTabName } from '../../../constants';\nimport Routes from '../../../routes';\nimport { type ExperimentViewRunsCompareMode } from '../../../types';\n\nexport const EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY = 'compareRunsMode';\n\nexport const getExperimentPageDefaultViewMode = (): ExperimentViewRunsCompareMode => 'TABLE';\n\n// This map is being used to wire routes to certain view modes\nconst viewModeToRouteMap: Partial<Record<ExperimentViewRunsCompareMode, (experimentId: string) => void>> = {\n  MODELS: (experimentId: string) => Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Models),\n};\n/**\n * Hook using search params to retrieve and update the current experiment page runs view mode.\n * Handles legacy part of the mode switching, based on \"compareRunsMode\" query parameter.\n * Modern part of the mode switching is handled by <ExperimentViewRunsModeSwitchV2> which works using route params.\n */\nexport const useExperimentPageViewMode = (): [\n  ExperimentViewRunsCompareMode,\n  (newCompareRunsMode: ExperimentViewRunsCompareMode, experimentId?: string) => void,\n] => {\n  const [params, setParams] = useSearchParams();\n  const navigate = useNavigate();\n\n  const mode =\n    (params.get(EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY) as ExperimentViewRunsCompareMode) ||\n    getExperimentPageDefaultViewMode();\n  const setMode = (newCompareRunsMode: ExperimentViewRunsCompareMode, experimentId?: string) => {\n    // Check if the new mode should actually navigate to a different route instead of just changing the query param\n    if (newCompareRunsMode in viewModeToRouteMap && experimentId) {\n      const route = viewModeToRouteMap[newCompareRunsMode]?.(experimentId);\n      if (route) {\n        navigate(route);\n        return;\n      }\n    }\n    setParams(\n      (currentParams) => {\n        currentParams.set(EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY, newCompareRunsMode || '');\n        return currentParams;\n      },\n      { replace: false },\n    );\n  };\n\n  return [mode, setMode];\n};\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, type ButtonProps, LegacyTooltip } from '@databricks/design-system';\n\ninterface CopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n  componentId?: string;\n}\n\nexport const CopyButton = ({ copyText, showLabel = true, componentId, ...buttonProps }: CopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <LegacyTooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId={componentId ?? 'mlflow.shared.copy_button'}\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </LegacyTooltip>\n  );\n};\n","import { InfoPopover, LegacyTabs, LegacyTooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentPageViewState } from '../../models/ExperimentPageViewState';\nimport type { ExperimentViewRunsCompareMode } from '../../../../types';\nimport { PreviewBadge } from '@mlflow/mlflow/src/shared/building_blocks/PreviewBadge';\nimport { FeatureBadge } from '@mlflow/mlflow/src/shared/building_blocks/FeatureBadge';\nimport { getExperimentPageDefaultViewMode, useExperimentPageViewMode } from '../../hooks/useExperimentPageViewMode';\nimport { shouldUseRenamedUnifiedTracesTab } from '../../../../../common/utils/FeatureUtils';\nimport { MONITORING_BETA_EXPIRATION_DATE } from '../../../../constants';\nimport { useExperimentPageSearchFacets } from '../../hooks/useExperimentPageSearchFacets';\n\nexport interface ExperimentViewRunsModeSwitchProps {\n  viewState?: ExperimentPageViewState;\n  runsAreGrouped?: boolean;\n  hideBorder?: boolean;\n  explicitViewMode?: ExperimentViewRunsCompareMode;\n  experimentId?: string;\n}\n\n/**\n * Allows switching between various modes of the experiment page view.\n * Handles legacy part of the mode switching, based on \"compareRunsMode\" query parameter.\n * Modern part of the mode switching is handled by <ExperimentViewRunsModeSwitchV2> which works using route params.\n */\nexport const ExperimentViewRunsModeSwitch = ({\n  viewState,\n  runsAreGrouped,\n  hideBorder = true,\n}: ExperimentViewRunsModeSwitchProps) => {\n  const [, experimentIds] = useExperimentPageSearchFacets();\n  const { theme } = useDesignSystemTheme();\n  const [viewMode, setViewModeInURL] = useExperimentPageViewMode();\n  const { classNamePrefix } = useDesignSystemTheme();\n  const currentViewMode = viewMode || getExperimentPageDefaultViewMode();\n  const validRunsTabModes = shouldUseRenamedUnifiedTracesTab() ? ['TABLE', 'CHART', 'ARTIFACT'] : ['TABLE', 'CHART'];\n  const activeTab = validRunsTabModes.includes(currentViewMode) ? 'RUNS' : currentViewMode;\n\n  // Extract experiment ID from the URL but only if it's a single experiment.\n  // In case of multiple experiments (compare mode), the experiment ID is undefined.\n  const singleExperimentId = experimentIds.length === 1 ? experimentIds[0] : undefined;\n\n  return (\n    <LegacyTabs\n      dangerouslyAppendEmotionCSS={{\n        [`.${classNamePrefix}-tabs-nav`]: {\n          marginBottom: 0,\n          '::before': {\n            display: hideBorder ? 'none' : 'block',\n          },\n        },\n      }}\n      activeKey={activeTab}\n      onChange={(tabKey) => {\n        const newValue = tabKey as ExperimentViewRunsCompareMode | 'RUNS';\n\n        if (activeTab === newValue) {\n          return;\n        }\n\n        if (newValue === 'RUNS') {\n          return setViewModeInURL('TABLE');\n        }\n\n        setViewModeInURL(newValue, singleExperimentId);\n      }}\n    >\n      <LegacyTabs.TabPane\n        tab={\n          <span data-testid=\"experiment-runs-mode-switch-combined\">\n            <FormattedMessage\n              defaultMessage=\"Runs\"\n              description=\"A button enabling combined runs table and charts mode on the experiment page\"\n            />\n          </span>\n        }\n        key=\"RUNS\"\n      />\n      {/* Display the \"Models\" tab if we have only one experiment and the feature is enabled. */}\n      {singleExperimentId && (\n        <LegacyTabs.TabPane\n          key=\"MODELS\"\n          tab={\n            <span data-testid=\"experiment-runs-mode-switch-models\">\n              <FormattedMessage\n                defaultMessage=\"Models\"\n                description=\"A button navigating to logged models table on the experiment page\"\n              />\n              <PreviewBadge />\n            </span>\n          }\n        />\n      )}\n      <LegacyTabs.TabPane\n        disabled={shouldUseRenamedUnifiedTracesTab() || runsAreGrouped}\n        tab={\n          <LegacyTooltip\n            title={\n              !shouldUseRenamedUnifiedTracesTab() && runsAreGrouped ? (\n                <FormattedMessage\n                  defaultMessage=\"Unavailable when runs are grouped\"\n                  description=\"Experiment page > view mode switch > evaluation mode disabled tooltip\"\n                />\n              ) : undefined\n            }\n          >\n            <span\n              data-testid=\"experiment-runs-mode-switch-evaluation\"\n              css={\n                shouldUseRenamedUnifiedTracesTab() && {\n                  display: 'inline-flex',\n                  alignItems: 'center',\n                  gap: theme.spacing.xs,\n                }\n              }\n            >\n              <FormattedMessage\n                defaultMessage=\"Evaluation\"\n                description=\"A button enabling compare runs (evaluation) mode on the experiment page\"\n              />\n              {shouldUseRenamedUnifiedTracesTab() ? (\n                <InfoPopover popoverProps={{ maxWidth: 350 }} iconProps={{ style: { marginRight: 0 } }}>\n                  <FormattedMessage\n                    defaultMessage='Accessing artifact evaluation by \"Evaluation\" tab is being discontinued. In order to use this feature, use <link>\"Artifacts evaluation\" mode in Runs tab</link> instead.'\n                    description=\"A button enabling compare runs (evaluation) mode on the experiment page\"\n                    values={{\n                      link: (children) =>\n                        viewMode === 'ARTIFACT' ? (\n                          children\n                        ) : (\n                          <Typography.Link\n                            componentId=\"mlflow.experiment_page.evaluation_tab_migration_info_link\"\n                            onClick={() => setViewModeInURL('ARTIFACT', singleExperimentId)}\n                          >\n                            {children}\n                          </Typography.Link>\n                        ),\n                    }}\n                  />\n                </InfoPopover>\n              ) : (\n                <PreviewBadge />\n              )}\n            </span>\n          </LegacyTooltip>\n        }\n        key=\"ARTIFACT\"\n      />\n      <LegacyTabs.TabPane\n        tab={\n          <span data-testid=\"experiment-runs-mode-switch-traces\">\n            <FormattedMessage\n              defaultMessage=\"Traces\"\n              description=\"A button enabling traces mode on the experiment page\"\n            />\n          </span>\n        }\n        key=\"TRACES\"\n      />\n    </LegacyTabs>\n  );\n};\n","import { useRef, useEffect, useMemo } from 'react';\n\nexport interface CallOptions {\n  /**\n   * Controls if the function should be invoked on the leading edge of the timeout.\n   */\n  leading?: boolean;\n  /**\n   * Controls if the function should be invoked on the trailing edge of the timeout.\n   */\n  trailing?: boolean;\n}\n\nexport interface Options extends CallOptions {\n  /**\n   * The maximum time the given function is allowed to be delayed before it's invoked.\n   */\n  maxWait?: number;\n  /**\n   * If the setting is set to true, all debouncing and timers will happen on the server side as well\n   */\n  debounceOnServer?: boolean;\n}\n\nexport interface ControlFunctions<ReturnT> {\n  /**\n   * Cancel pending function invocations\n   */\n  cancel: () => void;\n  /**\n   * Immediately invoke pending function invocations\n   */\n  flush: () => ReturnT | undefined;\n  /**\n   * Returns `true` if there are any pending function invocations\n   */\n  isPending: () => boolean;\n}\n\n/**\n * Subsequent calls to the debounced function return the result of the last func invocation.\n * Note, that if there are no previous invocations you will get undefined. You should check it in your code properly.\n */\nexport interface DebouncedState<T extends (...args: any) => ReturnType<T>>\n  extends ControlFunctions<ReturnType<T>> {\n  (...args: Parameters<T>): ReturnType<T> | undefined;\n}\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn.\n *\n * The debounced function comes with a `cancel` method to cancel delayed `func`\n * invocations and a `flush` method to immediately invoke them.\n *\n * Provide `options` to indicate whether `func` should be invoked on the leading\n * and/or trailing edge of the `wait` timeout. The `func` is invoked with the\n * last arguments provided to the debounced function.\n *\n * Subsequent calls to the debounced function return the result of the last\n * `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Controls if `func` should be invoked on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Controls if `func` should be invoked the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback<\n  T extends (...args: any) => ReturnType<T>,\n>(func: T, wait?: number, options?: Options): DebouncedState<T> {\n  const lastCallTime = useRef(null);\n  const lastInvokeTime = useRef(0);\n  const timerId = useRef(null);\n  const lastArgs = useRef<unknown[]>([]);\n  const lastThis = useRef<unknown>();\n  const result = useRef<ReturnType<T>>();\n  const funcRef = useRef(func);\n  const mounted = useRef(true);\n  // Always keep the latest version of debounce callback, with no wait time.\n  funcRef.current = func;\n\n  const isClientSide = typeof window !== 'undefined';\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  const useRAF = !wait && wait !== 0 && isClientSide;\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  wait = +wait || 0;\n  options = options || {};\n\n  const leading = !!options.leading;\n  const trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n  const maxing = 'maxWait' in options;\n  const debounceOnServer =\n    'debounceOnServer' in options ? !!options.debounceOnServer : false; // `false` by default\n  const maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n\n  // You may have a question, why we have so many code under the useMemo definition.\n  //\n  // This was made as we want to escape from useCallback hell and\n  // not to initialize a number of functions each time useDebouncedCallback is called.\n  //\n  // It means that we have less garbage for our GC calls which improves performance.\n  // Also, it makes this library smaller.\n  //\n  // And the last reason, that the code without lots of useCallback with deps is easier to read.\n  // You have only one place for that.\n  const debounced = useMemo(() => {\n    const invokeFunc = (time: number) => {\n      const args = lastArgs.current;\n      const thisArg = lastThis.current;\n\n      lastArgs.current = lastThis.current = null;\n      lastInvokeTime.current = time;\n      return (result.current = funcRef.current.apply(thisArg, args));\n    };\n\n    const startTimer = (pendingFunc: () => void, wait: number) => {\n      if (useRAF) cancelAnimationFrame(timerId.current);\n      timerId.current = useRAF\n        ? requestAnimationFrame(pendingFunc)\n        : setTimeout(pendingFunc, wait);\n    };\n\n    const shouldInvoke = (time: number) => {\n      if (!mounted.current) return false;\n\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return (\n        !lastCallTime.current ||\n        timeSinceLastCall >= wait ||\n        timeSinceLastCall < 0 ||\n        (maxing && timeSinceLastInvoke >= maxWait)\n      );\n    };\n\n    const trailingEdge = (time: number) => {\n      timerId.current = null;\n\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs.current) {\n        return invokeFunc(time);\n      }\n      lastArgs.current = lastThis.current = null;\n      return result.current;\n    };\n\n    const timerExpired = () => {\n      const time = Date.now();\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // https://github.com/xnimorz/use-debounce/issues/97\n      if (!mounted.current) {\n        return;\n      }\n      // Remaining wait calculation\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n      const timeWaiting = wait - timeSinceLastCall;\n      const remainingWait = maxing\n        ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n        : timeWaiting;\n\n      // Restart the timer\n      startTimer(timerExpired, remainingWait);\n    };\n\n    const func: DebouncedState<T> = (...args: Parameters<T>): ReturnType<T> => {\n      if (!isClientSide && !debounceOnServer) {\n        return;\n      }\n      const time = Date.now();\n      const isInvoking = shouldInvoke(time);\n\n      lastArgs.current = args;\n      lastThis.current = this;\n      lastCallTime.current = time;\n\n      if (isInvoking) {\n        if (!timerId.current && mounted.current) {\n          // Reset any `maxWait` timer.\n          lastInvokeTime.current = lastCallTime.current;\n          // Start the timer for the trailing edge.\n          startTimer(timerExpired, wait);\n          // Invoke the leading edge.\n          return leading ? invokeFunc(lastCallTime.current) : result.current;\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          startTimer(timerExpired, wait);\n          return invokeFunc(lastCallTime.current);\n        }\n      }\n      if (!timerId.current) {\n        startTimer(timerExpired, wait);\n      }\n      return result.current;\n    };\n\n    func.cancel = () => {\n      if (timerId.current) {\n        useRAF\n          ? cancelAnimationFrame(timerId.current)\n          : clearTimeout(timerId.current);\n      }\n      lastInvokeTime.current = 0;\n      lastArgs.current =\n        lastCallTime.current =\n        lastThis.current =\n        timerId.current =\n          null;\n    };\n\n    func.isPending = () => {\n      return !!timerId.current;\n    };\n\n    func.flush = () => {\n      return !timerId.current ? result.current : trailingEdge(Date.now());\n    };\n\n    return func;\n  }, [\n    leading,\n    maxing,\n    wait,\n    maxWait,\n    trailing,\n    useRAF,\n    isClientSide,\n    debounceOnServer,\n  ]);\n\n  return debounced;\n}\n","import { useCallback, useRef, useState } from 'react';\nimport useDebouncedCallback, { DebouncedState } from './useDebouncedCallback';\n\nfunction valueEquality<T>(left: T, right: T): boolean {\n  return left === right;\n}\n\nexport default function useDebounce<T>(\n  value: T,\n  delay: number,\n  options?: {\n    maxWait?: number;\n    leading?: boolean;\n    trailing?: boolean;\n    equalityFn?: (left: T, right: T) => boolean;\n  }\n): [T, DebouncedState<(value: T) => void>] {\n  const eq = (options && options.equalityFn) || valueEquality;\n\n  const activeValue = useRef(value);\n  const [, forceUpdate] = useState({});\n  const debounced = useDebouncedCallback(\n    useCallback(\n      (value: T) => {\n        activeValue.current = value;\n        forceUpdate({});\n      },\n      [forceUpdate]\n    ),\n    delay,\n    options\n  );\n  const previousValue = useRef(value);\n\n  if (!eq(previousValue.current, value)) {\n    debounced(value);\n    previousValue.current = value;\n  }\n\n  return [activeValue.current as T, debounced];\n}\n","import {\n  DEFAULT_LIFECYCLE_FILTER,\n  DEFAULT_MODEL_VERSION_FILTER,\n  DEFAULT_ORDER_BY_ASC,\n  DEFAULT_ORDER_BY_KEY,\n  DEFAULT_START_TIME,\n} from '../../../constants';\nimport type { DatasetSummary, LIFECYCLE_FILTER, MODEL_VERSION_FILTER } from '../../../types';\n\n/**\n * Defines persistable model representing sort and filter values\n * used by runs table and controls\n */\nexport interface ExperimentPageSearchFacetsState {\n  /**\n   * SQL-like query string used to filter runs, e.g. \"params.alpha = '0.5'\"\n   */\n  searchFilter: string;\n\n  /**\n   * Canonical order_by key like \"params.`alpha`\". May be null to indicate the table\n   * should use the natural row ordering provided by the server.\n   */\n  orderByKey: string;\n\n  /**\n   * Whether the order imposed by orderByKey should be ascending or descending.\n   */\n  orderByAsc: boolean;\n\n  /**\n   * Filter key to show results based on start time\n   */\n  startTime: string;\n\n  /**\n   * Lifecycle filter of runs to display\n   */\n  lifecycleFilter: LIFECYCLE_FILTER;\n\n  /**\n   * Datasets filter of runs to display\n   */\n  datasetsFilter: DatasetSummary[];\n\n  /**\n   * Filter of model versions to display\n   */\n  modelVersionFilter: MODEL_VERSION_FILTER;\n}\n\n/**\n * Defines default experiment page search facets state.\n */\nexport const createExperimentPageSearchFacetsState = (): ExperimentPageSearchFacetsState => ({\n  searchFilter: '',\n  orderByKey: DEFAULT_ORDER_BY_KEY,\n  orderByAsc: DEFAULT_ORDER_BY_ASC,\n  startTime: DEFAULT_START_TIME,\n  lifecycleFilter: DEFAULT_LIFECYCLE_FILTER,\n  datasetsFilter: [],\n  modelVersionFilter: DEFAULT_MODEL_VERSION_FILTER,\n});\n","import { useEffect, useMemo } from 'react';\nimport invariant from 'invariant';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport { ExperimentViewTraces } from '../../components/experiment-page/components/ExperimentViewTraces';\nimport { shouldEnableExperimentPageHeaderV2 } from '../../../common/utils/FeatureUtils';\nimport Routes from '../../routes';\n\nconst ExperimentTracesPage = () => {\n  const { experimentId } = useParams();\n  invariant(experimentId, 'Experiment ID must be defined');\n\n  const experimentIds = useMemo(() => [experimentId], [experimentId]);\n\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (experimentId && !shouldEnableExperimentPageHeaderV2()) {\n      navigate(Routes.getExperimentPageRoute(experimentId));\n    }\n  }, [experimentId, navigate]);\n\n  return <ExperimentViewTraces experimentIds={experimentIds} />;\n};\n\nexport default ExperimentTracesPage;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useClipboard = void 0;\nvar clipboard_copy_1 = __importDefault(require(\"clipboard-copy\"));\nvar react_1 = require(\"react\");\nvar useTimedToggle_1 = require(\"./useTimedToggle\");\nfunction isInputLike(node) {\n    return node && (node.nodeName === 'TEXTAREA' || node.nodeName === 'INPUT');\n}\nfunction useClipboard(options) {\n    if (options === void 0) { options = {}; }\n    var _a = useTimedToggle_1.useTimedToggle(false), copied = _a[0], toggleCopied = _a[1];\n    var targetRef = react_1.useRef(null);\n    var optionsRef = react_1.useRef(options);\n    optionsRef.current = options;\n    function isSupported() {\n        return (!!navigator.clipboard ||\n            (typeof document.execCommand === 'function' &&\n                typeof document.queryCommandSupported === 'function' &&\n                document.queryCommandSupported('copy')));\n    }\n    var copyHandler = react_1.useCallback(function (text) {\n        var opts = optionsRef.current;\n        var target = targetRef.current;\n        function handleSuccess() {\n            if (opts.onSuccess) {\n                opts.onSuccess();\n            }\n            if (opts.copiedTimeout) {\n                toggleCopied(opts.copiedTimeout);\n            }\n            if (opts.selectOnCopy && isInputLike(target)) {\n                target.select();\n            }\n        }\n        function handleError() {\n            if (opts.onError) {\n                opts.onError();\n            }\n            if (opts.selectOnError !== false && isInputLike(target)) {\n                target.select();\n            }\n        }\n        function copy(value) {\n            clipboard_copy_1.default(value).then(handleSuccess).catch(handleError);\n        }\n        if (typeof text === 'string') {\n            copy(text);\n        }\n        else if (target) {\n            copy(target.value);\n        }\n    }, []);\n    return {\n        copied: copied,\n        copy: copyHandler,\n        isSupported: isSupported,\n        target: targetRef,\n    };\n}\nexports.useClipboard = useClipboard;\n"],"names":["flattenString","input","isArray","join","persistSearchStateFieldSerializers","searchFilter","deserializeLocalStorage","deserializeQueryString","orderByAsc","serializeQueryString","toString","datasetsFilter","inputs","inputsWithoutExperimentId","map","name","digest","context","btoaUtf8","JSON","stringify","parsedResult","parse","atobUtf8","Array","compareRunCharts","compareRunsMode","serializeLocalStorage","EXPERIMENT_PAGE_QUERY_PARAM_KEYS","EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW","useExperimentPageSearchFacets","queryParams","useSearchParams","pickedValues","useMemo","pick","Object","fromEntries","entries","isPreview","get","orderByKey","startTime","lifecycleFilter","modelVersionFilter","areValuesEmpty","keys","length","experimentId","useParams","queryParamsExperimentIds","experimentIds","comparedExperimentIds","getComparedExperimentIds","deserializedFields","resultObject","field","_persistSearchStateFi2","deserializeFn","deserializeFieldsFromQueryString","omitBy","isNil","assign","createExperimentPageSearchFacetsState","useUpdateExperimentPageSearchFacets","setParams","partialFacets","options","newParams","_persistSearchStateFi","serializeFn","serializeFieldsToQueryString","currentParams","forEach","key","value","set","delete","module","exports","condition","format","a","b","c","d","e","f","error","undefined","Error","args","argIndex","replace","framesToPop","_ref","styles","SnippetActionButton","tooltipMessage","buttonProps","style","_jsx","LegacyTooltip","title","children","Button","componentId","css","SnippetCopyAction","copyText","onClick","props","actionIcon","copy","text","copyTooltip","onCopy","intl","useIntl","copyMessage","formatMessage","id","defaultMessage","copiedMessage","clipboard","useClipboard","copiedTimerIdRef","useRef","copied","setCopied","useState","open","setOpen","useEffect","window","clearTimeout","current","CheckIcon","CopyIcon","setTimeout","ariaLabel","tooltipOpen","handleTooltipOpenChange","useCopyController","icon","SyntaxHighlighter","registerLanguage","sql","java","python","go","javascript","yaml","json","snippetPadding","themesStyles","light","lightStyle","duotoneDark","duotoneDarkStyle","CodeSnippet","theme","language","actions","showLineNumbers","lineNumberStyle","wrapLongLines","wrapLines","PreTag","customStyle","border","borderRadius","margin","padding","codeTagProps","lazyPako","truncateToFirstLineWithMaxLength","str","maxLength","truncated","_","char","middleTruncateStr","maxLen","firstPartLen","Math","floor","lastPartLen","substring","_keyStr","output","i","result","_utf8_encode","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","indexOf","String","fromCharCode","_utf8_decode","string","utftext","n","c2","c3","getStringSHA256","crypto","subtle","TextEncoder","encode","then","arrayBuffer","prototype","call","Uint8Array","x","slice","COMPRESSED_TEXT_DEFLATE_PREFIX","textCompressDeflate","async","binaryData","deflate","Buffer","b64encoded","from","binaryString","byte","fromCodePoint","btoa","textDecompressDeflate","pako","compressedText","startsWith","compressedTextWithoutPrefix","inflate","to","atob","m","_m$codePointAt","codePointAt","isTextCompressedDeflate","ExperimentViewTraces","useDesignSystemTheme","_jsxs","_css","minHeight","display","flexDirection","gap","spacing","sm","flex","overflow","shouldEnableExperimentPageHeaderV2","ExperimentViewRunsModeSwitch","hideBorder","TracesComponent","TracesView","EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY","getExperimentPageDefaultViewMode","viewModeToRouteMap","MODELS","Routes","getExperimentPageTabRoute","ExperimentPageTabName","Models","useExperimentPageViewMode","params","navigate","useNavigate","setMode","newCompareRunsMode","_viewModeToRouteMap$n","route","CopyButton","showLabel","showTooltip","setShowTooltip","FormattedMessage","dangerouslySetAntdProps","visible","type","handleClick","navigator","writeText","onMouseLeave","handleMouseLeave","viewState","runsAreGrouped","viewMode","setViewModeInURL","classNamePrefix","currentViewMode","activeTab","shouldUseRenamedUnifiedTracesTab","includes","singleExperimentId","LegacyTabs","dangerouslyAppendEmotionCSS","marginBottom","activeKey","onChange","tabKey","newValue","TabPane","tab","PreviewBadge","disabled","alignItems","xs","InfoPopover","popoverProps","maxWidth","iconProps","marginRight","values","link","Typography","Link","u","r","o","l","v","g","p","w","TypeError","s","leading","trailing","h","y","debounceOnServer","F","max","maxWait","A","t","apply","cancelAnimationFrame","requestAnimationFrame","Date","now","min","arguments","cancel","isPending","flush","equalityFn","DEFAULT_ORDER_BY_KEY","DEFAULT_ORDER_BY_ASC","DEFAULT_START_TIME","DEFAULT_LIFECYCLE_FILTER","DEFAULT_MODEL_VERSION_FILTER","ExperimentTracesPage","invariant","getExperimentPageRoute","__importDefault","this","mod","__esModule","defineProperty","clipboard_copy_1","require","react_1","useTimedToggle_1","isInputLike","node","nodeName","_a","useTimedToggle","toggleCopied","targetRef","optionsRef","useCallback","opts","target","handleSuccess","onSuccess","copiedTimeout","selectOnCopy","select","handleError","onError","selectOnError","default","catch","isSupported","document","execCommand","queryCommandSupported"],"sourceRoot":""}