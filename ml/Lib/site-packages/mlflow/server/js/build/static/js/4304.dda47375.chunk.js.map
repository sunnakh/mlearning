{"version":3,"file":"static/js/4304.dda47375.chunk.js","mappings":"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","sources":["experiment-tracking/components/ExperimentSourceTypeIcon.tsx","experiment-tracking/components/experiment-page/components/runs/cells/SourceCellRenderer.tsx","shared/web-shared/model-trace-explorer/FeatureUtils.ts","shared/building_blocks/PreviewBadge.tsx","common/utils/LocalStorageUtils.ts","shared/web-shared/hooks/useResizableMaxWidth.ts","common/components/TagSelectDropdown.tsx","common/hooks/useEditKeyValueTagsModal.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorer.utils.tsx","shared/web-shared/model-trace-explorer/ModelTrace.types.ts","experiment-tracking/components/traces/quickstart/TracesViewTableNoTracesQuickstartContext.tsx","experiment-tracking/components/traces/TracesView.utils.ts","experiment-tracking/components/traces/hooks/useExperimentTraces.tsx","experiment-tracking/components/traces/TracesViewTableTagCell.tsx","experiment-tracking/components/traces/TracesViewTableStatusCell.tsx","experiment-tracking/components/traces/TracesViewTablePreviewCell.tsx","experiment-tracking/components/traces/TracesViewTableSourceCell.tsx","experiment-tracking/components/traces/TracesViewTable.utils.ts","experiment-tracking/components/traces/TracesViewTableRow.tsx","experiment-tracking/components/traces/TracesViewTableTimestampCell.tsx","experiment-tracking/components/traces/TracesViewTableHeaderCheckbox.tsx","experiment-tracking/components/traces/TracesViewTableCellCheckbox.tsx","experiment-tracking/components/traces/quickstart/TraceTableQuickstart.utils.tsx","experiment-tracking/components/traces/quickstart/TraceTableGenericQuickstart.tsx","experiment-tracking/components/traces/quickstart/TracesViewTableNoTracesQuickstart.tsx","experiment-tracking/components/traces/TracesViewTable.tsx","experiment-tracking/components/traces/hooks/useExperimentTraceInfo.tsx","experiment-tracking/components/traces/TraceDataDrawer.tsx","experiment-tracking/components/traces/hooks/useExperimentTraceData.tsx","experiment-tracking/components/traces/hooks/useEditExperimentTraceTags.tsx","experiment-tracking/components/traces/TracesViewDeleteTraceModal.tsx","experiment-tracking/components/traces/TracesViewControlsActions.tsx","experiment-tracking/components/traces/TracesViewControls.tsx","experiment-tracking/components/traces/hooks/useExperimentViewTracesUIState.tsx","experiment-tracking/components/traces/hooks/useActiveExperimentTrace.tsx","experiment-tracking/components/traces/hooks/useActiveExperimentSpan.tsx","experiment-tracking/components/traces/TracesView.tsx","shared/web-shared/hooks/useMediaQuery.ts","shared/web-shared/hooks/useResizeObserver.tsx","common/components/KeyValueTagFullViewModal.tsx","common/components/KeyValueTag.tsx"],"sourcesContent":["import { FileCodeIcon, FolderBranchIcon, NotebookIcon, WorkflowsIcon } from '@databricks/design-system';\nimport { SourceType } from '../sdk/MlflowEnums';\n\n/**\n * Displays an icon corresponding to the source type of an experiment run.\n */\nexport const ExperimentSourceTypeIcon = ({\n  sourceType,\n  className,\n}: {\n  sourceType: SourceType | string;\n  className?: string;\n}) => {\n  if (sourceType === SourceType.NOTEBOOK) {\n    return <NotebookIcon className={className} />;\n  } else if (sourceType === SourceType.LOCAL) {\n    return <FileCodeIcon className={className} />;\n  } else if (sourceType === SourceType.PROJECT) {\n    return <FolderBranchIcon className={className} />;\n  } else if (sourceType === SourceType.JOB) {\n    return <WorkflowsIcon className={className} />;\n  }\n  return null;\n};\n","import React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentSourceTypeIcon } from '../../../../ExperimentSourceTypeIcon';\n\nexport const SourceCellRenderer = React.memo(({ value: tags }: { value: RunRowType['tags'] }) => {\n  const { theme } = useDesignSystemTheme();\n  if (!tags) {\n    return <>-</>;\n  }\n  const sourceType = tags[Utils.sourceTypeTag]?.value || '';\n\n  const sourceLink = Utils.renderSource(tags || {}, undefined, undefined);\n  return sourceLink ? (\n    <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n      <ExperimentSourceTypeIcon sourceType={sourceType} css={{ color: theme.colors.textSecondary }} />\n      <span css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>{sourceLink}</span>\n    </div>\n  ) : (\n    <>-</>\n  );\n});\n","export const shouldEnableAssessmentEditing = () => {\n  return true;\n};\nexport const shouldEnableSummaryView = () => {\n  return true;\n};\nexport const getIsMlflowTraceUIEnabled = () => {\n  return true;\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Tag, useDesignSystemTheme } from '@databricks/design-system';\nexport const PreviewBadge = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_shared_building_blocks_previewbadge.tsx_14\"\n      className={className}\n      css={{ marginLeft: theme.spacing.xs }}\n      color=\"turquoise\"\n    >\n      <FormattedMessage\n        defaultMessage=\"Experimental\"\n        description=\"Experimental badge shown for features which are experimental\"\n      />\n    </Tag>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\n/**\n * Utils for working with local storage.\n */\nexport default class LocalStorageUtils {\n  /**\n   * Protocol version of MLflow's local storage. Should be incremented on any breaking change in how\n   * data persisted in local storage is used, to prevent old (invalid) cached data from being loaded\n   * and breaking the application.\n   */\n  static version = '1.1';\n\n  /**\n   * Return a LocalStorageStore corresponding to the specified component and ID, where the ID\n   * can be used to disambiguate between multiple instances of cached data for the same component\n   * (e.g. cached data for multiple experiments).\n   */\n  static getStoreForComponent(componentName: any, id: any) {\n    return new LocalStorageStore([componentName, id].join('-'), 'localStorage');\n  }\n\n  static getSessionScopedStoreForComponent(componentName: any, id: any) {\n    return new LocalStorageStore([componentName, id].join('-'), 'sessionStorage');\n  }\n}\n\n/**\n * Interface to browser local storage that allows for setting key-value pairs under the specified\n * \"scope\".\n */\nclass LocalStorageStore {\n  constructor(scope: any, type: any) {\n    this.scope = scope;\n    if (type === 'localStorage') {\n      this.storageObj = window.localStorage;\n    } else {\n      this.storageObj = window.sessionStorage;\n    }\n  }\n  static reactComponentStateKey = 'ReactComponentState';\n\n  scope: any;\n  storageObj: any;\n\n  /**\n   * Loads React component state cached in local storage into a vanilla JS object.\n   */\n  loadComponentState() {\n    const storedVal = this.getItem(LocalStorageStore.reactComponentStateKey);\n    if (storedVal) {\n      return JSON.parse(storedVal);\n    }\n    return {};\n  }\n\n  /**\n   * Save React component state in local storage.\n   * @param stateRecord: Immutable.Record instance or plain object containing component state.\n   */\n  saveComponentState(stateRecord: any) {\n    const targetValue = typeof stateRecord.toJSON === 'function' ? stateRecord.toJSON() : stateRecord;\n    this.setItem(LocalStorageStore.reactComponentStateKey, JSON.stringify(targetValue));\n  }\n\n  /**\n   * Helper method for constructing a scoped key to use for setting/getting values in\n   * local storage.\n   */\n  withScopePrefix(key: any) {\n    return ['MLflowLocalStorage', LocalStorageUtils.version, this.scope, key].join('-');\n  }\n\n  /** Save the specified key-value pair in local storage. */\n  setItem(key: any, value: any) {\n    this.storageObj.setItem(this.withScopePrefix(key), value);\n  }\n\n  /** Fetch the value corresponding to the passed-in key from local storage. */\n  getItem(key: any) {\n    return this.storageObj.getItem(this.withScopePrefix(key));\n  }\n}\n","import { MutableRefObject, useCallback, useLayoutEffect, useRef, useState } from 'react';\n\nexport function useResizableMaxWidth(minWidth: number) {\n  const ref: MutableRefObject<HTMLDivElement | null> = useRef<HTMLDivElement>(null);\n  const [containerWidth, setContainerWidth] = useState<number | undefined>(undefined);\n\n  const updateWidth = useCallback(() => {\n    if (ref.current) {\n      setContainerWidth(ref.current.clientWidth);\n    }\n  }, []);\n\n  useLayoutEffect(() => {\n    updateWidth();\n    window.addEventListener('resize', updateWidth);\n    return () => window.removeEventListener('resize', updateWidth);\n  }, [updateWidth]);\n\n  const refCallback = useCallback(\n    (node: HTMLDivElement) => {\n      ref.current = node;\n      updateWidth();\n    },\n    [updateWidth],\n  );\n\n  const resizableMaxWidth = containerWidth === undefined ? undefined : containerWidth - minWidth;\n  return { resizableMaxWidth, ref: refCallback };\n}\n","import { sortedIndexOf } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { Control, useController } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\n\nimport { PlusIcon, LegacySelect, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { KeyValueEntity } from '../types';\n\n/**\n * Will show an extra row at the bottom of the dropdown menu to create a new tag when\n * The user has typed something in the search input\n * and either\n * 1. The search input is not an exact match for an existing tag name\n * 2. There are no tags available based on search input\n */\n\nfunction DropdownMenu(menu: React.ReactElement, allAvailableTags: string[]) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const searchValue = menu.props.searchValue.toLowerCase();\n\n  const resolvedMenu = useMemo(() => {\n    if (!searchValue) return menu;\n\n    const doesTagExists = sortedIndexOf(allAvailableTags, searchValue) >= 0;\n    if (doesTagExists) return menu;\n\n    const isValidTagKey = /^[^,.:/=\\-\\s]+$/.test(searchValue);\n\n    // Overriding the menu to add a new option at the top\n    return React.cloneElement(menu, {\n      flattenOptions: [\n        {\n          data: {\n            value: searchValue,\n            disabled: !isValidTagKey,\n            style: {\n              color: isValidTagKey ? theme.colors.actionTertiaryTextDefault : theme.colors.actionDisabledText,\n            },\n            children: (\n              <LegacyTooltip\n                title={\n                  isValidTagKey\n                    ? undefined\n                    : intl.formatMessage({\n                        defaultMessage: ', . : / - = and blank spaces are not allowed',\n                        description:\n                          'Key-value tag editor modal > Tag dropdown Manage Modal > Invalid characters error',\n                      })\n                }\n                placement=\"right\"\n              >\n                <span css={{ display: 'block' }}>\n                  <PlusIcon css={{ marginRight: theme.spacing.sm }} />\n                  {intl.formatMessage(\n                    {\n                      defaultMessage: 'Add tag \"{tagKey}\"',\n                      description: 'Key-value tag editor modal > Tag dropdown Manage Modal > Add new tag button',\n                    },\n                    {\n                      tagKey: searchValue,\n                    },\n                  )}\n                </span>\n              </LegacyTooltip>\n            ),\n          },\n          key: searchValue,\n          groupOption: false,\n        },\n        ...menu.props.flattenOptions,\n      ],\n    });\n  }, [allAvailableTags, menu, searchValue, intl, theme]);\n\n  return resolvedMenu;\n}\n\nfunction getDropdownMenu(allAvailableTags: string[]) {\n  return (menu: React.ReactElement) => DropdownMenu(menu, allAvailableTags);\n}\n\n/**\n * Used in tag edit feature, allows selecting existing / adding new tag value\n */\nexport function TagKeySelectDropdown({\n  allAvailableTags,\n  control,\n  onKeyChangeCallback,\n}: {\n  allAvailableTags: string[];\n  control: Control<KeyValueEntity>;\n  onKeyChangeCallback?: (key?: string) => void;\n}) {\n  const intl = useIntl();\n  const [isOpen, setIsOpen] = useState(false);\n  const selectRef = useRef<{ blur: () => void; focus: () => void }>(null);\n\n  const { field, fieldState } = useController({\n    control: control,\n    name: 'key',\n    rules: {\n      required: {\n        message: intl.formatMessage({\n          defaultMessage: 'A tag key is required',\n          description: 'Key-value tag editor modal > Tag dropdown > Tag key required error message',\n        }),\n        value: true,\n      },\n    },\n  });\n\n  const handleDropdownVisibleChange = (visible: boolean) => {\n    setIsOpen(visible);\n  };\n\n  const handleClear = () => {\n    field.onChange(undefined);\n    onKeyChangeCallback?.(undefined);\n  };\n\n  const handleSelect = (key: string) => {\n    field.onChange(key);\n    onKeyChangeCallback?.(key);\n  };\n\n  return (\n    <LegacySelect\n      allowClear\n      ref={selectRef}\n      dangerouslySetAntdProps={{\n        showSearch: true,\n        dropdownRender: getDropdownMenu(allAvailableTags),\n      }}\n      css={{ width: '100%' }}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Type a key',\n        description: 'Key-value tag editor modal > Tag dropdown > Tag input placeholder',\n      })}\n      value={field.value}\n      defaultValue={field.value}\n      open={isOpen}\n      onDropdownVisibleChange={handleDropdownVisibleChange}\n      filterOption={(input, option) => option?.value.toLowerCase().includes(input.toLowerCase())}\n      onSelect={handleSelect}\n      onClear={handleClear}\n      validationState={fieldState.error ? 'error' : undefined}\n    >\n      {allAvailableTags.map((tag) => (\n        <LegacySelect.Option value={tag} key={tag}>\n          {tag}\n        </LegacySelect.Option>\n      ))}\n    </LegacySelect>\n  );\n}\n","import { isEqual, sortBy } from 'lodash';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { truncate } from 'lodash';\n\nimport {\n  Button,\n  FormUI,\n  Modal,\n  PlusIcon,\n  Popover,\n  RHFControlledComponents,\n  RestoreAntDDefaultClsPrefix,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Typography } from '@databricks/design-system';\nimport { KeyValueEntity } from '../types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { TagKeySelectDropdown } from '../components/TagSelectDropdown';\nimport { KeyValueTag } from '../components/KeyValueTag';\nimport { ErrorWrapper } from '../utils/ErrorWrapper';\n\nfunction getTagsMap(tags: KeyValueEntity[]) {\n  return new Map(tags.map((tag) => [tag.key, tag]));\n}\n\n/**\n * Provides methods to initialize and display modal used to add and remove tags from any compatible entity\n */\nexport const useEditKeyValueTagsModal = <T extends { tags?: KeyValueEntity[] }>({\n  onSuccess,\n  saveTagsHandler,\n  allAvailableTags,\n  valueRequired = false,\n  title,\n}: {\n  onSuccess?: () => void;\n  saveTagsHandler: (editedEntity: T, existingTags: KeyValueEntity[], newTags: KeyValueEntity[]) => Promise<any>;\n  allAvailableTags?: string[];\n  valueRequired?: boolean;\n  title?: React.ReactNode;\n}) => {\n  const editedEntityRef = useRef<T>();\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  const [initialTags, setInitialTags] = useState<Map<string, KeyValueEntity>>(new Map());\n  const [finalTags, setFinalTags] = useState<Map<string, KeyValueEntity>>(new Map());\n\n  const [showModal, setShowModal] = useState(false);\n\n  const form = useForm<KeyValueEntity>({\n    defaultValues: {\n      key: undefined,\n      value: '',\n    },\n  });\n\n  const hideModal = () => setShowModal(false);\n\n  /**\n   * Function used to invoke the modal and start editing tags of the particular model version\n   */\n  const showEditTagsModal = useCallback(\n    (editedEntity: T) => {\n      editedEntityRef.current = editedEntity;\n      setInitialTags(getTagsMap(editedEntity.tags || []));\n      setFinalTags(getTagsMap(editedEntity.tags || []));\n      form.reset();\n\n      setShowModal(true);\n    },\n    [form],\n  );\n\n  const saveTags = async () => {\n    if (!editedEntityRef.current) {\n      return;\n    }\n    setErrorMessage('');\n    setIsLoading(true);\n    saveTagsHandler(editedEntityRef.current, Array.from(initialTags.values()), Array.from(finalTags.values()))\n      .then(() => {\n        hideModal();\n        onSuccess?.();\n        setIsLoading(false);\n      })\n      .catch((e: ErrorWrapper | Error) => {\n        setIsLoading(false);\n        setErrorMessage(e instanceof ErrorWrapper ? e.getUserVisibleError()?.message : e.message);\n      });\n  };\n\n  const intl = useIntl();\n  const formValues = form.watch();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const hasNewValues = useMemo(\n    () => !isEqual(sortBy(Array.from(initialTags.values()), 'key'), sortBy(Array.from(finalTags.values()), 'key')),\n    [initialTags, finalTags],\n  );\n  const isDirty = formValues.key || formValues.value;\n  const showPopoverMessage = hasNewValues && isDirty;\n\n  const onKeyChangeCallback = (key: string | undefined) => {\n    const tag = key ? finalTags.get(key) : undefined;\n    /**\n     * If a tag value exists for provided key, set the value to the existing tag value\n     */\n    form.setValue('value', tag?.value ?? '');\n  };\n\n  const handleTagDelete = ({ key }: KeyValueEntity) => {\n    setFinalTags((currentFinalTags) => {\n      currentFinalTags.delete(key);\n      return new Map(currentFinalTags);\n    });\n  };\n\n  const onSubmit = () => {\n    // Do not accept form if no value provided while it's required\n    if (valueRequired && !formValues.value.trim()) {\n      return;\n    }\n\n    // Add new tag to existing tags leaving only one tag per key value\n    const newEntries = new Map(finalTags);\n    newEntries.set(formValues.key, formValues);\n\n    setFinalTags(newEntries);\n    form.reset();\n  };\n\n  const EditTagsModal = (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_135\"\n      destroyOnClose\n      visible={showModal}\n      title={\n        title ?? (\n          <FormattedMessage\n            defaultMessage=\"Add/Edit tags\"\n            description=\"Key-value tag editor modal > Title of the update tags modal\"\n          />\n        )\n      }\n      onCancel={hideModal}\n      footer={\n        <RestoreAntDDefaultClsPrefix>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_147\"\n            dangerouslyUseFocusPseudoClass\n            onClick={hideModal}\n            /**\n             * Hack: The footer will remove the margin to the save tags button\n             * if the button if wrapped on another component.\n             */\n            css={{ marginRight: !hasNewValues ? theme.spacing.sm : 0 }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Manage Tag cancel button',\n            })}\n          </Button>\n          {showPopoverMessage ? (\n            <UnsavedTagPopoverTrigger formValues={formValues} isLoading={isLoading} onSaveTask={saveTags} />\n          ) : (\n            <LegacyTooltip\n              title={\n                !hasNewValues\n                  ? intl.formatMessage({\n                      defaultMessage: 'Please add or remove one or more tags before saving',\n                      description: 'Key-value tag editor modal > Tag disabled message',\n                    })\n                  : undefined\n              }\n            >\n              <Button\n                componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_174\"\n                dangerouslyUseFocusPseudoClass\n                disabled={!hasNewValues}\n                loading={isLoading}\n                type=\"primary\"\n                onClick={saveTags}\n              >\n                {intl.formatMessage({\n                  defaultMessage: 'Save tags',\n                  description: 'Key-value tag editor modal > Manage Tag save button',\n                })}\n              </Button>\n            </LegacyTooltip>\n          )}\n        </RestoreAntDDefaultClsPrefix>\n      }\n    >\n      <form\n        onSubmit={form.handleSubmit(onSubmit)}\n        css={{ display: 'flex', alignItems: 'flex-end', gap: theme.spacing.md }}\n      >\n        <div css={{ minWidth: 0, display: 'flex', gap: theme.spacing.md, flex: 1 }}>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"key\">\n              {intl.formatMessage({\n                defaultMessage: 'Key',\n                description: 'Key-value tag editor modal > Key input label',\n              })}\n            </FormUI.Label>\n            <TagKeySelectDropdown\n              allAvailableTags={allAvailableTags || []}\n              control={form.control}\n              onKeyChangeCallback={onKeyChangeCallback}\n            />\n          </div>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"value\">\n              {valueRequired\n                ? intl.formatMessage({\n                    defaultMessage: 'Value',\n                    description: 'Key-value tag editor modal > Value input label (required)',\n                  })\n                : intl.formatMessage({\n                    defaultMessage: 'Value (optional)',\n                    description: 'Key-value tag editor modal > Value input label',\n                  })}\n            </FormUI.Label>\n            <RHFControlledComponents.Input\n              componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_223\"\n              name=\"value\"\n              control={form.control}\n              aria-label={\n                valueRequired\n                  ? intl.formatMessage({\n                      defaultMessage: 'Value',\n                      description: 'Key-value tag editor modal > Value input label (required)',\n                    })\n                  : intl.formatMessage({\n                      defaultMessage: 'Value (optional)',\n                      description: 'Key-value tag editor modal > Value input label',\n                    })\n              }\n              placeholder={intl.formatMessage({\n                defaultMessage: 'Type a value',\n                description: 'Key-value tag editor modal > Value input placeholder',\n              })}\n            />\n          </div>\n        </div>\n        <LegacyTooltip\n          title={intl.formatMessage({\n            defaultMessage: 'Add tag',\n            description: 'Key-value tag editor modal > Add tag button',\n          })}\n        >\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_248\"\n            htmlType=\"submit\"\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Add tag',\n              description: 'Key-value tag editor modal > Add tag button',\n            })}\n          >\n            <PlusIcon />\n          </Button>\n        </LegacyTooltip>\n      </form>\n      {errorMessage && <FormUI.Message type=\"error\" message={errorMessage} />}\n      <div\n        css={{\n          display: 'flex',\n          rowGap: theme.spacing.xs,\n          flexWrap: 'wrap',\n          marginTop: theme.spacing.sm,\n        }}\n      >\n        {Array.from(finalTags.values()).map((tag) => (\n          <KeyValueTag isClosable tag={tag} onClose={() => handleTagDelete(tag)} key={tag.key} />\n        ))}\n      </div>\n    </Modal>\n  );\n\n  return { EditTagsModal, showEditTagsModal, isLoading };\n};\n\nfunction UnsavedTagPopoverTrigger({\n  isLoading,\n  formValues,\n  onSaveTask,\n}: {\n  isLoading: boolean;\n  formValues: any;\n  onSaveTask: () => void;\n}) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const tagKeyDisplay = `${truncate(formValues.key, { length: 20 }) || '_'}`;\n  const tagValueDisplay = formValues.value ? `:${truncate(formValues.value, { length: 20 })}` : '';\n  const fullTagDisplay = `${tagKeyDisplay}${tagValueDisplay}`;\n\n  const shownText = intl.formatMessage(\n    {\n      defaultMessage: 'Are you sure you want to save and close without adding \"{tag}\"',\n      description: 'Key-value tag editor modal > Unsaved tag message',\n    },\n    {\n      tag: fullTagDisplay,\n    },\n  );\n  return (\n    <Popover.Root componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_309\">\n      <Popover.Trigger asChild>\n        <Button\n          componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_306\"\n          dangerouslyUseFocusPseudoClass\n          loading={isLoading}\n          type=\"primary\"\n        >\n          {intl.formatMessage({\n            defaultMessage: 'Save tags',\n            description: 'Key-value tag editor modal > Manage Tag save button',\n          })}\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content align=\"end\" aria-label={shownText}>\n        <Typography.Paragraph css={{ maxWidth: 400 }}>{shownText}</Typography.Paragraph>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_316\"\n            onClick={onSaveTask}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Yes, save and close',\n              description: 'Key-value tag editor modal > Unsaved tag message > Yes, save and close button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_324\"\n            type=\"primary\"\n            css={{ marginLeft: theme.spacing.sm }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Unsaved tag message > cancel button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Arrow />\n      </Popover.Content>\n    </Popover.Root>\n  );\n}\n","import {\n  isNil,\n  omitBy,\n  mapValues,\n  isArray,\n  isString,\n  isNumber,\n  isBoolean,\n  escapeRegExp,\n  map,\n  every,\n  has,\n  compact,\n  keyBy,\n} from 'lodash';\n\nimport { ModelSpanType, ModelIconType, MLFLOW_TRACE_SCHEMA_VERSION_KEY } from './ModelTrace.types';\nimport type {\n  SearchMatch,\n  ModelTrace,\n  ModelTraceSpan,\n  ModelTraceSpanNode,\n  ModelTraceChatMessage,\n  ModelTraceChatResponse,\n  ModelTraceChatInput,\n  ModelTraceToolCall,\n  ModelTraceChatTool,\n  ModelTraceChatToolParamProperty,\n  RawModelTraceChatMessage,\n  ModelTraceContentType,\n  SpanFilterState,\n  ModelTraceSpanV3,\n  ModelTraceSpanV2,\n  ModelTraceInfoV3,\n  Assessment,\n  RetrieverDocument,\n  ModelTraceEvent,\n} from './ModelTrace.types';\nimport { ModelTraceExplorerIcon } from './ModelTraceExplorerIcon';\nimport {\n  normalizeAnthropicChatInput,\n  normalizeAnthropicChatOutput,\n  normalizeGeminiChatInput,\n  normalizeGeminiChatOutput,\n  normalizeOpenAIChatInput,\n  normalizeOpenAIChatResponse,\n  normalizeOpenAIResponsesInput,\n  normalizeOpenAIResponsesOutput,\n  normalizeLangchainChatInput,\n  normalizeLangchainChatResult,\n  normalizeLlamaIndexChatResponse,\n  normalizeDspyChatInput,\n  normalizeDspyChatOutput,\n} from './chat-utils';\nimport { normalizeLlamaIndexChatInput } from './chat-utils/llamaindex';\nimport { normalizeOpenAIAgentInput, normalizeOpenAIAgentOutput } from './chat-utils/openai';\nimport { normalizeAutogenChatInput, normalizeAutogenChatOutput } from './chat-utils/autogen';\nimport { normalizeBedrockChatInput, normalizeBedrockChatOutput } from './chat-utils/bedrock';\n\nexport const getCurrentUser = () => {\n  return 'User';\n};\n\nexport const displayErrorNotification = (errorMessage: string) => {\n  // TODO: display error notification in OSS\n  return;\n};\n\nexport function getIconTypeForSpan(spanType: ModelSpanType | string): ModelIconType {\n  switch (spanType) {\n    case ModelSpanType.LLM:\n      return ModelIconType.MODELS;\n    case ModelSpanType.CHAIN:\n      return ModelIconType.CHAIN;\n    case ModelSpanType.AGENT:\n      return ModelIconType.AGENT;\n    case ModelSpanType.TOOL:\n      return ModelIconType.WRENCH;\n    case ModelSpanType.CHAT_MODEL:\n      return ModelIconType.MODELS;\n    case ModelSpanType.RETRIEVER:\n      return ModelIconType.SEARCH;\n    case ModelSpanType.PARSER:\n      return ModelIconType.CODE;\n    case ModelSpanType.EMBEDDING:\n      return ModelIconType.NUMBERS;\n    case ModelSpanType.RERANKER:\n      return ModelIconType.SORT;\n    case ModelSpanType.FUNCTION:\n      return ModelIconType.FUNCTION;\n    case ModelSpanType.UNKNOWN:\n      return ModelIconType.UNKNOWN;\n    default:\n      return ModelIconType.FUNCTION;\n  }\n}\n\nexport function getDisplayNameForSpanType(spanType: ModelSpanType | string): string {\n  switch (spanType) {\n    case ModelSpanType.LLM:\n      return 'LLM';\n    case ModelSpanType.CHAIN:\n      return 'Chain';\n    case ModelSpanType.AGENT:\n      return 'Agent';\n    case ModelSpanType.TOOL:\n      return 'Tool';\n    case ModelSpanType.CHAT_MODEL:\n      return 'Chat model';\n    case ModelSpanType.RETRIEVER:\n      return 'Retriever';\n    case ModelSpanType.PARSER:\n      return 'Parser';\n    case ModelSpanType.EMBEDDING:\n      return 'Embedding';\n    case ModelSpanType.RERANKER:\n      return 'Reranker';\n    case ModelSpanType.FUNCTION:\n      return 'Function';\n    case ModelSpanType.UNKNOWN:\n      return 'Unknown';\n    default:\n      return spanType;\n  }\n}\n\nexport function tryDeserializeAttribute(value: string): any {\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    return value;\n  }\n}\n\nexport const getMatchesFromEvent = (span: ModelTraceSpanNode, searchFilter: string): SearchMatch[] => {\n  const events = span.events;\n  if (!events) {\n    return [];\n  }\n\n  const matches: SearchMatch[] = [];\n  events.forEach((event, index) => {\n    const attributes = event.attributes;\n\n    if (!attributes) {\n      return;\n    }\n\n    Object.keys(attributes).forEach((attribute) => {\n      const isKeyMatch = attribute.toLowerCase().includes(searchFilter);\n      const key = getEventAttributeKey(event.name, index, attribute);\n\n      if (isKeyMatch) {\n        matches.push({\n          span,\n          section: 'events',\n          key,\n          isKeyMatch: true,\n          matchIndex: 0,\n        });\n      }\n\n      // event values can be arbitrary JSON\n      const value = JSON.stringify(attributes[attribute]).toLowerCase();\n      const numValueMatches = value.split(searchFilter).length - 1;\n      for (let i = 0; i < numValueMatches; i++) {\n        matches.push({\n          span,\n          section: 'events',\n          key,\n          isKeyMatch: false,\n          matchIndex: i,\n        });\n      }\n    });\n  });\n\n  return matches;\n};\n\n/**\n * This function extracts all the matches from a span based on the search filter,\n * and appends some necessary metadata that is necessary for the jump-to-search\n * function.\n */\nexport const getMatchesFromSpan = (span: ModelTraceSpanNode, searchFilter: string): SearchMatch[] => {\n  // if search filter is empty, don't generate matches\n  // because there will be nothing to highlight anyway\n  if (!searchFilter) {\n    return [];\n  }\n\n  const matches: SearchMatch[] = [];\n\n  const sections = {\n    inputs: span?.inputs,\n    outputs: span?.outputs,\n    attributes: span?.attributes,\n    events: span?.events,\n  };\n\n  map(sections, (section: any, label: 'inputs' | 'outputs' | 'attributes' | 'events') => {\n    if (label === 'events') {\n      matches.push(...getMatchesFromEvent(span, searchFilter));\n      return;\n    }\n\n    const sectionList = createListFromObject(section);\n    sectionList.forEach((item) => {\n      // NOTE: this ignores the fact that there might be multiple matches in a key\n      // for example, if the key is \"aaaaa\", and the search filter is \"a\". However,\n      // implementing support for this case would make the code needlessly complex.\n      // If we receive feedback that this is a problem, we can revisit this.\n      const isKeyMatch = item.key.toLowerCase().includes(searchFilter);\n      if (isKeyMatch) {\n        matches.push({\n          span: span,\n          section: label,\n          key: item.key,\n          isKeyMatch: true,\n          matchIndex: 0,\n        });\n      }\n\n      const numValueMatches = item.value.toLowerCase().split(searchFilter).length - 1;\n      for (let i = 0; i < numValueMatches; i++) {\n        matches.push({\n          span: span,\n          section: label,\n          key: item.key,\n          isKeyMatch: false,\n          matchIndex: i,\n        });\n      }\n    });\n  });\n  return matches;\n};\n\nexport function searchTree(\n  rootNode: ModelTraceSpanNode,\n  searchFilter: string,\n  spanFilterState: SpanFilterState,\n): {\n  filteredTreeNodes: ModelTraceSpanNode[];\n  matches: SearchMatch[];\n} {\n  const searchFilterLowercased = searchFilter.toLowerCase().trim();\n  const allSpanTypesSelected = Object.values(spanFilterState.spanTypeDisplayState).every(\n    (shouldDisplay) => shouldDisplay,\n  );\n  // if there is no search filter and all span types\n  // are selected, then we don't have to do any filtering.\n  if (searchFilterLowercased === '' && allSpanTypesSelected) {\n    return {\n      filteredTreeNodes: [rootNode],\n      matches: [],\n    };\n  }\n\n  const children = rootNode.children ?? [];\n  const filteredChildren: ModelTraceSpanNode[] = [];\n  const matches: SearchMatch[] = [];\n  children.forEach((child) => {\n    const { filteredTreeNodes: childNodes, matches: childMatches } = searchTree(\n      child,\n      searchFilterLowercased,\n      spanFilterState,\n    );\n\n    filteredChildren.push(...childNodes);\n    matches.push(...childMatches);\n  });\n\n  const spanName = ((rootNode.title as string) ?? '').toLowerCase();\n  const spanMatches = getMatchesFromSpan(rootNode, searchFilterLowercased);\n\n  // check if the span passes the text and type filters\n  const nodeMatchesSearch = spanMatches.length > 0 || spanName.includes(searchFilterLowercased);\n  const spanTypeIsDisplayed = rootNode.type ? spanFilterState.spanTypeDisplayState[rootNode.type] : true;\n  const nodePassesSpanFilters = nodeMatchesSearch && spanTypeIsDisplayed;\n\n  const hasMatchingChild = filteredChildren.length > 0;\n  const hasException = getSpanExceptionCount(rootNode) > 0;\n\n  const nodeShouldBeDisplayed =\n    nodePassesSpanFilters ||\n    // the `showParents` and `showExceptions` flags override the\n    // search filters, so we always show the node if they pass\n    (spanFilterState.showParents && hasMatchingChild) ||\n    (spanFilterState.showExceptions && hasException);\n\n  if (nodeShouldBeDisplayed) {\n    return {\n      filteredTreeNodes: [{ ...rootNode, children: filteredChildren }],\n      matches: spanMatches.concat(matches),\n    };\n  }\n\n  // otherwise cut the span out of the tree by returning the children directly\n  return {\n    filteredTreeNodes: filteredChildren,\n    matches,\n  };\n}\n\nexport function searchTreeBySpanId(\n  rootNode: ModelTraceSpanNode | null,\n  selectedSpanId?: string,\n): ModelTraceSpanNode | undefined {\n  if (isNil(selectedSpanId) || isNil(rootNode)) {\n    return undefined;\n  }\n\n  if (rootNode.key === selectedSpanId) {\n    return rootNode;\n  }\n\n  const children = rootNode.children ?? [];\n  for (const child of children) {\n    const matchedNode = searchTreeBySpanId(child, selectedSpanId);\n    if (matchedNode) {\n      return matchedNode;\n    }\n  }\n\n  return undefined;\n}\n\nconst getChatMessagesFromSpan = (\n  messagesAttributeValue: any,\n  inputs: any,\n  outputs: any,\n  spanAttributes?: Record<string, any>,\n): ModelTraceChatMessage[] | undefined => {\n  // if the `mlflow.chat.messages` attribute is provided\n  // and in the correct format, return it as-is\n  // we allow content type to be content part list for the `mlflow.chat.messages` attribute\n  if (Array.isArray(messagesAttributeValue) && messagesAttributeValue.every(isRawModelTraceChatMessage)) {\n    return compact(messagesAttributeValue.map(prettyPrintChatMessage));\n  }\n\n  // otherwise, attempt to parse messages from inputs and outputs\n  // this is to support rich rendering for older versions of MLflow\n  // before the `mlflow.chat.messages` attribute was introduced\n  const messagesFromInputs = normalizeConversation(inputs, spanAttributes?.['mlflow.message.format']) ?? [];\n  const messagesFromOutputs = normalizeConversation(outputs, spanAttributes?.['mlflow.message.format']) ?? [];\n\n  // when either input or output is not chat messages, we do not set the chat message fiels.\n  if (messagesFromInputs.length === 0 || messagesFromOutputs.length === 0) {\n    return undefined;\n  }\n\n  return messagesFromInputs.concat(messagesFromOutputs);\n};\n\nconst getChatToolsFromSpan = (toolsAttributeValue: any, inputs: any): ModelTraceChatTool[] | undefined => {\n  // if the `mlflow.chat.tools` attribute is provided\n  // and in the correct format, return it as-is\n  if (Array.isArray(toolsAttributeValue) && toolsAttributeValue.every(isModelTraceChatTool)) {\n    return toolsAttributeValue;\n  }\n\n  // otherwise, attempt to parse tools from inputs\n  // TODO: support langchain format for tool inputs\n  if (Array.isArray(inputs?.tools) && inputs?.tools?.every(isModelTraceChatTool)) {\n    return inputs.tools;\n  }\n\n  return undefined;\n};\n\nexport const normalizeNewSpanData = (\n  span: ModelTraceSpan,\n  rootStartTime: number,\n  rootEndTime: number,\n  children: ModelTraceSpanNode[],\n  assessmentMap: Record<string, Assessment[]>,\n  traceId: string,\n): ModelTraceSpanNode => {\n  const spanType = tryDeserializeAttribute(span.attributes?.['mlflow.spanType']);\n  const inputs = tryDeserializeAttribute(span.attributes?.['mlflow.spanInputs']);\n  const outputs = tryDeserializeAttribute(span.attributes?.['mlflow.spanOutputs']);\n  const parentId = getModelTraceSpanParentId(span);\n  const spanId = getModelTraceSpanId(span);\n\n  const assessments = assessmentMap[spanId] ?? [];\n  if (!parentId) {\n    // assessments that are not associated with a specific\n    // span should be displayed at the root.\n    assessments.push(...(assessmentMap[''] ?? []));\n  }\n\n  // data that powers the \"chat\" tab\n  const messagesAttributeValue = tryDeserializeAttribute(span.attributes?.['mlflow.chat.messages']);\n  const messageFormat = tryDeserializeAttribute(span.attributes?.['mlflow.message.format']);\n  const spanAttributesForChat = messageFormat ? { 'mlflow.message.format': messageFormat } : undefined;\n  const chatMessages = getChatMessagesFromSpan(messagesAttributeValue, inputs, outputs, spanAttributesForChat);\n  const chatTools = getChatToolsFromSpan(tryDeserializeAttribute(span.attributes?.['mlflow.chat.tools']), inputs);\n\n  // remove other private mlflow attributes\n  const attributes = mapValues(\n    omitBy(span.attributes, (_, key) => key.startsWith('mlflow.')),\n    (value) => tryDeserializeAttribute(value),\n  );\n  const events = span.events;\n  const start = (Number(getModelTraceSpanStartTime(span)) - rootStartTime) / 1000;\n  const end = (Number(getModelTraceSpanEndTime(span) ?? rootEndTime) - rootStartTime) / 1000;\n\n  return {\n    title: span.name,\n    icon: (\n      <ModelTraceExplorerIcon\n        type={getIconTypeForSpan(spanType)}\n        hasException={getSpanExceptionCount(span) > 0}\n        isRootSpan={!parentId}\n      />\n    ),\n    type: spanType,\n    key: spanId,\n    start,\n    end,\n    children,\n    inputs,\n    outputs,\n    attributes,\n    events,\n    chatMessages,\n    chatTools,\n    parentId,\n    assessments,\n    traceId,\n  };\n};\n\nconst base64ToHex = (base64: string): string => {\n  const binaryString = atob(base64);\n  const binaryLen = binaryString.length;\n  let hex = '';\n  for (let i = 0; i < binaryLen; i++) {\n    const charCode = binaryString.charCodeAt(i);\n    hex += charCode.toString(16).padStart(2, '0');\n  }\n  return hex;\n};\n\n// mlflow span ids are meant to be interpreted as hex strings\nexport const decodeSpanId = (spanId: string, isV3Span: boolean): string => {\n  if (isV3Span) {\n    // v3 span ids are base64 encoded\n    try {\n      return base64ToHex(spanId);\n    } catch (e) {\n      // if base64 decoding fails, just return the original spanId\n      return spanId;\n    }\n  }\n\n  // old V2 span ids (pre-March 2025) are in hex with a 0x prefix\n  if (spanId.startsWith('0x')) {\n    return spanId.slice(2);\n  }\n\n  // new V2 span ids have the prefix stripped\n  return spanId;\n};\n\nexport function isV3ModelTraceInfo(info: ModelTrace['info']): info is ModelTraceInfoV3 {\n  return 'trace_metadata' in info;\n}\n\nexport function isV3ModelTraceSpan(span: ModelTraceSpan): span is ModelTraceSpanV3 {\n  return 'start_time_unix_nano' in span;\n}\n\nexport function isV2ModelTraceSpan(span: ModelTraceSpan): span is ModelTraceSpanV2 {\n  return 'parent_id' in span;\n}\n\nexport function getModelTraceSpanId(span: ModelTraceSpan): string {\n  return isV3ModelTraceSpan(span) ? decodeSpanId(span.span_id, true) : decodeSpanId(span.context?.span_id ?? '', false);\n}\n\nexport function getModelTraceSpanParentId(span: ModelTraceSpan): string {\n  return isV3ModelTraceSpan(span) ? decodeSpanId(span.parent_span_id, true) : decodeSpanId(span.parent_id ?? '', false);\n}\n\nexport function getModelTraceSpanStartTime(span: ModelTraceSpan): number {\n  return isV3ModelTraceSpan(span) ? Number(span.start_time_unix_nano) : Number(span.start_time);\n}\n\nexport function getModelTraceSpanEndTime(span: ModelTraceSpan): number {\n  return isV3ModelTraceSpan(span) ? Number(span.end_time_unix_nano) : Number(span.end_time);\n}\n\nexport function getModelTraceId(trace: ModelTrace): string {\n  return isV3ModelTraceInfo(trace.info) ? trace.info.trace_id : trace.info.request_id ?? '';\n}\n\nexport function parseModelTraceToTree(trace: ModelTrace): ModelTraceSpanNode | null {\n  const traceId = getModelTraceId(trace);\n  const spans = trace.trace_data?.spans ?? trace.data.spans;\n  const spanMap: { [span_id: string]: ModelTraceSpan } = {};\n  const relationMap: { [span_id: string]: string[] } = {};\n\n  spans.forEach((span) => {\n    const spanId = getModelTraceSpanId(span);\n    spanMap[spanId] = span;\n    relationMap[spanId] = [];\n  });\n\n  spans.forEach((span) => {\n    const spanId = getModelTraceSpanId(span);\n    const parentId = getModelTraceSpanParentId(span);\n    if (parentId) {\n      if (!relationMap[parentId]) {\n        throw new Error('Tree structure is malformed!');\n      }\n      relationMap[parentId].push(spanId);\n    }\n  });\n\n  const rootSpan = spans.find((span) => !getModelTraceSpanParentId(span));\n  if (isNil(rootSpan)) {\n    return null;\n  }\n\n  const rootSpanId = getModelTraceSpanId(rootSpan);\n  function getSpanNodeFromData(span_id: string): ModelTraceSpanNode {\n    const span = spanMap[span_id];\n    // above we return if rootSpan is null, but for some\n    // reason typescript thinks it's still nullable here.\n    const rootStart = Number(getModelTraceSpanStartTime(rootSpan as ModelTraceSpan));\n    const rootEnd = Number(getModelTraceSpanEndTime(rootSpan as ModelTraceSpan));\n    const children = relationMap[span_id].map(getSpanNodeFromData);\n    const assessmentMap = getAssessmentMap(trace.info);\n\n    // not using `isV2Span` here because for legacy reasons,\n    // V1 and V2 are rolled into in the same type. \"parent_id\" is\n    // the way we distinguish between the two.\n    if (isV3ModelTraceSpan(span) || 'parent_id' in span) {\n      // reusing the same function for v2 and v3 as the changes are small\n      return normalizeNewSpanData(span, rootStart, rootEnd, children, assessmentMap, traceId);\n    }\n\n    // v1 spans\n    const spanType = span.span_type ?? ModelSpanType.UNKNOWN;\n    return {\n      title: span.name,\n      icon: <ModelTraceExplorerIcon type={getIconTypeForSpan(spanType)} />,\n      type: spanType as ModelSpanType,\n      key: span.context.span_id,\n      start: Number(span.start_time) - rootStart,\n      // default to the end of the root span if the span has no end time.\n      // this can happen if an exception was thrown in the span.\n      end: Number(span.end_time ?? rootEnd) - rootStart,\n      children: children,\n      inputs: span.inputs,\n      outputs: span.outputs,\n      attributes: span.attributes,\n      events: span.events,\n      parentId: span.parent_id ?? span.parent_span_id,\n      assessments: [],\n      traceId,\n    };\n  }\n\n  return getSpanNodeFromData(rootSpanId);\n}\n\n// returns a map of { [span_id: string] : Assessment[] }\nexport const getAssessmentMap = (traceInfo: ModelTrace['info']): Record<string, Assessment[]> => {\n  let assessments: Assessment[] = [];\n  if (isV3ModelTraceInfo(traceInfo)) {\n    assessments = traceInfo.assessments ?? [];\n  } else {\n    assessments = getAssessmentsFromTags(traceInfo.tags);\n  }\n\n  // hydrate the assessments with the overridden assessment objects\n  const assessmentsById = keyBy(assessments, 'assessment_id');\n  Object.values(assessmentsById).forEach((assessment) => {\n    if (assessment.overrides) {\n      const overriddenAssessment = assessmentsById[assessment.overrides];\n      assessment.overriddenAssessment = overriddenAssessment;\n    }\n  });\n\n  assessments = Object.values(assessmentsById);\n\n  // construct the map by reducing over the assessments\n  const assessmentMap = assessments.reduce((acc: Record<string, Assessment[]>, assessment: Assessment) => {\n    const spanId = assessment.span_id ?? '';\n    if (!acc[spanId]) {\n      acc[spanId] = [];\n    }\n    acc[spanId].push(assessment);\n    return acc;\n  }, {});\n\n  // sort the assessments by last_update_time\n  Object.keys(assessmentMap).forEach((spanId) => {\n    assessmentMap[spanId].sort(\n      (a, b) => new Date(b.last_update_time).getTime() - new Date(a.last_update_time).getTime(),\n    );\n  });\n\n  return assessmentMap;\n};\n\n// parses assessments out from the trace tags\nconst getAssessmentsFromTags = (tags: ModelTrace['info']['tags']): Assessment[] => {\n  if (!tags) {\n    return [];\n  }\n\n  const tagList = Array.isArray(tags) ? tags : Object.entries(tags).map(([key, value]) => ({ key, value }));\n\n  return tagList.filter(({ key }) => key.startsWith('mlflow.assessment.')).map(({ value }) => JSON.parse(value));\n};\n\n// this function attempts to extract the trace version from\n// a given source (either request_metadata or tags)\nexport function findTraceVersionByKey(\n  source: { [key: string]: string } | { key: string; value: string }[] | undefined,\n): string | undefined {\n  if (!source) {\n    return undefined;\n  }\n\n  if (isArray(source)) {\n    return source.find((tag) => tag.key === MLFLOW_TRACE_SCHEMA_VERSION_KEY)?.value;\n  }\n\n  return source[MLFLOW_TRACE_SCHEMA_VERSION_KEY];\n}\n\n// this function determines whether an object is a ModelTrace by asserting\n// that the object has the `data` and `info` fields, and that the\n// trace info contains the `mlflow.trace_schema.version` key\nexport const isModelTrace = (trace: any): trace is ModelTrace => {\n  const traceInfo = trace?.info;\n  const traceData = trace?.data;\n  if (!traceInfo || !traceData || !traceData?.spans) {\n    return false;\n  }\n\n  // request_metadata is for V2 traces, trace_metadata is for V3 traces\n  const metadata = traceInfo?.request_metadata ?? traceInfo?.trace_metadata;\n  if (metadata && findTraceVersionByKey(metadata)) {\n    return true;\n  }\n\n  const tags = traceInfo?.tags;\n  if (tags && findTraceVersionByKey(tags)) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const createListFromObject = (\n  obj: { [key: string]: any } | string[] | string | boolean | number | undefined,\n) => {\n  if (isNil(obj)) {\n    return [];\n  }\n\n  if (Array.isArray(obj) || isString(obj) || isNumber(obj) || isBoolean(obj)) {\n    return [{ key: '', value: JSON.stringify(obj, null, 2) }];\n  }\n\n  return Object.entries(obj).map(([key, value]) => {\n    return { key, value: JSON.stringify(value, null, 2) };\n  });\n};\n\nexport const getHighlightedSpanComponents = ({\n  searchFilter,\n  data,\n  activeMatchBackgroundColor,\n  inactiveMatchBackgroundColor,\n  containsActiveMatch,\n  activeMatch,\n  scrollToActiveMatch,\n}: {\n  searchFilter: string;\n  data: string;\n  activeMatchBackgroundColor: string;\n  inactiveMatchBackgroundColor: string;\n  containsActiveMatch: boolean;\n  activeMatch: SearchMatch;\n  scrollToActiveMatch: (node: HTMLSpanElement) => void;\n}) => {\n  // splitting by regex retains the matches in the array,\n  // which makes it easier to handle stuff like preserving\n  // the original case of the match.\n  const regex = new RegExp(`(${escapeRegExp(searchFilter.trim())})`, 'gi');\n  const parts = data.split(regex);\n  const spans: React.ReactNode[] = [];\n  let matchIndex = 0;\n\n  for (let i = 0; i < parts.length; i++) {\n    if (parts[i].toLowerCase().includes(searchFilter.toLowerCase().trim())) {\n      const isActiveMatch = containsActiveMatch && activeMatch.matchIndex === matchIndex;\n      const backgroundColor = isActiveMatch ? activeMatchBackgroundColor : inactiveMatchBackgroundColor;\n      const span = (\n        <span ref={isActiveMatch ? scrollToActiveMatch : null} key={i} css={{ backgroundColor, scrollMarginTop: 50 }}>\n          {parts[i]}\n        </span>\n      );\n      matchIndex++;\n      spans.push(span);\n    } else {\n      spans.push(parts[i]);\n    }\n  }\n\n  return spans;\n};\n\nexport const isRetrieverDocument = (document: any): document is RetrieverDocument => {\n  return has(document, 'page_content');\n};\n\nexport const isRenderableRetrieverSpan = (span: ModelTraceSpanNode): boolean => {\n  return (\n    span.type === ModelSpanType.RETRIEVER &&\n    Array.isArray(span.outputs) &&\n    span.outputs.length > 0 &&\n    every(span.outputs, isRetrieverDocument)\n  );\n};\n\nexport const getEventAttributeKey = (name: string, index: number, attribute: string): string => {\n  return `${name}-${index}-${attribute}`;\n};\n\nexport const getSpanExceptionEvents = (span: ModelTraceSpanNode | ModelTraceSpan): ModelTraceEvent[] => {\n  return (span.events ?? []).filter((event) => event.name === 'exception');\n};\n\nexport const getSpanExceptionCount = (span: ModelTraceSpanNode | ModelTraceSpan): number => {\n  return getSpanExceptionEvents(span).length;\n};\n\nexport const isModelTraceChatToolParamProperty = (obj: any): obj is ModelTraceChatToolParamProperty => {\n  if (isNil(obj)) {\n    return false;\n  }\n\n  if (!isNil(obj.type) && !isString(obj.type)) {\n    return false;\n  }\n\n  if (!isNil(obj.description) && !isString(obj.description)) {\n    return false;\n  }\n\n  if (!isNil(obj.enum) && !Array.isArray(obj.enum)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isModelTraceChatTool = (obj: any): obj is ModelTraceChatTool => {\n  if (isNil(obj) || obj.type !== 'function' || !has(obj, 'function.name')) {\n    return false;\n  }\n\n  // conditional validation for the `parameters` field\n  const parameters = obj.function?.parameters;\n  if (!isNil(parameters)) {\n    // if `required` is present, it must be a list of strings\n    const required = parameters.required;\n    if (!isNil(required) && (!Array.isArray(required) || !required.every(isString))) {\n      return false;\n    }\n\n    const properties = parameters.properties;\n    if (!isNil(properties) && !Object.values(properties).every(isModelTraceChatToolParamProperty)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const isModelTraceToolCall = (obj: any): obj is ModelTraceToolCall => {\n  return obj && isString(obj.id) && isString(obj.function?.arguments) && isString(obj.function?.name);\n};\n\nconst isContentPart = (part: any) => {\n  switch (part.type) {\n    case 'text':\n    case 'input_text':\n    case 'output_text':\n      return isString(part.text);\n    case 'image_url':\n      const { image_url } = part;\n      if (isNil(image_url)) {\n        return false;\n      }\n      return isString(image_url.url) && (isNil(image_url.detail) || ['auto', 'low', 'high'].includes(image_url.detail));\n    case 'input_audio':\n      const { input_audio } = part;\n      if (isNil(input_audio)) {\n        return false;\n      }\n      return isString(input_audio.data) && (isNil(input_audio.format) || ['wav', 'mp3'].includes(input_audio.format));\n    default:\n      return false;\n  }\n};\n\nconst isContentType = (content: any) => {\n  if (isNil(content) || isString(content)) {\n    return true;\n  }\n\n  if (isArray(content)) {\n    return content.every((part) => isContentPart(part));\n  }\n\n  return false;\n};\n\nexport const isModelTraceChatMessage = (message: any): message is ModelTraceChatMessage => {\n  if (!isRawModelTraceChatMessage(message)) {\n    return false;\n  }\n\n  return isNil(message.content) || isString(message.content);\n};\n\nexport const isRawModelTraceChatMessage = (message: any): message is RawModelTraceChatMessage => {\n  if (!message) {\n    return false;\n  }\n\n  if (message.tool_calls) {\n    if (!Array.isArray(message.tool_calls)) {\n      return false;\n    }\n\n    if (!message.tool_calls.every(isModelTraceToolCall)) {\n      return false;\n    }\n  }\n\n  if (message.type === 'reasoning') {\n    return true;\n  }\n\n  // verify if the message content is a valid content type or not\n  if (!isContentType(message.content)) {\n    return false;\n  }\n\n  return (\n    message.role === 'user' || message.role === 'assistant' || message.role === 'system' || message.role === 'tool'\n  );\n};\n\nexport const isModelTraceChatInput = (obj: any): obj is ModelTraceChatInput => {\n  return (\n    obj && Array.isArray(obj.messages) && obj.messages.length > 0 && obj.messages.every(isRawModelTraceChatMessage)\n  );\n};\n\nexport const isModelTraceChoices = (obj: any): obj is ModelTraceChatResponse['choices'] => {\n  return (\n    Array.isArray(obj) &&\n    obj.length > 0 &&\n    obj.every((choice: any) => has(choice, 'message') && isModelTraceChatMessage(choice.message))\n  );\n};\n\nexport const isModelTraceChatResponse = (obj: any): obj is ModelTraceChatResponse => {\n  return obj && isModelTraceChoices(obj.choices);\n};\n\n/**\n * Attempt to normalize a conversation, return null in case the format is unrecognized\n * TODO: move all chat parsing logic to the chat-utils folder to avoid cluttering this\n * utils file.\n *\n * Supported formats:\n *   1. Langchain chat inputs\n *   2. Langchain chat results\n *   3. OpenAI ChatCompletions inputs\n *   4. OpenAI ChatCompletions responses\n *   5. OpenAI Responses inputs\n *   6. OpenAI Responses output\n *   7. LlamaIndex chat responses\n *   8. DSPy chat inputs\n *   8. DSPy chat outputs\n *   9. Gemini inputs\n *  10. Gemini outputs\n *  11. Anthropic inputs\n *  12. Anthropic outputs\n */\nexport const normalizeConversation = (input: any, messageFormat?: string): ModelTraceChatMessage[] | null => {\n  // wrap in try/catch to avoid crashing the UI. we're doing a lot of type coercion\n  // and formatting, and it's possible that we miss some edge cases. in case of an error,\n  // simply return null to signify that the input is not a chat input.\n  try {\n    // if the input is already in the correct format, return it\n    if (Array.isArray(input) && input.length > 0 && input.every(isRawModelTraceChatMessage)) {\n      return compact(input.map(prettyPrintChatMessage));\n    }\n\n    switch (messageFormat) {\n      case 'langchain':\n        const langchainMessages = normalizeLangchainChatInput(input) ?? normalizeLangchainChatResult(input);\n        if (langchainMessages) return langchainMessages;\n        break;\n      case 'llamaindex':\n        const llamaIndexMessages = normalizeLlamaIndexChatInput(input) ?? normalizeLlamaIndexChatResponse(input);\n        if (llamaIndexMessages) return llamaIndexMessages;\n        break;\n      case 'openai':\n        const openAIMessages =\n          normalizeOpenAIChatInput(input) ??\n          normalizeOpenAIChatResponse(input) ??\n          normalizeOpenAIResponsesOutput(input) ??\n          normalizeOpenAIResponsesInput(input);\n        if (openAIMessages) return openAIMessages;\n        break;\n      case 'dspy':\n        const dspyMessages = normalizeDspyChatInput(input) ?? normalizeDspyChatOutput(input);\n        if (dspyMessages) return dspyMessages;\n        break;\n      case 'gemini':\n        const geminiMessages = normalizeGeminiChatInput(input) ?? normalizeGeminiChatOutput(input);\n        if (geminiMessages) return geminiMessages;\n        break;\n      case 'anthropic':\n        const anthropicMessages = normalizeAnthropicChatInput(input) ?? normalizeAnthropicChatOutput(input);\n        if (anthropicMessages) return anthropicMessages;\n        break;\n      case 'openai-agent':\n        const openAIAgentMessages = normalizeOpenAIAgentInput(input) ?? normalizeOpenAIAgentOutput(input);\n        if (openAIAgentMessages) return openAIAgentMessages;\n        break;\n      case 'autogen':\n        const autogenMessages = normalizeAutogenChatInput(input) ?? normalizeAutogenChatOutput(input);\n        if (autogenMessages) return autogenMessages;\n        break;\n      case 'bedrock':\n        const bedrockMessages = normalizeBedrockChatInput(input) ?? normalizeBedrockChatOutput(input);\n        if (bedrockMessages) return bedrockMessages;\n        break;\n      default:\n        // Fallback to OpenAI chat format\n        const chatMessages = normalizeOpenAIChatInput(input) ?? normalizeOpenAIChatResponse(input);\n        if (chatMessages) return chatMessages;\n        break;\n    }\n\n    return null;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const prettyPrintToolCall = (toolCall: ModelTraceToolCall): ModelTraceToolCall => {\n  // add some spacing to the arguments for better readability\n  let args = toolCall.function?.arguments;\n  try {\n    args = JSON.stringify(JSON.parse(args), null, 2);\n  } catch (e) {\n    // use original args\n  }\n  return {\n    id: toolCall.id,\n    function: {\n      arguments: args,\n      name: toolCall.function.name,\n    },\n  };\n};\n\nconst formatChatContent = (content?: ModelTraceContentType | null): string | undefined | null => {\n  if (isNil(content) || isString(content)) {\n    return content;\n  }\n\n  const contentParts = content\n    // eslint-disable-next-line array-callback-return\n    .map((part) => {\n      switch (part.type) {\n        case 'text':\n        case 'input_text':\n        case 'output_text':\n          return part.text;\n        case 'image_url':\n          const url = part?.image_url?.url;\n          return url ? `![](${url})` : '[image]';\n        case 'input_audio':\n          // raw encoded audio content is not displayed in the UI\n          return '[audio]';\n      }\n    })\n    .filter((part) => part !== undefined);\n\n  // Join with double line breaks for better visual separation\n  return contentParts.join('\\n\\n');\n};\n\nexport const prettyPrintChatMessage = (message: RawModelTraceChatMessage): ModelTraceChatMessage | null => {\n  // TODO: support rich rendering of reasoning messages\n  // for now, just return null and compact it away in the caller\n  // this is because we want to still render the rest of the message\n  // outputs.\n  if (message.type === 'reasoning') {\n    return null;\n  }\n\n  return {\n    ...message,\n    content: formatChatContent(message.content),\n    tool_calls: message.tool_calls?.map(prettyPrintToolCall),\n  };\n};\n","import type { TimelineTreeNode } from './timeline-tree';\n\nexport const MLFLOW_TRACE_SCHEMA_VERSION_KEY = 'mlflow.trace_schema.version';\n\n// column name for mlflow trace data in inference tables\nexport const INFERENCE_TABLE_RESPONSE_COLUMN_KEY = 'response';\nexport const INFERENCE_TABLE_TRACE_COLUMN_KEY = 'trace';\n\nexport type ModelTraceExplorerRenderMode = 'default' | 'json';\n\nexport enum ModelSpanType {\n  LLM = 'LLM',\n  CHAIN = 'CHAIN',\n  AGENT = 'AGENT',\n  TOOL = 'TOOL',\n  FUNCTION = 'FUNCTION',\n  CHAT_MODEL = 'CHAT_MODEL',\n  RETRIEVER = 'RETRIEVER',\n  PARSER = 'PARSER',\n  EMBEDDING = 'EMBEDDING',\n  RERANKER = 'RERANKER',\n  UNKNOWN = 'UNKNOWN',\n}\n\nexport enum ModelIconType {\n  MODELS = 'models',\n  DOCUMENT = 'document',\n  CONNECT = 'connect',\n  SEARCH = 'search',\n  SORT = 'sort',\n  UNKNOWN = 'unknown',\n  FUNCTION = 'function',\n  CODE = 'code',\n  NUMBERS = 'numbers',\n  WRENCH = 'wrench',\n  AGENT = 'agent',\n  CHAIN = 'chain',\n  USER = 'user',\n  SYSTEM = 'system',\n}\n\n/**\n * Represents a single model trace span.\n * Based on https://github.com/mlflow/mlflow/blob/tracing/mlflow/entities/span.py\n *\n * TODO: clean up all deprecated fields after PrPr customers swap over to\n *       the latest version of mlflow tracing\n */\nexport type ModelTraceSpanV2 = {\n  context: {\n    span_id: string;\n    trace_id: string;\n  };\n  name: string;\n  /* deprecated, renamed to `parent_id` */\n  parent_span_id?: string | null;\n  parent_id?: string | null;\n  /* deprecated, contained in attributes['mlflow.spanType'] */\n  span_type?: ModelSpanType | string;\n  /* deprecated, migrated to `status_code` and `status_message` */\n  status?: ModelTraceStatus;\n  status_code?: string;\n  status_message?: string | null;\n  start_time: number;\n  end_time: number;\n  /* deprecated, contained in attributes['mlflow.spanInputs'] */\n  inputs?: any;\n  /* deprecated, contained in attributes['mlflow.spanOutputs'] */\n  outputs?: any;\n  attributes?: Record<string, any>;\n  events?: ModelTraceEvent[];\n  /* metadata for ui usage logging */\n  type?: ModelSpanType;\n};\n\nexport type ModelTraceSpanV3 = {\n  trace_id: string;\n  span_id: string;\n  // can be empty\n  trace_state: string;\n  // can be empty\n  parent_span_id: string;\n  name: string;\n  start_time_unix_nano: string;\n  end_time_unix_nano: string;\n  status: {\n    code: ModelSpanStatusCode;\n    message?: string;\n  };\n  attributes: Record<string, any>;\n  events?: ModelTraceEvent[];\n  /* metadata for ui usage logging */\n  type?: ModelSpanType;\n};\n\nexport type ModelTraceSpan = ModelTraceSpanV2 | ModelTraceSpanV3;\n\nexport type ModelTraceEvent = {\n  name: string;\n  /* deprecated as of v3, migrated to `time_unix_nano` */\n  timestamp?: number;\n  time_unix_nano?: number;\n  attributes?: Record<string, any>;\n};\n\nexport type ModelTraceData = {\n  spans: ModelTraceSpan[];\n};\n\n/**\n * Represents a single model trace object.\n * Based on https://github.com/mlflow/mlflow/blob/8e44d102e9568d09d9dc376136d13a5a5d1ab46f/mlflow/tracing/types/model.py#L11\n */\nexport type ModelTrace = {\n  /* deprecated, renamed to `data` */\n  trace_data?: ModelTraceData;\n  /* deprecated, renamed to `info` */\n  trace_info?: ModelTraceInfo;\n  data: ModelTraceData;\n  info: ModelTraceInfoV3 | ModelTraceInfo | NotebookModelTraceInfo;\n};\n\n/**\n * Represents the trace data saved in an inference table.\n * https://github.com/databricks/universe/blob/fb8a572602161aa6387ac32593aa24a91518cc32/rag/serving/python/databricks/rag/unpacking/schemas.py#L133-L141\n */\nexport type ModelTraceInferenceTableData = {\n  app_version_id: string;\n  start_timestamp: string;\n  end_timestamp: string;\n  is_truncated: boolean;\n  [MLFLOW_TRACE_SCHEMA_VERSION_KEY]: number;\n  spans: (Omit<ModelTraceSpan, 'attributes'> & {\n    attributes: string;\n  })[];\n};\n\nexport type ModelTraceInfo = {\n  request_id?: string;\n  experiment_id?: string;\n  timestamp_ms?: number;\n  execution_time_ms?: number;\n  status?: ModelTraceStatus['description'];\n  attributes?: Record<string, any>;\n  request_metadata?: { key: string; value: string }[];\n  tags?: { key: string; value: string }[];\n};\n\n// tags and request_metadata in the notebook view\n// (i.e. displayed directly from the python client)\n// are stored as an object rather than an array.\nexport type NotebookModelTraceInfo = Omit<ModelTraceInfo, 'tags' | 'request_metadata'> & {\n  tags?: { [key: string]: string };\n  request_metadata?: { [key: string]: string };\n};\n\nexport type ModelTraceLocationMlflowExperiment = {\n  type: 'MLFLOW_EXPERIMENT';\n  mlflow_experiment: {\n    experiment_id: string;\n  };\n};\n\nexport type ModelTraceLocationInferenceTable = {\n  type: 'INFERENCE_TABLE';\n  inference_table: {\n    full_table_name: string;\n  };\n};\n\nexport type ModelTraceLocation = ModelTraceLocationMlflowExperiment | ModelTraceLocationInferenceTable;\n\nexport type ModelTraceInfoV3 = {\n  trace_id: string;\n  client_request_id?: string;\n  trace_location: ModelTraceLocation;\n  request_preview?: string;\n  response_preview?: string;\n  // timestamp in a format like \"2025-02-19T09:52:23.140Z\"\n  request_time: string;\n  // formatted duration string like \"32.4s\"\n  execution_duration: string;\n  state: ModelTraceState;\n  trace_metadata: {\n    [key: string]: string;\n  };\n  assessments: Assessment[];\n  tags: {\n    [key: string]: string;\n  };\n};\n\nexport type ModelTraceState = 'STATE_UNSPECIFIED' | 'OK' | 'ERROR' | 'IN_PROGRESS';\n\nexport type ModelSpanStatusCode = 'STATUS_CODE_UNSET' | 'STATUS_CODE_OK' | 'STATUS_CODE_ERROR';\n\nexport type ModelTraceStatusUnset = {\n  description: 'UNSET';\n  status_code: 0;\n};\n\nexport type ModelTraceStatusOk = {\n  description: 'OK';\n  status_code: 1;\n};\n\nexport type ModelTraceStatusError = {\n  description: 'ERROR';\n  status_code: 2;\n};\n\nexport type ModelTraceStatusInProgress = {\n  description: 'IN_PROGRESS';\n  status_code: 3;\n};\n\nexport enum ModelTraceSpanType {\n  LLM = 'LLM',\n  CHAIN = 'CHAIN',\n  AGENT = 'AGENT',\n  TOOL = 'TOOL',\n  CHAT_MODEL = 'CHAT_MODEL',\n  RETRIEVER = 'RETRIEVER',\n  PARSER = 'PARSER',\n  EMBEDDING = 'EMBEDDING',\n  RERANKER = 'RERANKER',\n  UNKNOWN = 'UNKNOWN',\n}\n\nexport type ModelTraceStatus =\n  | ModelTraceStatusUnset\n  | ModelTraceStatusOk\n  | ModelTraceStatusError\n  | ModelTraceStatusInProgress;\n\n/**\n * Represents a single node in the model trace tree.\n */\nexport interface ModelTraceSpanNode extends TimelineTreeNode, Pick<ModelTraceSpan, 'attributes' | 'type' | 'events'> {\n  assessments: Assessment[];\n  inputs?: any;\n  outputs?: any;\n  children?: ModelTraceSpanNode[];\n  chatMessages?: ModelTraceChatMessage[];\n  chatTools?: ModelTraceChatTool[];\n  parentId?: string | null;\n  traceId: string;\n}\n\nexport type ModelTraceExplorerTab = 'chat' | 'content' | 'attributes' | 'events';\n\nexport type SearchMatch = {\n  span: ModelTraceSpanNode;\n  section: 'inputs' | 'outputs' | 'attributes' | 'events';\n  key: string;\n  isKeyMatch: boolean;\n  matchIndex: number;\n};\n\nexport type SpanFilterState = {\n  // always show parents regardless of filter state\n  showParents: boolean;\n  // always show exceptions regardless of filter state\n  showExceptions: boolean;\n  // record of span_type: whether to show it\n  spanTypeDisplayState: Record<string, boolean>;\n};\n\nexport interface RetrieverDocument {\n  metadata: {\n    doc_uri: string;\n    chunk_id: string;\n    [key: string]: any;\n  };\n  page_content: string;\n  [key: string]: any;\n}\n\nexport enum CodeSnippetRenderMode {\n  JSON = 'json',\n  TEXT = 'text',\n  MARKDOWN = 'markdown',\n}\n\ntype ModelTraceTextContentPart = {\n  type: 'text' | 'input_text' | 'output_text';\n  text: string;\n};\n\ntype ModelTraceImageUrl = {\n  url: string;\n  detail?: 'auto' | 'low' | 'high';\n};\n\ntype ModelTraceImageContentPart = {\n  type: 'image_url';\n  image_url: ModelTraceImageUrl;\n};\n\ntype ModelTraceInputAudio = {\n  data: string;\n  format: 'wav' | 'mp3';\n};\n\ntype ModelTraceAudioContentPart = {\n  type: 'input_audio';\n  input_audio: ModelTraceInputAudio;\n};\n\nexport type ModelTraceContentParts =\n  | ModelTraceTextContentPart\n  | ModelTraceImageContentPart\n  | ModelTraceAudioContentPart;\n\nexport type ModelTraceContentType = string | ModelTraceContentParts[];\n\n// We treat content as string in the tracing UI.\nexport type ModelTraceChatMessage = {\n  role: 'system' | 'user' | 'assistant' | 'tool' | 'function' | 'developer';\n  name?: string;\n  content?: string | null;\n  tool_calls?: ModelTraceToolCall[];\n  tool_call_id?: string;\n};\n\n// The actual chat message schema of mlflow contains string, null and content part list.\nexport type RawModelTraceChatMessage = Omit<ModelTraceChatMessage, 'content'> & {\n  // there are other types, but we don't support them yet\n  type?: 'message' | 'reasoning';\n  content?: ModelTraceContentType | null;\n};\n\nexport type ModelTraceChatToolParamProperty = {\n  type?: string;\n  description?: string;\n  enum?: string[];\n};\n\nexport type ModelTraceChatTool = {\n  type: 'function';\n  function: {\n    name: string;\n    description?: string;\n    parameters?: {\n      properties: {\n        [key: string]: ModelTraceChatToolParamProperty;\n      };\n      required?: string[];\n    };\n  };\n};\n\nexport type ModelTraceToolCall = {\n  id: string;\n  function: {\n    arguments: string;\n    name: string;\n  };\n};\n\n// aligned to the OpenAI format\nexport type ModelTraceChatResponse = {\n  choices: {\n    message: ModelTraceChatMessage;\n  }[];\n};\n\nexport type ModelTraceChatInput = {\n  messages: RawModelTraceChatMessage[];\n};\n\nexport type AssessmentSourceType = 'SOURCE_TYPE_UNSPECIFIED' | 'HUMAN' | 'LLM_JUDGE' | 'CODE';\n\nexport interface AssessmentSource {\n  source_type: AssessmentSourceType;\n  // Identifier for the source. For example:\n  // - For a human source -> user name\n  // - For an LLM judge -> the judge source (databricks or custom)\n  // - For a code judge -> the function name\n  source_id: string;\n}\n\nexport interface AssessmentError {\n  error_code: string;\n  error_message?: string;\n  stack_trace?: string;\n}\n\nexport type AssessmentValue = string | number | boolean | null | string[];\n\nexport interface Feedback {\n  // can be null / undefined if error is present\n  value?: AssessmentValue;\n  error?: AssessmentError;\n}\n\nexport interface ExpectationValue {\n  value: AssessmentValue;\n}\n\nexport interface ExpectationSerializedValue {\n  serialized_value: {\n    value: string;\n    serialization_format: string;\n  };\n}\n\nexport type Expectation = ExpectationValue | ExpectationSerializedValue;\n\n// should be aligned with `mlflow/api/proto/service.proto`\nexport interface AssessmentBase {\n  assessment_id: string;\n  assessment_name: string;\n  trace_id: string;\n  source: AssessmentSource;\n  span_id?: string;\n\n  // the time fields are in the form of a string timestamp\n  // e.g. \"2025-04-18T04:01:20.159Z\"\n  create_time: string;\n  last_update_time: string;\n\n  rationale?: string;\n  metadata?: Record<string, string>;\n\n  // if false, the assessment is not valid and should not be displayed\n  // undefined and true should be considered valid.\n  valid?: boolean;\n\n  // the assessment_id of the assessment that this assessment overrides\n  overrides?: string;\n\n  // UI only field to store the overridden assessment object for easier display\n  overriddenAssessment?: Assessment;\n}\n\nexport interface FeedbackAssessment extends AssessmentBase {\n  feedback: Feedback;\n}\n\nexport interface ExpectationAssessment extends AssessmentBase {\n  expectation: Expectation;\n}\n\nexport type Assessment = FeedbackAssessment | ExpectationAssessment;\n","import React, { createContext, type ReactNode, useContext } from 'react';\n\nconst TracesViewTableNoTracesQuickstartContext = createContext<{\n  introductionText?: ReactNode;\n  displayVersionWarnings?: boolean;\n}>({});\n\n/**\n * Allows to alter default behavior of a quickstart tutorial for logging traces\n */\nexport const TracesViewTableNoTracesQuickstartContextProvider = ({\n  children,\n  introductionText,\n  displayVersionWarnings,\n}: {\n  children: ReactNode;\n  introductionText?: ReactNode;\n  displayVersionWarnings?: boolean;\n}) => {\n  return (\n    <TracesViewTableNoTracesQuickstartContext.Provider value={{ introductionText, displayVersionWarnings }}>\n      {children}\n    </TracesViewTableNoTracesQuickstartContext.Provider>\n  );\n};\n\nexport const useTracesViewTableNoTracesQuickstartContext = () => useContext(TracesViewTableNoTracesQuickstartContext);\n","import { type ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\nimport { type MessageDescriptor, defineMessage } from 'react-intl';\nimport { isNil } from 'lodash';\n\nconst TRACE_METADATA_FIELD_RUN_ID = 'mlflow.sourceRun';\nconst TRACE_METADATA_FIELD_TOTAL_TOKENS = 'total_tokens';\nconst TRACE_METADATA_FIELD_INPUTS = 'mlflow.traceInputs';\nconst TRACE_METADATA_FIELD_OUTPUTS = 'mlflow.traceOutputs';\nexport const TRACE_TAG_NAME_TRACE_NAME = 'mlflow.traceName';\n\n// Truncation limit for tracing metadata, taken from:\n// https://github.com/mlflow/mlflow/blob/2b457f2b46fc135a3fba77aefafe2319a899fc08/mlflow/tracing/constant.py#L23\nconst MAX_CHARS_IN_TRACE_INFO_METADATA_AND_TAGS = 250;\n\nconst getTraceMetadataField = (traceInfo: ModelTraceInfo, field: string) => {\n  return traceInfo.request_metadata?.find(({ key }) => key === field)?.value;\n};\n\nexport const isTraceMetadataPossiblyTruncated = (traceMetadata: string) => {\n  return traceMetadata.length >= MAX_CHARS_IN_TRACE_INFO_METADATA_AND_TAGS;\n};\n\nexport const getTraceInfoRunId = (traceInfo: ModelTraceInfo) =>\n  getTraceMetadataField(traceInfo, TRACE_METADATA_FIELD_RUN_ID);\n\nexport const getTraceInfoTotalTokens = (traceInfo: ModelTraceInfo) =>\n  getTraceMetadataField(traceInfo, TRACE_METADATA_FIELD_TOTAL_TOKENS);\n\nexport const getTraceInfoInputs = (traceInfo: ModelTraceInfo) => {\n  const inputs = getTraceMetadataField(traceInfo, TRACE_METADATA_FIELD_INPUTS);\n  if (isNil(inputs)) {\n    return undefined;\n  }\n  try {\n    return JSON.stringify(JSON.parse(inputs)); // unescape non-ascii characters\n  } catch (e) {\n    return inputs;\n  }\n};\n\nexport const getTraceInfoOutputs = (traceInfo: ModelTraceInfo) => {\n  const outputs = getTraceMetadataField(traceInfo, TRACE_METADATA_FIELD_OUTPUTS);\n  if (isNil(outputs)) {\n    return undefined;\n  }\n  try {\n    return JSON.stringify(JSON.parse(outputs)); // unescape non-ascii characters\n  } catch (e) {\n    return outputs;\n  }\n};\n\nexport const getTraceTagValue = (traceInfo: ModelTraceInfo, tagName: string) => {\n  if (Array.isArray(traceInfo.tags)) {\n    return traceInfo.tags?.find(({ key }) => key === tagName)?.value;\n  }\n\n  return traceInfo.tags?.[tagName];\n};\n\nexport const getTraceDisplayName = (traceInfo: ModelTraceInfo) => {\n  return getTraceTagValue(traceInfo, TRACE_TAG_NAME_TRACE_NAME) || traceInfo.request_id;\n};\n\nexport const EXPERIMENT_TRACES_SORTABLE_COLUMNS = ['timestamp_ms'];\n\n// defining a separate const for this column as\n// we don't users to be able to control its visibility\nexport const TRACE_TABLE_CHECKBOX_COLUMN_ID = 'select';\n\nexport enum ExperimentViewTracesTableColumns {\n  requestId = 'request_id',\n  traceName = 'traceName',\n  timestampMs = 'timestamp_ms',\n  inputs = 'inputs',\n  outputs = 'outputs',\n  runName = 'runName',\n  totalTokens = 'total_tokens',\n  source = 'source',\n  latency = 'latency',\n  tags = 'tags',\n  status = 'status',\n}\n\nexport const ExperimentViewTracesTableColumnLabels: Record<ExperimentViewTracesTableColumns, MessageDescriptor> = {\n  [ExperimentViewTracesTableColumns.requestId]: defineMessage({\n    defaultMessage: 'Request ID',\n    description: 'Experiment page > traces table > request id column header',\n  }),\n  [ExperimentViewTracesTableColumns.traceName]: defineMessage({\n    defaultMessage: 'Trace name',\n    description: 'Experiment page > traces table > trace name column header',\n  }),\n  [ExperimentViewTracesTableColumns.timestampMs]: defineMessage({\n    defaultMessage: 'Time created',\n    description: 'Experiment page > traces table > time created column header',\n  }),\n  [ExperimentViewTracesTableColumns.status]: defineMessage({\n    defaultMessage: 'Status',\n    description: 'Experiment page > traces table > status column header',\n  }),\n  [ExperimentViewTracesTableColumns.inputs]: defineMessage({\n    defaultMessage: 'Request',\n    description: 'Experiment page > traces table > input column header',\n  }),\n  [ExperimentViewTracesTableColumns.outputs]: defineMessage({\n    defaultMessage: 'Response',\n    description: 'Experiment page > traces table > output column header',\n  }),\n  [ExperimentViewTracesTableColumns.runName]: defineMessage({\n    defaultMessage: 'Run name',\n    description: 'Experiment page > traces table > run name column header',\n  }),\n  [ExperimentViewTracesTableColumns.totalTokens]: defineMessage({\n    defaultMessage: 'Tokens',\n    description: 'Experiment page > traces table > tokens column header',\n  }),\n  [ExperimentViewTracesTableColumns.source]: defineMessage({\n    defaultMessage: 'Source',\n    description: 'Experiment page > traces table > source column header',\n  }),\n  [ExperimentViewTracesTableColumns.latency]: defineMessage({\n    defaultMessage: 'Execution time',\n    description: 'Experiment page > traces table > latency column header',\n  }),\n  [ExperimentViewTracesTableColumns.tags]: defineMessage({\n    defaultMessage: 'Tags',\n    description: 'Experiment page > traces table > tags column header',\n  }),\n};\n\nexport const ExperimentViewTracesStatusLabels = {\n  UNSET: null,\n  IN_PROGRESS: defineMessage({\n    defaultMessage: 'In progress',\n    description: 'Experiment page > traces table > status label > in progress',\n  }),\n  OK: defineMessage({\n    defaultMessage: 'OK',\n    description: 'Experiment page > traces table > status label > ok',\n  }),\n  ERROR: defineMessage({\n    defaultMessage: 'Error',\n    description: 'Experiment page > traces table > status label > error',\n  }),\n};\n","import { type ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport { EXPERIMENT_TRACES_SORTABLE_COLUMNS, getTraceInfoRunId } from '../TracesView.utils';\nimport { ViewType } from '../../../sdk/MlflowEnums';\nimport { first, uniq, values } from 'lodash';\nimport { RunEntity } from '../../../types';\n\n// A filter expression used to filter traces by run ID\nconst RUN_ID_FILTER_EXPRESSION = 'request_metadata.`mlflow.sourceRun`';\nconst LOGGED_MODEL_ID_FILTER_EXPRESSION = 'request_metadata.`mlflow.modelId`';\n\nconst createRunIdsFilterExpression = (runUuids: string[]) => {\n  const runIdsInQuotes = runUuids.map((runId: any) => `'${runId}'`);\n  return `run_id IN (${runIdsInQuotes.join(',')})`;\n};\n\n/**\n * Utility function that fetches run names for traces.\n */\nconst fetchRunNamesForTraces = async (experimentIds: string[], traces: ModelTraceInfo[]) => {\n  const traceIdToRunIdMap = traces.reduce<Record<string, string>>((acc, trace) => {\n    const traceId = trace.request_id;\n    const runId = getTraceInfoRunId(trace);\n    if (!traceId || !runId) {\n      return acc;\n    }\n    return { ...acc, [traceId]: runId };\n  }, {});\n\n  const runUuids = uniq(values(traceIdToRunIdMap));\n  if (runUuids.length < 1) {\n    return {};\n  }\n  const runResponse = (await MlflowService.searchRuns({\n    experiment_ids: experimentIds,\n    filter: createRunIdsFilterExpression(runUuids),\n    run_view_type: ViewType.ALL,\n  })) as { runs?: RunEntity[] };\n\n  const runs = runResponse.runs;\n\n  const runIdsToRunNames = (runs || []).reduce<Record<string, string>>((acc, run) => {\n    return { ...acc, [run.info.runUuid]: run.info.runName };\n  }, {});\n\n  const traceIdsToRunNames = traces.reduce<Record<string, string>>((acc, trace) => {\n    const traceId = trace.request_id;\n    if (!traceId) {\n      return acc;\n    }\n    const runId = traceIdToRunIdMap[traceId];\n\n    return { ...acc, [traceId]: runIdsToRunNames[runId] || runId };\n  }, {});\n\n  return traceIdsToRunNames;\n};\n\nexport interface ModelTraceInfoWithRunName extends ModelTraceInfo {\n  runName?: string;\n}\n\nexport const useExperimentTraces = ({\n  experimentIds,\n  sorting,\n  filter = '',\n  runUuid,\n  loggedModelId,\n}: {\n  experimentIds: string[];\n  sorting: {\n    id: string;\n    desc: boolean;\n  }[];\n  filter?: string;\n  runUuid?: string;\n  loggedModelId?: string;\n}) => {\n  const [traces, setTraces] = useState<ModelTraceInfoWithRunName[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | undefined>(undefined);\n\n  // Backend currently only supports ordering by timestamp\n  const orderByString = useMemo(() => {\n    const firstOrderByColumn = first(sorting);\n    if (firstOrderByColumn && EXPERIMENT_TRACES_SORTABLE_COLUMNS.includes(firstOrderByColumn.id)) {\n      return `${firstOrderByColumn.id} ${firstOrderByColumn.desc ? 'DESC' : 'ASC'}`;\n    }\n    return 'timestamp_ms DESC';\n  }, [sorting]);\n\n  const filterString = useMemo(() => {\n    if (!runUuid && !loggedModelId) {\n      return filter;\n    }\n\n    if (loggedModelId) {\n      if (filter) {\n        return `${filter} AND ${LOGGED_MODEL_ID_FILTER_EXPRESSION}='${loggedModelId}'`;\n      }\n      return `${LOGGED_MODEL_ID_FILTER_EXPRESSION}='${loggedModelId}'`;\n    }\n\n    if (filter) {\n      return `${filter} AND ${RUN_ID_FILTER_EXPRESSION}='${runUuid}'`;\n    }\n\n    return `${RUN_ID_FILTER_EXPRESSION}='${runUuid}'`;\n  }, [filter, runUuid, loggedModelId]);\n\n  const [pageTokens, setPageTokens] = useState<Record<string, string | undefined>>({ 0: undefined });\n  const [currentPage, setCurrentPage] = useState(0);\n  const currentPageToken = pageTokens[currentPage];\n\n  const fetchTraces = useCallback(\n    async ({\n      experimentIds,\n      currentPage = 0,\n      pageToken,\n      silent,\n      orderByString = '',\n      filterString = '',\n    }: {\n      experimentIds: string[];\n      currentPage?: number;\n      pageToken?: string;\n      filterString?: string;\n      orderByString?: string;\n      silent?: boolean;\n    }) => {\n      if (!silent) {\n        setLoading(true);\n      }\n      setError(undefined);\n\n      try {\n        const response = await MlflowService.getExperimentTraces(experimentIds, orderByString, pageToken, filterString);\n\n        if (!response.traces) {\n          setTraces([]);\n          return;\n        }\n\n        const runNamesForTraces = await fetchRunNamesForTraces(experimentIds, response.traces);\n        const tracesWithRunNames = response.traces.map((trace) => {\n          const traceId = trace.request_id;\n          if (!traceId) {\n            return { ...trace };\n          }\n          const runName = runNamesForTraces[traceId];\n          return { ...trace, runName };\n        });\n\n        setTraces(tracesWithRunNames);\n        setPageTokens((prevPages) => {\n          return { ...prevPages, [currentPage + 1]: response.next_page_token };\n        });\n      } catch (e: any) {\n        setError(e);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [],\n  );\n\n  const hasNextPage = !loading && pageTokens[currentPage + 1] !== undefined;\n  const hasPreviousPage = !loading && (currentPage === 1 || pageTokens[currentPage - 1] !== undefined);\n\n  useEffect(() => {\n    fetchTraces({ experimentIds, filterString, orderByString });\n  }, [fetchTraces, filterString, experimentIds, orderByString]);\n\n  const reset = useCallback(() => {\n    setTraces([]);\n    setPageTokens({ 0: undefined });\n    setCurrentPage(0);\n    fetchTraces({ experimentIds });\n  }, [fetchTraces, experimentIds]);\n\n  const fetchNextPage = useCallback(() => {\n    setCurrentPage((prevPage) => prevPage + 1);\n    fetchTraces({\n      experimentIds,\n      currentPage: currentPage + 1,\n      pageToken: pageTokens[currentPage + 1],\n      filterString,\n      orderByString,\n    });\n  }, [experimentIds, currentPage, fetchTraces, pageTokens, filterString, orderByString]);\n\n  const fetchPrevPage = useCallback(() => {\n    setCurrentPage((prevPage) => prevPage - 1);\n    fetchTraces({\n      experimentIds,\n      currentPage: currentPage - 1,\n      pageToken: pageTokens[currentPage - 1],\n      filterString,\n      orderByString,\n    });\n  }, [experimentIds, currentPage, fetchTraces, pageTokens, filterString, orderByString]);\n\n  const refreshCurrentPage = useCallback(\n    (silent = false) => {\n      return fetchTraces({\n        experimentIds,\n        currentPage,\n        pageToken: currentPageToken,\n        silent,\n        filterString,\n        orderByString,\n      });\n    },\n    [experimentIds, currentPage, fetchTraces, currentPageToken, filterString, orderByString],\n  );\n\n  return {\n    traces,\n    loading,\n    error,\n    hasNextPage,\n    hasPreviousPage,\n    fetchNextPage,\n    fetchPrevPage,\n    refreshCurrentPage,\n    reset,\n  };\n};\n","import { Button, PencilIcon, SpeechBubblePlusIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { MLFLOW_INTERNAL_PREFIX } from '../../../common/utils/TagUtils';\nimport { KeyValueTag } from '../../../common/components/KeyValueTag';\nimport { FormattedMessage } from 'react-intl';\n\nexport const TracesViewTableTagCell = ({\n  onAddEditTags,\n  tags,\n  baseComponentId,\n}: {\n  tags: { key: string; value: string }[];\n  onAddEditTags: () => void;\n  baseComponentId: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const visibleTagList = tags?.filter(({ key }) => key && !key.startsWith(MLFLOW_INTERNAL_PREFIX)) || [];\n  const containsTags = visibleTagList.length > 0;\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        flexWrap: 'wrap',\n        columnGap: theme.spacing.xs,\n        rowGap: theme.spacing.xs,\n      }}\n    >\n      {visibleTagList.map((tag) => (\n        <KeyValueTag\n          key={tag.key}\n          tag={tag}\n          css={{ marginRight: 0 }}\n          charLimit={20}\n          maxWidth={150}\n          enableFullViewModal\n        />\n      ))}{' '}\n      <Button\n        componentId={`${baseComponentId}.traces_table.edit_tag`}\n        size=\"small\"\n        icon={!containsTags ? undefined : <PencilIcon />}\n        onClick={onAddEditTags}\n        children={\n          !containsTags ? (\n            <FormattedMessage\n              defaultMessage=\"Add tags\"\n              description=\"Button text to add tags to a trace in the experiment traces table\"\n            />\n          ) : undefined\n        }\n        css={{\n          flexShrink: 0,\n          opacity: 0,\n          '[role=row]:hover &': {\n            opacity: 1,\n          },\n          '[role=row]:focus-within &': {\n            opacity: 1,\n          },\n        }}\n        type=\"tertiary\"\n      />\n    </div>\n  );\n};\n","import type { CellContext, ColumnDefTemplate } from '@tanstack/react-table';\nimport { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport { CheckCircleIcon, ClockIcon, XCircleIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentViewTracesStatusLabels } from './TracesView.utils';\nimport { useIntl } from 'react-intl';\nimport type { Theme } from '@emotion/react';\n\nconst getIcon = (status: ModelTraceInfoWithRunName['status'], theme: Theme) => {\n  if (status === 'IN_PROGRESS') {\n    return <ClockIcon css={{ color: theme.colors.textValidationWarning }} />;\n  }\n\n  if (status === 'OK') {\n    return <CheckCircleIcon css={{ color: theme.colors.textValidationSuccess }} />;\n  }\n\n  if (status === 'ERROR') {\n    return <XCircleIcon css={{ color: theme.colors.textValidationDanger }} />;\n  }\n\n  return null;\n};\n\nexport const TracesViewTableStatusCell: ColumnDefTemplate<CellContext<ModelTraceInfoWithRunName, unknown>> = ({\n  row: { original },\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const labelDescriptor = ExperimentViewTracesStatusLabels[original.status || 'UNSET'];\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n      {getIcon(original.status, theme)}\n      {labelDescriptor ? intl.formatMessage(labelDescriptor) : ''}\n    </div>\n  );\n};\n","import { Button, ChevronDownIcon, ChevronRightIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { isString } from 'lodash';\nimport { useCallback, useMemo, useState } from 'react';\nimport { MlflowService } from '../../sdk/MlflowService';\nimport Utils from '../../../common/utils/Utils';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport type { CellContext, ColumnDefTemplate } from '@tanstack/react-table';\nimport type { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport { getTraceInfoInputs, getTraceInfoOutputs, isTraceMetadataPossiblyTruncated } from './TracesView.utils';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { css } from '@emotion/react';\n\nconst clampedLinesCss = css`\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n`;\n\nconst TracesViewTablePreviewCell = ({\n  value,\n  traceId,\n  previewFieldName,\n}: {\n  value: string;\n  traceId: string;\n  previewFieldName: 'request' | 'response';\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [fullData, setFullData] = useState<string | null>(null);\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const fetchFullData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const response = await MlflowService.getExperimentTraceData<{\n        request?: any;\n        response?: any;\n      }>(traceId);\n\n      if (previewFieldName in response) {\n        const previewValue = response[previewFieldName];\n        const requestData = isString(previewValue) ? previewValue : JSON.stringify(previewValue);\n        setFullData(requestData);\n      }\n    } catch (e: any) {\n      const errorMessage = e instanceof ErrorWrapper ? e.getUserVisibleError() : e.message;\n      Utils.logErrorAndNotifyUser(`Error fetching response: ${errorMessage}`);\n    }\n    setLoading(false);\n  }, [previewFieldName, traceId]);\n\n  const valuePossiblyTruncated = isTraceMetadataPossiblyTruncated(value);\n\n  const expand = useCallback(async () => {\n    if (!fullData && valuePossiblyTruncated) {\n      await fetchFullData();\n    }\n    setIsExpanded(true);\n  }, [fullData, fetchFullData, valuePossiblyTruncated]);\n\n  const collapse = useCallback(() => {\n    setIsExpanded(false);\n  }, []);\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.xs }}>\n      <Button\n        // it's difficult to distinguish between run and experiment page\n        // in this component due to how the data is passed to the table,\n        // so the base component ID here is simply `mlflow.traces`\n        componentId=\"mlflow.traces.traces_table.expand_cell_preview\"\n        size=\"small\"\n        icon={isExpanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n        onClick={isExpanded ? collapse : expand}\n        css={{ flexShrink: 0 }}\n        loading={loading}\n        type=\"primary\"\n      />\n      <div\n        title={value}\n        css={[\n          {\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n          },\n          !isExpanded && clampedLinesCss,\n        ]}\n      >\n        {isExpanded ? <ExpandedParamCell value={fullData ?? value} /> : value}\n      </div>\n    </div>\n  );\n};\n\nconst ExpandedParamCell = ({ value }: { value: string }) => {\n  const { theme } = useDesignSystemTheme();\n\n  const structuredJSONValue = useMemo(() => {\n    // Attempts to parse the value as JSON and returns a pretty printed version if successful.\n    // If JSON structure is not found, returns null.\n    try {\n      const objectData = JSON.parse(value);\n      return JSON.stringify(objectData, null, 2);\n    } catch (e) {\n      return null;\n    }\n  }, [value]);\n  return (\n    <div\n      css={{\n        whiteSpace: 'pre-wrap',\n        wordBreak: 'break-word',\n        fontFamily: structuredJSONValue ? 'monospace' : undefined,\n      }}\n    >\n      <CodeSnippet\n        language=\"json\"\n        wrapLongLines\n        style={{\n          padding: theme.spacing.sm,\n        }}\n        theme={theme.isDarkMode ? 'duotoneDark' : 'light'}\n      >\n        {structuredJSONValue || value}\n      </CodeSnippet>\n    </div>\n  );\n};\n\nexport const TracesViewTableRequestPreviewCell: ColumnDefTemplate<CellContext<ModelTraceInfoWithRunName, unknown>> = ({\n  row: { original },\n}) => (\n  <TracesViewTablePreviewCell\n    previewFieldName=\"request\"\n    traceId={original.request_id || ''}\n    value={getTraceInfoInputs(original) || ''}\n  />\n);\n\nexport const TracesViewTableResponsePreviewCell: ColumnDefTemplate<CellContext<ModelTraceInfoWithRunName, unknown>> = ({\n  row: { original },\n}) => (\n  <TracesViewTablePreviewCell\n    previewFieldName=\"response\"\n    traceId={original.request_id || ''}\n    value={getTraceInfoOutputs(original) || ''}\n  />\n);\n","import type { CellContext, ColumnDefTemplate } from '@tanstack/react-table';\nimport { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport { keyBy } from 'lodash';\nimport { SourceCellRenderer } from '../experiment-page/components/runs/cells/SourceCellRenderer';\n\nexport const TracesViewTableSourceCell: ColumnDefTemplate<CellContext<ModelTraceInfoWithRunName, unknown>> = ({\n  row: { original },\n}) => <SourceCellRenderer value={keyBy(original.tags, 'key')} />;\n","import { ColumnDef } from '@tanstack/react-table';\nimport { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport { Interpolation, Theme } from '@emotion/react';\n\nexport type TracesColumnDef = ColumnDef<ModelTraceInfoWithRunName> & {\n  meta?: {\n    styles?: Interpolation<Theme>;\n    multiline?: boolean;\n  };\n};\n\nexport const getHeaderSizeClassName = (id: string) => `--header-${id}-size`;\nexport const getColumnSizeClassName = (id: string) => `--col-${id}-size`;\n","import React from 'react';\nimport { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport { Row, flexRender } from '@tanstack/react-table';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { TracesColumnDef, getColumnSizeClassName } from './TracesViewTable.utils';\nimport { TRACE_TABLE_CHECKBOX_COLUMN_ID } from './TracesView.utils';\nimport { isEqual } from 'lodash';\n\ntype TracesViewTableRowProps = {\n  row: Row<ModelTraceInfoWithRunName>;\n  // used only for memoization updates\n  selected: boolean;\n  columns: TracesColumnDef[];\n};\n\nexport const TracesViewTableRow = React.memo(\n  ({ row }: TracesViewTableRowProps) => {\n    const { theme } = useDesignSystemTheme();\n\n    return (\n      <div\n        role=\"row\"\n        key={row.id}\n        data-testid=\"endpoints-list-table-rows\"\n        css={{\n          minHeight: theme.general.buttonHeight,\n          display: 'flex',\n          flexDirection: 'row',\n          ':hover': {\n            backgroundColor: 'var(--table-row-hover)',\n          },\n          paddingRight: '32px', // width of the column selector defined in TableRowActionStyles\n          borderBottom: `1px solid var(--table-separator-color)`,\n        }}\n      >\n        {row.getAllCells().map((cell) => {\n          const multiline = (cell.column.columnDef as TracesColumnDef).meta?.multiline;\n          const isSelect = cell.column.id === TRACE_TABLE_CHECKBOX_COLUMN_ID;\n          const padding = isSelect ? theme.spacing.sm : `${theme.spacing.sm}px ${theme.spacing.xs}px`;\n\n          return (\n            <div\n              role=\"cell\"\n              css={[\n                {\n                  '--table-row-vertical-padding': `${theme.spacing.sm}px`,\n                  flex: `calc(var(${getColumnSizeClassName(cell.column.id)}) / 100)`,\n                  overflow: 'hidden',\n                  whiteSpace: multiline ? 'pre-wrap' : 'nowrap',\n                  textOverflow: multiline ? 'ellipsis' : undefined,\n                  padding,\n                },\n                (cell.column.columnDef as TracesColumnDef).meta?.styles,\n              ]}\n              key={cell.id}\n            >\n              {flexRender(cell.column.columnDef.cell, cell.getContext())}\n            </div>\n          );\n        })}\n      </div>\n    );\n  },\n  (prev, next) => {\n    return (\n      prev.columns === next.columns &&\n      prev.selected === next.selected &&\n      isEqual(prev.row.original.tags, next.row.original.tags)\n    );\n  },\n);\n","import { CellContext, ColumnDefTemplate } from '@tanstack/react-table';\nimport React from 'react';\nimport { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport { LegacyTooltip } from '@databricks/design-system';\nimport Utils from '@mlflow/mlflow/src/common/utils/Utils';\n\nexport const TracesViewTableTimestampCell: ColumnDefTemplate<CellContext<ModelTraceInfoWithRunName, unknown>> =\n  React.memo(\n    ({ row: { original } }) => {\n      if (!original.timestamp_ms) {\n        return null;\n      }\n      return (\n        <LegacyTooltip\n          title={new Date(original.timestamp_ms).toLocaleString(navigator.language, {\n            timeZoneName: 'short',\n          })}\n          placement=\"right\"\n        >\n          <span>{Utils.timeSinceStr(original.timestamp_ms)}</span>\n        </LegacyTooltip>\n      );\n    },\n    () => true,\n  );\n","import React from 'react';\nimport { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport { Table } from '@tanstack/react-table';\nimport { Checkbox } from '@databricks/design-system';\n\ntype TracesViewTableCheckboxProps = {\n  table: Table<ModelTraceInfoWithRunName>;\n};\n\nexport const TracesViewTableHeaderCheckbox = ({ table }: TracesViewTableCheckboxProps) => {\n  const isChecked = table.getIsAllRowsSelected() || (table.getIsSomeRowsSelected() ? null : false);\n\n  return (\n    <Checkbox\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_traces_tracesviewtableheadercheckbox.tsx_14\"\n      data-testid=\"trace-table-header-checkbox\"\n      isChecked={isChecked}\n      wrapperStyle={{ padding: 0, margin: 0 }}\n      onChange={table.toggleAllRowsSelected}\n    />\n  );\n};\n","import React from 'react';\nimport { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport { Row } from '@tanstack/react-table';\nimport { Checkbox } from '@databricks/design-system';\n\ntype TracesViewCellCheckboxProps = {\n  row: Row<ModelTraceInfoWithRunName>;\n};\n\nexport const TracesViewTableCellCheckbox = ({ row }: TracesViewCellCheckboxProps) => {\n  return (\n    <Checkbox\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_traces_tracesviewtablecellcheckbox.tsx_12\"\n      data-testid={`trace-table-cell-checkbox-${row.id}`}\n      disabled={!row.getCanSelect()}\n      isChecked={row.getIsSelected()}\n      wrapperStyle={{ padding: 0, margin: 0 }}\n      onChange={() => row.toggleSelected()}\n    />\n  );\n};\n","import { Typography } from '@databricks/design-system';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport type QUICKSTART_FLAVOR =\n  | 'openai'\n  | 'langchain'\n  | 'llama_index'\n  | 'dspy'\n  | 'crewai'\n  | 'autogen'\n  | 'anthropic'\n  | 'bedrock'\n  | 'litellm'\n  | 'gemini'\n  | 'custom';\n\nexport const QUICKSTART_CONTENT: Record<\n  QUICKSTART_FLAVOR,\n  {\n    minVersion: string;\n    getContent: (baseComponentId?: string) => React.ReactNode;\n    getCodeSource: () => string;\n  }\n> = {\n  openai: {\n    minVersion: '2.15.1',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for OpenAI API calls by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the OpenAI package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.openai.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () =>\n      `from openai import OpenAI\n\nmlflow.openai.autolog()\n\n# Ensure that the \"OPENAI_API_KEY\" environment variable is set\nclient = OpenAI()\n\nmessages = [\n  {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n  {\"role\": \"user\", \"content\": \"Hello!\"}\n]\n\n# Inputs and outputs of the API request will be logged in a trace\nclient.chat.completions.create(model=\"gpt-4o-mini\", messages=messages)`,\n  },\n  langchain: {\n    // the autologging integration was really introduced in\n    // 2.14.0, but it does not support newer versions of langchain\n    // so effectively that version will not work with the code snippet\n    minVersion: '2.17.2',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for LangChain or LangGraph invocations by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the LangChain/LangGraph package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.langchain.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () =>\n      `from langchain_openai import OpenAI\nfrom langchain_core.prompts import PromptTemplate\n\nmlflow.langchain.autolog()\n\n# Ensure that the \"OPENAI_API_KEY\" environment variable is set\nllm = OpenAI()\nprompt = PromptTemplate.from_template(\"Answer the following question: {question}\")\nchain = prompt | llm\n\n# Invoking the chain will cause a trace to be logged\nchain.invoke(\"What is MLflow?\")`,\n  },\n  llama_index: {\n    minVersion: '2.15.1',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for LlamaIndex queries by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the LlamaIndex package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.llama_index.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () =>\n      `from llama_index.core import Document, VectorStoreIndex\n\nmlflow.llama_index.autolog()\n\n# Ensure that the \"OPENAI_API_KEY\" environment variable is set\nindex = VectorStoreIndex.from_documents([Document.example()])\nquery_engine = index.as_query_engine()\n\n# Querying the engine will cause a trace to be logged\nquery_engine.query(\"What is LlamaIndex?\")`,\n  },\n  dspy: {\n    minVersion: '2.18.0',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for DSPy executions by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the DSPy package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.dspy.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () =>\n      `import dspy\n\nmlflow.dspy.autolog()\n\n# Configure the LLM to use. Please ensure that\n# the OPENAI_API_KEY environment variable is set\nlm = dspy.LM(\"openai/gpt-4o-mini\")\ndspy.configure(lm=lm)\n\n# Define a simple chain-of-thought model and run it\nmath = dspy.ChainOfThought(\"question -> answer: float\")\nquestion = \"Two dice are tossed. What is the probability that the sum equals two?\"\n\n# All intermediate outputs from the execution will be logged\nmath(question=question)`,\n  },\n  crewai: {\n    minVersion: '2.19.0',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for CrewAI executions by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the CrewAI package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.crewai.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () => `from crewai import Agent, Crew, Process, Task\n\nmlflow.crewai.autolog()\n\ncity_selection_agent = Agent(\n    role=\"City selection expert\",\n    goal=\"Select the best city based on weather, season, and prices\",\n    backstory=\"An expert in analyzing travel data to pick ideal destinations\",\n    allow_delegation=True,\n    verbose=True,\n)\n\nlocal_expert = Agent(\n    role=\"Local expert\",\n    goal=\"Provide the best insights about the selected city\",\n    backstory=\"A local guide with extensive information about the city\",\n    verbose=True,\n)\n  \nplan_trip = Task(\n    name=\"Plan a trip\",\n    description=\"\"\"Plan a trip to a city based on weather, prices, and best local attractions. \n    Please consult with a local expert when researching things to do.\"\"\",\n    expected_output=\"A short summary of the trip destination and key things to do\",\n    agent=city_selection_agent,\n)\n\ncrew = Crew(\n  agents=[\n    city_selection_agent,\n    local_expert,\n  ],\n  tasks=[plan_trip],\n  process=Process.sequential\n)\n\n# Ensure the \"OPENAI_API_KEY\" environment variable is set\n# before kicking off the crew. All intermediate agent outputs\n# will be logged in the resulting trace.\ncrew.kickoff()`,\n  },\n  autogen: {\n    minVersion: '2.16.2',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for AutoGen conversations by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the AutoGen package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.autogen.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () =>\n      `import os\nfrom autogen import AssistantAgent, UserProxyAgent\n\nmlflow.autogen.autolog()\n\n# Ensure that the \"OPENAI_API_KEY\" environment variable is set\nllm_config = { \"model\": \"gpt-4o-mini\", \"api_key\": os.environ[\"OPENAI_API_KEY\"] }\nassistant = AssistantAgent(\"assistant\", llm_config = llm_config)\nuser_proxy = UserProxyAgent(\"user_proxy\", code_execution_config = False)\n\n# All intermediate executions within the chat session will be logged\nuser_proxy.initiate_chat(assistant, message = \"What is MLflow?\", max_turns = 1)`,\n  },\n  anthropic: {\n    minVersion: '2.19.0',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for Anthropic API calls by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the Anthropic package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.anthropic.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () => `import os\nimport anthropic\n\n# Enable auto-tracing for Anthropic\nmlflow.anthropic.autolog()\n\n# Configure your API key (please ensure that the \"ANTHROPIC_API_KEY\" environment variable is set)\nclient = anthropic.Anthropic(api_key=os.environ[\"ANTHROPIC_API_KEY\"])\n\n# Inputs and outputs of API calls will be logged as a trace\nmessage = client.messages.create(\n    model=\"claude-3-5-sonnet-20241022\",\n    max_tokens=1024,\n    messages=[\n        {\"role\": \"user\", \"content\": \"Hello, Claude\"},\n    ],\n)`,\n  },\n  bedrock: {\n    minVersion: '2.20.0',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for Bedrock conversations by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the Bedrock package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.bedrock.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () => `import boto3\n\nmlflow.bedrock.autolog()\n\n# Ensure that your boto3 client has the necessary auth information\nbedrock = boto3.client(\n    service_name=\"bedrock-runtime\",\n    region_name=\"<REPLACE_WITH_YOUR_AWS_REGION>\",\n)\n\nmodel = \"anthropic.claude-3-5-sonnet-20241022-v2:0\"\nmessages = [{ \"role\": \"user\", \"content\": [{\"text\": \"Hello!\"}]}]\n\n# All intermediate executions within the chat session will be logged\nbedrock.converse(modelId=model, messages=messages)`,\n  },\n  litellm: {\n    minVersion: '2.18.0',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for LiteLLM API calls by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the LiteLLM package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.litellm.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () => `import litellm\n\nmlflow.litellm.autolog()\n\n# Ensure that the \"OPENAI_API_KEY\" environment variable is set\nmessages = [{\"role\": \"user\", \"content\": \"Hello!\"}]\n\n# Inputs and outputs of the API request will be logged in a trace\nlitellm.completion(model=\"gpt-4o-mini\", messages=messages)`,\n  },\n  gemini: {\n    minVersion: '2.18.0',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for Gemini conversations by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for API calls to Google's Gemini API using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.gemini.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () => `import google.genai as genai\n\nmlflow.gemini.autolog()\n\n# Replace \"GEMINI_API_KEY\" with your API key\nclient = genai.Client(api_key=\"GEMINI_API_KEY\")\n\n# Inputs and outputs of the API request will be logged in a trace\nclient.models.generate_content(model=\"gemini-1.5-flash\", contents=\"Hello!\")`,\n  },\n  custom: {\n    minVersion: '2.14.3',\n    getContent: (baseComponentId) => (\n      <>\n        <Typography.Paragraph css={{ maxWidth: 800 }}>\n          <FormattedMessage\n            defaultMessage=\"To manually instrument your own traces, the most convenient method is to use the {code} function decorator. This will cause the inputs and outputs of the function to be captured in the trace.\"\n            description=\"Description of how to log custom code traces using MLflow. This message is followed by a code example.\"\n            values={{\n              code: <code>@mlflow.trace</code>,\n            }}\n          />\n        </Typography.Paragraph>\n        <Typography.Paragraph css={{ maxWidth: 800 }}>\n          <FormattedMessage\n            defaultMessage=\"For more complex use cases, MLflow also provides granular APIs that can be used to control tracing behavior. For more information, please visit the <a>official documentation</a> on fluent and client APIs for MLflow Tracing.\"\n            description=\"Explanation of alternative APIs for custom tracing in MLflow. The link leads to the MLflow documentation for the user to learn more.\"\n            values={{\n              a: (text: string) => (\n                <Typography.Link\n                  title=\"official documentation\"\n                  componentId={`${baseComponentId}.traces_table.custom_tracing_docs_link`}\n                  href=\"https://mlflow.org/docs/latest/llms/tracing/index.html#tracing-fluent-apis\"\n                  openInNewTab\n                >\n                  {text}\n                </Typography.Link>\n              ),\n            }}\n          />\n        </Typography.Paragraph>\n      </>\n    ),\n    getCodeSource: () =>\n      `@mlflow.trace\ndef foo(a):\nreturn a + bar(a)\n\n# Various attributes can be passed to the decorator\n# to modify the information contained in the span\n@mlflow.trace(name = \"custom_name\", attributes = { \"key\": \"value\" })\ndef bar(b):\nreturn b + 1\n\n# Invoking the traced function will cause a trace to be logged\nfoo(1)`,\n  },\n};\n","import { CopyIcon, Typography, useDesignSystemTheme, Alert } from '@databricks/design-system';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nimport { QUICKSTART_CONTENT } from './TraceTableQuickstart.utils';\nimport { FormattedMessage } from 'react-intl';\nimport { useTracesViewTableNoTracesQuickstartContext } from './TracesViewTableNoTracesQuickstartContext';\n\nexport const TraceTableGenericQuickstart = ({\n  flavorName,\n  baseComponentId,\n}: {\n  flavorName: keyof typeof QUICKSTART_CONTENT;\n  baseComponentId: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { getContent, getCodeSource, minVersion } = QUICKSTART_CONTENT[flavorName];\n  const { displayVersionWarnings = true } = useTracesViewTableNoTracesQuickstartContext();\n  const content = getContent(baseComponentId);\n  const versionCheck = `import mlflow\nfrom packaging.version import Version\n\nassert Version(mlflow.__version__) >= Version(\"${minVersion}\"), (\n  \"This feature requires MLflow version ${minVersion} or newer. \"\n  \"Please run '%pip install -U mlflow' in a notebook cell, \"\n  \"and restart the kernel when the command finishes.\"\n)\n\n`;\n\n  const code = versionCheck + getCodeSource();\n\n  const alertContent = (\n    <FormattedMessage\n      defaultMessage=\"This example requires MLflow version {minVersion} or newer. Please run {installCommand} in a notebook cell if your MLflow version is older than this, and restart the kernel when the command finishes.\"\n      description=\"Alert description informing the user of how to upgrade MLflow to the minimum required version\"\n      values={{\n        minVersion,\n        installCommand: <Typography.Text code>%pip install -U mlflow</Typography.Text>,\n      }}\n    />\n  );\n\n  return (\n    <div>\n      {displayVersionWarnings && (\n        <Alert\n          componentId={`${baseComponentId}.traces_table.${flavorName}_quickstart_alert`}\n          css={{ marginBottom: theme.spacing.md, maxWidth: 800 }}\n          closable={false}\n          message={\n            <FormattedMessage\n              defaultMessage=\"Requires MLflow >= {minVersion}\"\n              description=\"Alert title informing the user of the minimum required MLflow version to run the code example\"\n              values={{ minVersion }}\n            />\n          }\n          description={alertContent}\n          type=\"info\"\n        />\n      )}\n      <Typography.Text css={{ maxWidth: 800 }}>{content}</Typography.Text>\n      <div css={{ position: 'relative', width: 'min-content' }}>\n        <CopyButton\n          componentId={`${baseComponentId}.traces_table.${flavorName}_quickstart_snippet_copy`}\n          css={{ zIndex: 1, position: 'absolute', top: theme.spacing.xs, right: theme.spacing.xs }}\n          showLabel={false}\n          copyText={code}\n          icon={<CopyIcon />}\n        />\n        <CodeSnippet\n          showLineNumbers\n          theme={theme.isDarkMode ? 'duotoneDark' : 'light'}\n          style={{\n            padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n            marginTop: theme.spacing.md,\n          }}\n          language=\"python\"\n        >\n          {code}\n        </CodeSnippet>\n      </div>\n    </div>\n  );\n};\n","import { Header, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { isNil } from 'lodash';\nimport { TraceTableGenericQuickstart } from './TraceTableGenericQuickstart';\nimport { useTracesViewTableNoTracesQuickstartContext } from './TracesViewTableNoTracesQuickstartContext';\n\nexport const TracesViewTableNoTracesQuickstart = ({\n  baseComponentId,\n  runUuid,\n}: {\n  baseComponentId: string;\n  runUuid?: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { introductionText } = useTracesViewTableNoTracesQuickstartContext();\n\n  return (\n    <div css={{ overflow: 'auto', paddingBottom: theme.spacing.lg }}>\n      <Header\n        title={\n          <FormattedMessage\n            defaultMessage=\"No traces recorded\"\n            description=\"Message displayed when there are no traces logged to the experiment\"\n          />\n        }\n        titleElementLevel={3}\n      />\n      <Typography.Text\n        css={{\n          display: 'block',\n          marginTop: theme.spacing.md,\n          marginBottom: theme.spacing.md,\n          maxWidth: 800,\n        }}\n      >\n        {introductionText ? (\n          introductionText\n        ) : (\n          <FormattedMessage\n            defaultMessage=\"This tab displays all the traces logged to this {isRun, select, true {run} other {experiment}}. Follow the steps below to log your first trace. For more information about MLflow Tracing, visit the <a>MLflow documentation</a>.\"\n            description=\"Message that explains the function of the 'Traces' tab in the MLflow UI. This message is followed by a tutorial explaining how to get started with MLflow Tracing.\"\n            values={{\n              isRun: !isNil(runUuid),\n              a: (text: string) => (\n                <Typography.Link\n                  componentId={`${baseComponentId}.traces_table.quickstart_docs_link`}\n                  href=\"https://mlflow.org/docs/latest/llms/tracing/index.html\"\n                  openInNewTab\n                >\n                  {text}\n                </Typography.Link>\n              ),\n            }}\n          />\n        )}\n      </Typography.Text>\n      <TraceTableGenericQuickstart flavorName=\"custom\" baseComponentId={baseComponentId} />\n    </div>\n  );\n};\n","import {\n  CursorPagination,\n  DangerIcon,\n  Empty,\n  Table,\n  TableHeader,\n  TableRow,\n  TableSkeletonRows,\n  Typography,\n  useDesignSystemTheme,\n  Button,\n  DropdownMenu,\n  TableRowAction,\n  ColumnsIcon,\n} from '@databricks/design-system';\nimport { SortingState, flexRender, getCoreRowModel, getSortedRowModel, useReactTable } from '@tanstack/react-table';\nimport React, { useMemo } from 'react';\nimport { isNil, entries } from 'lodash';\nimport Utils from '../../../common/utils/Utils';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport Routes from '../../routes';\nimport {\n  ExperimentViewTracesTableColumnLabels,\n  ExperimentViewTracesTableColumns,\n  TRACE_TABLE_CHECKBOX_COLUMN_ID,\n  TRACE_TAG_NAME_TRACE_NAME,\n  getTraceInfoRunId,\n  getTraceInfoTotalTokens,\n  getTraceTagValue,\n} from './TracesView.utils';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { type ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\nimport { TracesViewTableTagCell } from './TracesViewTableTagCell';\nimport type { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport { TracesViewTableStatusCell } from './TracesViewTableStatusCell';\nimport { TracesViewTableRequestPreviewCell, TracesViewTableResponsePreviewCell } from './TracesViewTablePreviewCell';\nimport { TracesViewTableSourceCell } from './TracesViewTableSourceCell';\nimport { TracesColumnDef, getColumnSizeClassName, getHeaderSizeClassName } from './TracesViewTable.utils';\nimport { TracesViewTableRow } from './TracesViewTableRow';\nimport { TracesViewTableTimestampCell } from './TracesViewTableTimestampCell';\nimport { TracesViewTableHeaderCheckbox } from './TracesViewTableHeaderCheckbox';\nimport { TracesViewTableCellCheckbox } from './TracesViewTableCellCheckbox';\nimport { TracesViewTableNoTracesQuickstart } from './quickstart/TracesViewTableNoTracesQuickstart';\nimport { isUnstableNestedComponentsMigrated } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\n\nexport interface TracesViewTableProps {\n  experimentIds: string[];\n  runUuid?: string;\n  traces: ModelTraceInfoWithRunName[];\n  onTraceClicked?: (trace: ModelTraceInfo) => void;\n  onTraceTagsEdit?: (trace: ModelTraceInfo) => void;\n  onTagsUpdated?: () => void;\n  loading: boolean;\n  error?: Error;\n  usingFilters?: boolean;\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n  onNextPage: () => void;\n  onPreviousPage: () => void;\n  onResetFilters: () => void;\n  sorting: SortingState;\n  setSorting: React.Dispatch<React.SetStateAction<SortingState>>;\n  rowSelection: { [id: string]: boolean };\n  setRowSelection: React.Dispatch<React.SetStateAction<{ [id: string]: boolean }>>;\n  hiddenColumns?: string[];\n  disableTokenColumn?: boolean;\n  baseComponentId: string;\n  toggleHiddenColumn: (columnId: string) => void;\n  disabledColumns?: string[];\n}\n\ntype TracesViewTableMeta = {\n  baseComponentId: string;\n  onTraceClicked?: TracesViewTableProps['onTraceClicked'];\n  onTraceTagsEdit?: TracesViewTableProps['onTraceTagsEdit'];\n};\n\nconst RequestIdCell: TracesColumnDef['cell'] = ({\n  row: { original },\n  table: {\n    options: { meta },\n  },\n}) => {\n  const { baseComponentId, onTraceClicked } = meta as TracesViewTableMeta;\n  return (\n    <Typography.Link\n      componentId={`${baseComponentId}.traces_table.request_id_link`}\n      ellipsis\n      css={{ maxWidth: '100%', textOverflow: 'ellipsis' }}\n      onClick={() => {\n        onTraceClicked?.(original);\n      }}\n    >\n      {original.request_id}\n    </Typography.Link>\n  );\n};\n\nconst TraceNameCell: TracesColumnDef['cell'] = ({\n  row: { original },\n  table: {\n    options: { meta },\n  },\n}) => {\n  const { baseComponentId, onTraceClicked } = meta as TracesViewTableMeta;\n  return (\n    <Typography.Link\n      componentId={`${baseComponentId}.traces_table.trace_name_link`}\n      ellipsis\n      css={{ maxWidth: '100%', textOverflow: 'ellipsis' }}\n      onClick={() => {\n        onTraceClicked?.(original);\n      }}\n    >\n      {getTraceTagValue(original, TRACE_TAG_NAME_TRACE_NAME)}\n    </Typography.Link>\n  );\n};\n\nconst RunNameCell: TracesColumnDef['cell'] = ({ row: { original } }) => {\n  const runId = getTraceInfoRunId(original);\n  if (!runId || !original.experiment_id) {\n    return null;\n  }\n  const label = original.runName || runId;\n  return (\n    <Link\n      css={{\n        maxWidth: '100%',\n        textOverflow: 'ellipsis',\n        display: 'inline-block',\n        overflow: 'hidden',\n      }}\n      to={Routes.getRunPageRoute(original.experiment_id, runId)}\n    >\n      {label}\n    </Link>\n  );\n};\n\nconst TraceTagsCell: TracesColumnDef['cell'] = ({\n  row: { original },\n  table: {\n    options: { meta },\n  },\n}) => {\n  const { onTraceTagsEdit, baseComponentId } = meta as TracesViewTableMeta;\n  return (\n    <TracesViewTableTagCell\n      tags={original.tags || []}\n      onAddEditTags={() => onTraceTagsEdit?.(original)}\n      baseComponentId={baseComponentId}\n    />\n  );\n};\n\ntype ColumnListItem = {\n  key: string;\n  label: string;\n};\n\nexport const TracesViewTable = React.memo(\n  ({\n    experimentIds,\n    runUuid,\n    traces,\n    loading,\n    error,\n    onTraceClicked,\n    onTraceTagsEdit,\n    hasNextPage,\n    hasPreviousPage,\n    onNextPage,\n    onPreviousPage,\n    usingFilters,\n    onResetFilters,\n    sorting,\n    setSorting,\n    rowSelection,\n    setRowSelection,\n    hiddenColumns = [],\n    disableTokenColumn,\n    baseComponentId,\n    toggleHiddenColumn,\n    disabledColumns = [],\n  }: TracesViewTableProps) => {\n    const intl = useIntl();\n    const { theme } = useDesignSystemTheme();\n\n    const showQuickStart = !loading && traces.length === 0 && !usingFilters && !error;\n\n    const useStaticColumnsCells = isUnstableNestedComponentsMigrated();\n\n    const allColumnsList = useMemo<ColumnListItem[]>(() => {\n      return entries(ExperimentViewTracesTableColumnLabels)\n        .map(([key, label]) => ({\n          key,\n          label: intl.formatMessage(label),\n        }))\n        .filter(({ key }) => !disabledColumns.includes(key));\n    }, [intl, disabledColumns]);\n\n    const columns = useMemo<TracesColumnDef[]>(() => {\n      if (showQuickStart) {\n        return [];\n      }\n\n      const columns: TracesColumnDef[] = [\n        {\n          id: TRACE_TABLE_CHECKBOX_COLUMN_ID,\n          header: TracesViewTableHeaderCheckbox,\n          enableResizing: false,\n          enableSorting: false,\n          cell: TracesViewTableCellCheckbox,\n          meta: { styles: { minWidth: 32, maxWidth: 32 } },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.requestId]),\n          enableSorting: false,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.requestId,\n          cell: useStaticColumnsCells\n            ? RequestIdCell\n            : ({ row: { original } }) => {\n                return (\n                  <Typography.Link\n                    componentId={`${baseComponentId}.traces_table.request_id_link`}\n                    ellipsis\n                    css={{ maxWidth: '100%', textOverflow: 'ellipsis' }}\n                    onClick={() => {\n                      onTraceClicked?.(original);\n                    }}\n                  >\n                    {original.request_id}\n                  </Typography.Link>\n                );\n              },\n          meta: { styles: { minWidth: 200 } },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.traceName]),\n          enableSorting: false,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.traceName,\n          cell: useStaticColumnsCells\n            ? TraceNameCell\n            : ({ row: { original } }) => {\n                return (\n                  <Typography.Link\n                    componentId={`${baseComponentId}.traces_table.trace_name_link`}\n                    ellipsis\n                    css={{ maxWidth: '100%', textOverflow: 'ellipsis' }}\n                    onClick={() => {\n                      onTraceClicked?.(original);\n                    }}\n                  >\n                    {getTraceTagValue(original, TRACE_TAG_NAME_TRACE_NAME)}\n                  </Typography.Link>\n                );\n              },\n          meta: { styles: { minWidth: 150 } },\n        },\n        {\n          header: intl.formatMessage(\n            ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.timestampMs],\n          ),\n          id: ExperimentViewTracesTableColumns.timestampMs,\n          accessorFn: (data) => data.timestamp_ms,\n          enableSorting: true,\n          enableResizing: true,\n          cell: TracesViewTableTimestampCell,\n          meta: { styles: { minWidth: 100 } },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.status]),\n          id: ExperimentViewTracesTableColumns.status,\n          enableSorting: false,\n          enableResizing: true,\n          cell: TracesViewTableStatusCell,\n          meta: { styles: { minWidth: 100 } },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.inputs]),\n          id: ExperimentViewTracesTableColumns.inputs,\n          enableSorting: false,\n          enableResizing: true,\n          cell: TracesViewTableRequestPreviewCell,\n          meta: { multiline: true },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.outputs]),\n          enableSorting: false,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.outputs,\n          cell: TracesViewTableResponsePreviewCell,\n          meta: { multiline: true },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.runName]),\n          enableSorting: false,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.runName,\n          cell: useStaticColumnsCells\n            ? RunNameCell\n            : ({ row: { original } }) => {\n                const runId = getTraceInfoRunId(original);\n                if (!runId || !original.experiment_id) {\n                  return null;\n                }\n                const label = original.runName || runId;\n                return (\n                  <Link\n                    css={{\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                      display: 'inline-block',\n                      overflow: 'hidden',\n                    }}\n                    to={Routes.getRunPageRoute(original.experiment_id, runId)}\n                  >\n                    {label}\n                  </Link>\n                );\n              },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.source]),\n          enableSorting: true,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.source,\n          cell: TracesViewTableSourceCell,\n          meta: { styles: { minWidth: 100 } },\n        },\n      ];\n\n      if (!disableTokenColumn) {\n        columns.push({\n          header: intl.formatMessage(\n            ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.totalTokens],\n          ),\n          enableSorting: false,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.totalTokens,\n          accessorFn: (data) => getTraceInfoTotalTokens(data),\n          meta: { styles: { minWidth: 80, maxWidth: 80 } },\n        });\n      }\n      columns.push(\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.latency]),\n          enableSorting: false,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.latency,\n          accessorFn: (data) => {\n            if (isNil(data.execution_time_ms) || !isFinite(data.execution_time_ms)) {\n              return null;\n            }\n            return Utils.formatDuration(data.execution_time_ms);\n          },\n          meta: { styles: { minWidth: 100 } },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.tags]),\n          enableSorting: false,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.tags,\n          cell: useStaticColumnsCells\n            ? TraceTagsCell\n            : ({ row: { original } }) => {\n                return (\n                  <TracesViewTableTagCell\n                    tags={original.tags || []}\n                    onAddEditTags={() => onTraceTagsEdit?.(original)}\n                    baseComponentId={baseComponentId}\n                  />\n                );\n              },\n        },\n      );\n\n      return columns.filter((column) => column.id && !hiddenColumns.includes(column.id));\n    }, [\n      intl,\n      onTraceClicked,\n      onTraceTagsEdit,\n      disableTokenColumn,\n      hiddenColumns,\n      baseComponentId,\n      useStaticColumnsCells,\n      showQuickStart,\n    ]);\n\n    const table = useReactTable<ModelTraceInfoWithRunName>({\n      columns,\n      data: showQuickStart ? [] : traces,\n      state: { sorting, rowSelection },\n      getCoreRowModel: getCoreRowModel(),\n      getRowId: (row, index) => row.request_id || index.toString(),\n      getSortedRowModel: getSortedRowModel(),\n      onSortingChange: setSorting,\n      onRowSelectionChange: setRowSelection,\n      enableColumnResizing: true,\n      enableRowSelection: true,\n      columnResizeMode: 'onChange',\n      meta: { baseComponentId, onTraceClicked, onTraceTagsEdit } satisfies TracesViewTableMeta,\n    });\n\n    const getEmptyState = () => {\n      if (error) {\n        const errorMessage = error instanceof ErrorWrapper ? error.getMessageField() : error.message;\n        return (\n          <Empty\n            image={<DangerIcon />}\n            description={errorMessage}\n            title={\n              <FormattedMessage\n                defaultMessage=\"Error\"\n                description=\"Experiment page > traces table > error state title\"\n              />\n            }\n          />\n        );\n      }\n      if (!loading && traces.length === 0 && usingFilters) {\n        return (\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No traces found with the current filter query. <button>Reset filters</button> to see all traces.\"\n                description=\"Experiment page > traces table > no traces recorded\"\n                values={{\n                  button: (chunks: any) => (\n                    <Typography.Link\n                      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_traces_tracesviewtable.tsx_289\"\n                      onClick={onResetFilters}\n                    >\n                      {chunks}\n                    </Typography.Link>\n                  ),\n                }}\n              />\n            }\n            title={\n              <FormattedMessage\n                defaultMessage=\"No traces found\"\n                description=\"Experiment page > traces table > no traces recorded\"\n              />\n            }\n          />\n        );\n      }\n      return null;\n    };\n\n    // to improve performance, we pass the column sizes as inline styles to the table\n    const columnSizeInfo = table.getState().columnSizingInfo;\n    const columnSizeVars = React.useMemo(() => {\n      if (showQuickStart) {\n        return {};\n      }\n      const headers = table.getFlatHeaders();\n      const colSizes: { [key: string]: number } = {};\n      headers.forEach((header) => {\n        colSizes[getHeaderSizeClassName(header.id)] = header.getSize();\n        colSizes[getColumnSizeClassName(header.column.id)] = header.column.getSize();\n      });\n      return colSizes;\n      // we need to recompute this whenever columns get resized or changed\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [columnSizeInfo, columns, table, showQuickStart]);\n\n    if (showQuickStart) {\n      return <TracesViewTableNoTracesQuickstart baseComponentId={baseComponentId} runUuid={runUuid} />;\n    }\n\n    return (\n      <Table\n        scrollable\n        empty={getEmptyState()}\n        style={columnSizeVars}\n        pagination={\n          <CursorPagination\n            componentId={`${baseComponentId}.traces_table.pagination`}\n            hasNextPage={hasNextPage}\n            hasPreviousPage={hasPreviousPage}\n            onNextPage={onNextPage}\n            onPreviousPage={onPreviousPage}\n          />\n        }\n      >\n        <TableRow isHeader>\n          {table.getLeafHeaders().map((header) => {\n            return (\n              <TableHeader\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_traces_tracesviewtable.tsx_365\"\n                key={header.id}\n                css={(header.column.columnDef as TracesColumnDef).meta?.styles}\n                sortable={header.column.getCanSort()}\n                sortDirection={header.column.getIsSorted() || 'none'}\n                onToggleSort={header.column.getToggleSortingHandler()}\n                header={header}\n                column={header.column}\n                setColumnSizing={table.setColumnSizing}\n                isResizing={header.column.getIsResizing()}\n                style={{\n                  flex: `calc(var(${getHeaderSizeClassName(header.id)}) / 100)`,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            );\n          })}\n          <TableRowAction>\n            <DropdownMenu.Root>\n              <DropdownMenu.Trigger asChild>\n                <Button\n                  componentId={`${baseComponentId}.traces_table.column_selector_dropdown`}\n                  icon={<ColumnsIcon />}\n                  size=\"small\"\n                  aria-label={intl.formatMessage({\n                    defaultMessage: 'Select columns',\n                    description: 'Experiment page > traces table > column selector dropdown aria label',\n                  })}\n                />\n              </DropdownMenu.Trigger>\n              <DropdownMenu.Content align=\"end\">\n                {allColumnsList.map(({ key, label }) => (\n                  <DropdownMenu.CheckboxItem\n                    key={key}\n                    componentId={`${baseComponentId}.traces_table.column_toggle_button`}\n                    checked={!hiddenColumns.includes(key)}\n                    onClick={() => toggleHiddenColumn(key)}\n                  >\n                    <DropdownMenu.ItemIndicator />\n                    {label}\n                  </DropdownMenu.CheckboxItem>\n                ))}\n              </DropdownMenu.Content>\n            </DropdownMenu.Root>\n          </TableRowAction>\n        </TableRow>\n        {loading && <TableSkeletonRows table={table} />}\n        {!loading &&\n          !error &&\n          table\n            .getRowModel()\n            .rows.map((row) => (\n              <TracesViewTableRow key={row.id} row={row} columns={columns} selected={rowSelection[row.id]} />\n            ))}\n      </Table>\n    );\n  },\n);\n","import { type ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { MlflowService } from '../../../sdk/MlflowService';\n\n/**\n * Fetches single trace info object for a given trace request ID.\n */\nexport const useExperimentTraceInfo = (requestId: string, enabled = true) => {\n  const [traceInfo, setTraceInfoData] = useState<ModelTraceInfo | undefined>(undefined);\n  const [loading, setLoading] = useState<boolean>(enabled);\n  const [error, setError] = useState<Error | undefined>(undefined);\n\n  const fetchTraceInfo = useCallback(async () => {\n    if (!enabled) {\n      return;\n    }\n    setError(undefined);\n\n    try {\n      const response = await MlflowService.getExperimentTraceInfo(requestId);\n\n      if (!response.trace_info) {\n        setTraceInfoData(undefined);\n        return;\n      }\n\n      setTraceInfoData(response.trace_info);\n    } catch (e: any) {\n      setError(e);\n    } finally {\n      setLoading(false);\n    }\n  }, [enabled, requestId]);\n\n  useEffect(() => {\n    fetchTraceInfo();\n  }, [fetchTraceInfo]);\n\n  return {\n    traceInfo,\n    loading,\n    error,\n  };\n};\n","import {\n  DangerIcon,\n  Drawer,\n  Empty,\n  Spacer,\n  TableSkeleton,\n  TitleSkeleton,\n  Typography,\n  WarningIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { getTraceDisplayName } from './TracesView.utils';\nimport { useExperimentTraceData } from './hooks/useExperimentTraceData';\nimport { ModelTraceInfo, ModelTraceExplorer } from '@databricks/web-shared/model-trace-explorer';\nimport { useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useExperimentTraceInfo } from './hooks/useExperimentTraceInfo';\n\nexport const TraceDataDrawer = ({\n  requestId,\n  traceInfo,\n  loadingTraceInfo,\n  onClose,\n  selectedSpanId,\n  onSelectSpan,\n}: {\n  requestId: string;\n  traceInfo?: ModelTraceInfo;\n  loadingTraceInfo?: boolean;\n  onClose: () => void;\n  selectedSpanId?: string;\n  onSelectSpan?: (selectedSpanId?: string) => void;\n}) => {\n  const {\n    traceData,\n    loading: loadingTraceData,\n    error,\n  } = useExperimentTraceData(\n    requestId,\n    // skip fetching trace data if trace is in progress\n    traceInfo?.status === 'IN_PROGRESS',\n  );\n  const { theme } = useDesignSystemTheme();\n\n  // Usually, we rely on the parent component to provide trace info object (when clicked in a table row).\n  // But in some cases it's not available (e.g. when deep linking to a trace when the entity is not on the same page)\n  // and then we fetch it independently here.\n  const shouldFetchTraceInfo = !loadingTraceInfo && !traceInfo;\n\n  const { traceInfo: internalTraceInfo, loading: loadingInternalTracingInfo } = useExperimentTraceInfo(\n    requestId,\n    shouldFetchTraceInfo,\n  );\n\n  const traceInfoToUse = traceInfo || internalTraceInfo;\n\n  const title = useMemo(() => {\n    if (loadingTraceInfo || loadingInternalTracingInfo) {\n      return <TitleSkeleton />;\n    }\n    if (traceInfoToUse) {\n      return (\n        <Typography.Title level={2} withoutMargins>\n          {getTraceDisplayName(traceInfoToUse as ModelTraceInfo)}\n        </Typography.Title>\n      );\n    }\n    return requestId;\n  }, [\n    // Memo dependency list\n    loadingTraceInfo,\n    loadingInternalTracingInfo,\n    traceInfoToUse,\n    requestId,\n  ]);\n\n  // Construct the model trace object with the trace info and trace data\n  const combinedModelTrace = useMemo(\n    () =>\n      traceData\n        ? {\n            info: traceInfoToUse || {},\n            data: traceData,\n          }\n        : undefined,\n    [traceData, traceInfoToUse],\n  );\n\n  const containsSpans = (traceData?.spans || []).length > 0;\n\n  const renderContent = () => {\n    if (loadingTraceData || loadingTraceInfo || loadingInternalTracingInfo) {\n      return <ModelTraceExplorer.Skeleton />;\n    }\n    if (traceInfo?.status === 'IN_PROGRESS') {\n      return (\n        <>\n          <Spacer size=\"lg\" />\n          <Empty\n            image={<WarningIcon />}\n            description={\n              <FormattedMessage\n                defaultMessage=\"Trace data is not available for in-progress traces. Please wait for the trace to complete.\"\n                description=\"Experiment page > traces data drawer > in-progress description\"\n              />\n            }\n            title={\n              <FormattedMessage\n                defaultMessage=\"Trace data not available\"\n                description=\"Experiment page > traces data drawer > in-progress title\"\n              />\n            }\n          />\n        </>\n      );\n    }\n    if (error) {\n      return (\n        <>\n          <Spacer size=\"lg\" />\n          <Empty\n            image={<DangerIcon />}\n            description={\n              <FormattedMessage\n                defaultMessage=\"An error occurred while attempting to fetch the trace data. Please wait a moment and try again.\"\n                description=\"Experiment page > traces data drawer > error state description\"\n              />\n            }\n            title={\n              <FormattedMessage\n                defaultMessage=\"Error\"\n                description=\"Experiment page > traces data drawer > error state title\"\n              />\n            }\n          />\n        </>\n      );\n    }\n    if (!containsSpans) {\n      return (\n        <>\n          <Spacer size=\"lg\" />\n          <Empty\n            description={null}\n            title={\n              <FormattedMessage\n                defaultMessage=\"No trace data recorded\"\n                description=\"Experiment page > traces data drawer > no trace data recorded empty state\"\n              />\n            }\n          />\n        </>\n      );\n    }\n    if (combinedModelTrace) {\n      return (\n        <div\n          css={{\n            height: '100%',\n            marginLeft: -theme.spacing.lg,\n            marginRight: -theme.spacing.lg,\n            marginBottom: -theme.spacing.lg,\n          }}\n          // This is required for mousewheel scrolling within `Drawer`\n          onWheel={(e) => e.stopPropagation()}\n        >\n          <ModelTraceExplorer\n            modelTrace={combinedModelTrace}\n            selectedSpanId={selectedSpanId}\n            onSelectSpan={onSelectSpan}\n          />\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Drawer.Root\n      modal\n      open\n      onOpenChange={(open) => {\n        if (!open) {\n          onClose();\n        }\n      }}\n    >\n      <Drawer.Content\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_traces_tracedatadrawer.tsx_222\"\n        width=\"90vw\"\n        title={title}\n        expandContentToFullHeight\n      >\n        {renderContent()}\n      </Drawer.Content>\n    </Drawer.Root>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport { ModelTraceStatus, type ModelTraceData } from '@databricks/web-shared/model-trace-explorer';\nimport Utils from '../../../../common/utils/Utils';\n\nexport const useExperimentTraceData = (traceId?: string, skip = false) => {\n  const [traceData, setTraceData] = useState<ModelTraceData | undefined>(undefined);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>(undefined);\n\n  const fetchTraceData = useCallback(async (traceId: string) => {\n    setLoading(true);\n    try {\n      const response = await MlflowService.getExperimentTraceData(traceId);\n\n      if (Array.isArray(response.spans)) {\n        setTraceData(response);\n      } else {\n        // Not a showstopper, but we should log this error and notify the user.\n        Utils.logErrorAndNotifyUser('Invalid trace data response: ' + JSON.stringify(response?.toString()));\n      }\n    } catch (e: any) {\n      setError(e);\n    }\n    setLoading(false);\n  }, []);\n\n  useEffect(() => {\n    if (traceId && !skip) {\n      fetchTraceData(traceId);\n    }\n  }, [fetchTraceData, traceId, skip]);\n\n  return { traceData, loading, error };\n};\n","import { type ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport { KeyValueEntity } from '../../../../common/types';\nimport { useCallback } from 'react';\nimport { MLFLOW_INTERNAL_PREFIX } from '../../../../common/utils/TagUtils';\n\ntype EditedModelTrace = {\n  traceRequestId: string;\n  tags: KeyValueEntity[];\n};\n\nexport const useEditExperimentTraceTags = ({\n  onSuccess,\n  existingTagKeys = [],\n  useV3Apis,\n}: {\n  onSuccess?: () => void;\n  existingTagKeys?: string[];\n  useV3Apis?: boolean;\n}) => {\n  const { showEditTagsModal, EditTagsModal } = useEditKeyValueTagsModal<EditedModelTrace>({\n    saveTagsHandler: async (editedEntity, existingTags, newTags) => {\n      if (!editedEntity.traceRequestId) {\n        return;\n      }\n      const requestId = editedEntity.traceRequestId;\n      // First, determine new tags to be added\n      const addedOrModifiedTags = newTags.filter(\n        ({ key: newTagKey, value: newTagValue }) =>\n          !existingTags.some(\n            ({ key: existingTagKey, value: existingTagValue }) =>\n              existingTagKey === newTagKey && newTagValue === existingTagValue,\n          ),\n      );\n\n      // Next, determine those to be deleted\n      const deletedTags = existingTags.filter(\n        ({ key: existingTagKey }) => !newTags.some(({ key: newTagKey }) => existingTagKey === newTagKey),\n      );\n\n      // Fire all requests at once\n      const updateRequests = Promise.all([\n        ...addedOrModifiedTags.map(({ key, value }) =>\n          useV3Apis\n            ? MlflowService.setExperimentTraceTagV3(requestId, key, value)\n            : MlflowService.setExperimentTraceTag(requestId, key, value),\n        ),\n        ...deletedTags.map(({ key }) =>\n          useV3Apis\n            ? MlflowService.deleteExperimentTraceTagV3(requestId, key)\n            : MlflowService.deleteExperimentTraceTag(requestId, key),\n        ),\n      ]);\n\n      return updateRequests;\n    },\n    valueRequired: true,\n    allAvailableTags: existingTagKeys.filter((tagKey) => tagKey && !tagKey.startsWith(MLFLOW_INTERNAL_PREFIX)),\n    onSuccess: onSuccess,\n  });\n\n  const showEditTagsModalForTrace = useCallback(\n    (trace: ModelTraceInfo) => {\n      if (!trace.request_id) {\n        return;\n      }\n      const visibleTags = trace.tags?.filter(({ key }) => key && !key.startsWith(MLFLOW_INTERNAL_PREFIX)) || [];\n      showEditTagsModal({\n        traceRequestId: trace.request_id,\n        tags: visibleTags || [],\n      });\n    },\n    [showEditTagsModal],\n  );\n\n  return {\n    showEditTagsModalForTrace,\n    EditTagsModal,\n  };\n};\n","import Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport { keys, pickBy } from 'lodash';\nimport React, { useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { MlflowService } from '../../sdk/MlflowService';\nimport { Modal, Typography } from '@databricks/design-system';\n\nexport const TracesViewDeleteTraceModal = ({\n  experimentIds,\n  visible,\n  rowSelection,\n  setRowSelection,\n  handleClose,\n  refreshTraces,\n}: {\n  experimentIds: string[];\n  visible: boolean;\n  rowSelection: { [id: string]: boolean };\n  setRowSelection: (rowSelection: { [id: string]: boolean }) => void;\n  handleClose: () => void;\n  refreshTraces: () => void;\n}) => {\n  const intl = useIntl();\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const tracesToDelete = keys(pickBy(rowSelection, (value) => value));\n\n  const submitDeleteTraces = async () => {\n    try {\n      // TODO: Add support for deleting traces from multiple experiments\n      // The trace data contains the experiment ID, so we simply need to\n      // pass the trace data instead of just the trace IDs.\n      await MlflowService.deleteTraces(experimentIds[0] ?? '', tracesToDelete);\n\n      // reset row selection and refresh traces\n      setRowSelection({});\n      refreshTraces();\n      handleClose();\n    } catch (e: any) {\n      setErrorMessage(\n        intl.formatMessage({\n          defaultMessage: 'An error occured while attempting to delete traces. Please refresh the page and try again.',\n          description: 'Experiment page > traces view controls > Delete traces modal > Error message',\n        }),\n      );\n    }\n    setIsLoading(false);\n  };\n\n  const handleOk = () => {\n    submitDeleteTraces();\n    setIsLoading(true);\n  };\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_traces_tracesviewdeletetracemodal.tsx_62\"\n      title={\n        <FormattedMessage\n          defaultMessage=\"{count, plural, one {Delete Trace} other {Delete Traces}}\"\n          description=\"Experiment page > traces view controls > Delete traces modal > Title\"\n          values={{ count: tracesToDelete.length }}\n        />\n      }\n      visible={visible}\n      onCancel={handleClose}\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Delete {count, plural, one { # trace } other { # traces }}\"\n          description=\"Experiment page > traces view controls > Delete traces modal > Delete button\"\n          values={{ count: tracesToDelete.length }}\n        />\n      }\n      onOk={handleOk}\n      okButtonProps={{ loading: isLoading, danger: true }}\n    >\n      {errorMessage && <Typography.Paragraph color=\"error\">{errorMessage}</Typography.Paragraph>}\n      <Typography.Paragraph>\n        <Typography.Text bold>\n          <FormattedMessage\n            defaultMessage=\"{count, plural, one { # trace } other { # traces }} will be deleted.\"\n            description=\"Experiment page > traces view controls > Delete traces modal > Confirmation message title\"\n            values={{\n              count: tracesToDelete.length,\n            }}\n          />\n        </Typography.Text>\n      </Typography.Paragraph>\n      <Typography.Paragraph>\n        <FormattedMessage\n          defaultMessage=\"Deleted traces cannot be restored. Are you sure you want to proceed?\"\n          description=\"Experiment page > traces view controls > Delete traces modal > Confirmation message\"\n        />\n      </Typography.Paragraph>\n    </Modal>\n  );\n};\n","import { Button, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { TracesViewDeleteTraceModal } from './TracesViewDeleteTraceModal';\n\nexport const TracesViewControlsActions = ({\n  experimentIds,\n  rowSelection,\n  setRowSelection,\n  refreshTraces,\n  baseComponentId,\n}: {\n  experimentIds: string[];\n  rowSelection: { [id: string]: boolean };\n  setRowSelection: (rowSelection: { [id: string]: boolean }) => void;\n  refreshTraces: () => void;\n  baseComponentId: string;\n}) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  const openModal = useCallback(() => {\n    setIsModalOpen(true);\n  }, [setIsModalOpen]);\n\n  const closeModal = useCallback(() => {\n    setIsModalOpen(false);\n  }, [setIsModalOpen]);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <Button componentId={`${baseComponentId}.traces_table.delete_traces`} onClick={openModal} danger>\n        <FormattedMessage\n          defaultMessage=\"Delete\"\n          description=\"Experiment page > traces view controls > Delete button\"\n        />\n      </Button>\n      <TracesViewDeleteTraceModal\n        experimentIds={experimentIds}\n        visible={isModalOpen}\n        rowSelection={rowSelection}\n        handleClose={closeModal}\n        refreshTraces={refreshTraces}\n        setRowSelection={setRowSelection}\n      />\n    </div>\n  );\n};\n","import {\n  Button,\n  InfoIcon,\n  Input,\n  Popover,\n  SearchIcon,\n  TableFilterLayout,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { TracesViewControlsActions } from './TracesViewControlsActions';\nimport { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\n\nconst InputTooltip = ({ baseComponentId }: { baseComponentId: string }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Popover.Root\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_traces_tracesviewcontrols.tsx_28\"\n      modal={false}\n    >\n      <Popover.Trigger asChild>\n        <Button\n          size=\"small\"\n          type=\"link\"\n          icon={\n            <InfoIcon\n              css={{\n                svg: { width: 16, height: 16, color: theme.colors.textSecondary },\n              }}\n            />\n          }\n          componentId={`${baseComponentId}.traces_table.filter_tooltip`}\n        />\n      </Popover.Trigger>\n      <Popover.Content>\n        <Popover.Arrow />\n        <Typography.Paragraph>\n          <FormattedMessage\n            defaultMessage=\"Search traces using a simplified version of the SQL {whereBold} clause.\"\n            description=\"Tooltip string to explain how to search runs from the experiments table\"\n            values={{ whereBold: <b>WHERE</b> }}\n          />\n        </Typography.Paragraph>\n        <FormattedMessage defaultMessage=\"Examples:\" description=\"Text header for examples of mlflow search syntax\" />\n        <ul>\n          <li>\n            <code>tags.some_tag = \"abc\"</code>\n          </li>\n        </ul>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n\nexport const TracesViewControls = ({\n  experimentIds,\n  filter,\n  onChangeFilter,\n  rowSelection,\n  setRowSelection,\n  refreshTraces,\n  baseComponentId,\n  runUuid,\n  traces,\n}: {\n  experimentIds: string[];\n  filter: string;\n  onChangeFilter: (newFilter: string) => void;\n  rowSelection: { [id: string]: boolean };\n  setRowSelection: (newSelection: { [id: string]: boolean }) => void;\n  refreshTraces: () => void;\n  baseComponentId: string;\n  runUuid?: string;\n  traces: ModelTraceInfoWithRunName[];\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  // Internal filter value state, used to control the input value\n  const [filterValue, setFilterValue] = useState<string | undefined>(filter || undefined);\n  const [isEvaluateTracesModalOpen, setEvaluateTracesModalOpen] = useState(false);\n\n  const displayedFilterValue = filterValue ?? filter;\n\n  const selectedRequestIds = Object.entries(rowSelection)\n    .filter(([, isSelected]) => isSelected)\n    .map(([id]) => id);\n  const showActionButtons = selectedRequestIds.length > 0;\n\n  const searchOrDeleteControls = showActionButtons ? (\n    <TracesViewControlsActions\n      experimentIds={experimentIds}\n      rowSelection={rowSelection}\n      setRowSelection={setRowSelection}\n      refreshTraces={refreshTraces}\n      baseComponentId={baseComponentId}\n    />\n  ) : (\n    <TableFilterLayout css={{ marginBottom: 0 }}>\n      <Input\n        componentId={`${baseComponentId}.traces_table.search_filter`}\n        placeholder={intl.formatMessage({\n          defaultMessage: 'Search traces',\n          description: 'Experiment page > traces view filters > filter string input placeholder',\n        })}\n        value={displayedFilterValue}\n        // Matches runs filter input width\n        css={{ width: 430 }}\n        onChange={(e) => setFilterValue(e.target.value)}\n        prefix={<SearchIcon />}\n        suffix={<InputTooltip baseComponentId={baseComponentId} />}\n        allowClear\n        onClear={() => {\n          onChangeFilter('');\n          setFilterValue(undefined);\n        }}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter') {\n            onChangeFilter(displayedFilterValue);\n            setFilterValue(undefined);\n          }\n        }}\n      />\n    </TableFilterLayout>\n  );\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.xs }}>\n      {/* Search and delete controls */}\n      {searchOrDeleteControls}\n    </div>\n  );\n};\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport LocalStorageUtils from '../../../../common/utils/LocalStorageUtils';\nimport { isObject, sortBy } from 'lodash';\nimport { ExperimentViewTracesTableColumns } from '../TracesView.utils';\n\ntype LocalStorageStore = ReturnType<typeof LocalStorageUtils.getStoreForComponent>;\n\nexport interface ExperimentViewTracesUIState {\n  hiddenColumns?: string[];\n}\n\nconst defaultExperimentViewTracesUIState: ExperimentViewTracesUIState = {\n  hiddenColumns: [ExperimentViewTracesTableColumns.traceName, ExperimentViewTracesTableColumns.source],\n};\n\nconst loadExperimentViewTracesUIState = (localStore: LocalStorageStore): ExperimentViewTracesUIState => {\n  try {\n    const uiStateRaw = localStore.getItem('uiState');\n    const uiState = JSON.parse(uiStateRaw);\n    if (!isObject(uiState)) {\n      return defaultExperimentViewTracesUIState;\n    }\n    return uiState;\n  } catch (e) {\n    return defaultExperimentViewTracesUIState;\n  }\n};\n\nexport const useExperimentViewTracesUIState = (experimentIds: string[]) => {\n  const localStore = useMemo(() => {\n    const persistenceIdentifier = JSON.stringify(experimentIds.slice().sort());\n    return LocalStorageUtils.getStoreForComponent('ExperimentViewTraces', persistenceIdentifier);\n  }, [experimentIds]);\n\n  const [uiState, setUIState] = useState<ExperimentViewTracesUIState>(() =>\n    loadExperimentViewTracesUIState(localStore),\n  );\n\n  const toggleHiddenColumn = useCallback((columnId: string) => {\n    setUIState((prevUIState) => {\n      const hiddenColumns = prevUIState.hiddenColumns || [];\n      return {\n        hiddenColumns: hiddenColumns.includes(columnId)\n          ? hiddenColumns.filter((id) => id !== columnId)\n          : [...hiddenColumns, columnId],\n      };\n    });\n  }, []);\n\n  useEffect(() => {\n    localStore.setItem('uiState', JSON.stringify(uiState));\n  }, [localStore, uiState]);\n\n  return { uiState, toggleHiddenColumn };\n};\n","import { useCallback } from 'react';\nimport { useSearchParams } from '../../../../common/utils/RoutingUtils';\n\nconst QUERY_PARAM_KEY = 'selectedTraceId';\n\n/**\n * Query param-powered hook that returns the currently selected trace ID and a function to set the selected trace ID.\n * To be used in traces page components.\n */\nexport const useActiveExperimentTrace = () => {\n  // TODO(ML-40722): Create separate UI route for traces page and use route params instead of search params\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const selectedTraceId = searchParams.get(QUERY_PARAM_KEY) ?? undefined;\n\n  const setSelectedTraceId = useCallback(\n    (selectedTraceId: string | undefined) => {\n      setSearchParams((params) => {\n        if (selectedTraceId === undefined) {\n          params.delete(QUERY_PARAM_KEY);\n          return params;\n        }\n        params.set(QUERY_PARAM_KEY, selectedTraceId);\n        return params;\n      });\n    },\n    [setSearchParams],\n  );\n\n  return [selectedTraceId, setSelectedTraceId] as const;\n};\n","import { useCallback } from 'react';\nimport { useSearchParams } from '../../../../common/utils/RoutingUtils';\n\nconst QUERY_PARAM_KEY = 'selectedSpanId';\n\n/**\n * Query param-powered hook that returns the currently selected span ID and a function to set the selected span ID.\n * To be used in traces page components.\n */\nexport const useActiveExperimentSpan = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const selectedSpanId = searchParams.get(QUERY_PARAM_KEY) ?? undefined;\n\n  const setSelectedSpanId = useCallback(\n    (selectedSpanId: string | undefined) => {\n      setSearchParams(\n        (params) => {\n          if (selectedSpanId === undefined) {\n            params.delete(QUERY_PARAM_KEY);\n            return params;\n          }\n          params.set(QUERY_PARAM_KEY, selectedSpanId);\n          return params;\n        },\n        { replace: true },\n      );\n    },\n    [setSearchParams],\n  );\n\n  return [selectedSpanId, setSelectedSpanId] as const;\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { useExperimentTraces } from './hooks/useExperimentTraces';\nimport { TracesViewTable } from './TracesViewTable';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { TraceDataDrawer } from './TraceDataDrawer';\nimport { useEditExperimentTraceTags } from './hooks/useEditExperimentTraceTags';\nimport { TracesViewControls } from './TracesViewControls';\nimport { SortingState } from '@tanstack/react-table';\nimport { compact, isFunction, isNil, uniq } from 'lodash';\nimport { useExperimentViewTracesUIState } from './hooks/useExperimentViewTracesUIState';\nimport { ExperimentViewTracesTableColumns, getTraceInfoTotalTokens } from './TracesView.utils';\nimport { useActiveExperimentTrace } from './hooks/useActiveExperimentTrace';\nimport { useActiveExperimentSpan } from './hooks/useActiveExperimentSpan';\nimport { ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\n\nexport const TRACE_AUTO_REFRESH_INTERVAL = 30000;\n\nconst defaultSorting: SortingState = [{ id: ExperimentViewTracesTableColumns.timestampMs, desc: true }];\n\nexport const TracesView = ({\n  experimentIds,\n  runUuid,\n  loggedModelId,\n  disabledColumns,\n  baseComponentId = runUuid ? 'mlflow.run.traces' : 'mlflow.experiment_page.traces',\n}: {\n  experimentIds: string[];\n  /**\n   * If `runUuid` is provided, the traces will be filtered to only show traces from that run.\n   */\n  runUuid?: string;\n  /**\n   * If `loggedModelId` is provided, the traces will be filtered to only show traces from that logged model.\n   */\n  loggedModelId?: string;\n  /**\n   * Columns that should be disabled in the table.\n   * Disabled columns are hidden and are not available to be toggled at all.\n   */\n  disabledColumns?: ExperimentViewTracesTableColumns[];\n  /**\n   * The base component ID for the traces view. If not provided, will be inferred from the other props.\n   */\n  baseComponentId?: string;\n}) => {\n  const timeoutRef = useRef<number | undefined>(undefined);\n  const [filter, setFilter] = useState<string>('');\n  const [sorting, setSorting] = useState<SortingState>(defaultSorting);\n  const [rowSelection, setRowSelection] = useState<{ [id: string]: boolean }>({});\n\n  const [selectedTraceId, setSelectedTraceId] = useActiveExperimentTrace();\n  const [selectedSpanId, setSelectedSpanId] = useActiveExperimentSpan();\n\n  const { traces, loading, error, hasNextPage, hasPreviousPage, fetchNextPage, fetchPrevPage, refreshCurrentPage } =\n    useExperimentTraces({\n      experimentIds,\n      sorting,\n      filter,\n      runUuid,\n      loggedModelId,\n    });\n\n  const onTraceClicked = useCallback(\n    ({ request_id }: ModelTraceInfo) => setSelectedTraceId(request_id),\n    [setSelectedTraceId],\n  );\n\n  // clear row selections when the page changes.\n  // the backend specifies a max of 100 deletions,\n  // plus it's confusing to have selections on a\n  // page that the user can't see\n  const onNextPage = useCallback(() => {\n    fetchNextPage();\n    setRowSelection({});\n  }, [fetchNextPage]);\n\n  const onPreviousPage = useCallback(() => {\n    fetchPrevPage();\n    setRowSelection({});\n  }, [fetchPrevPage]);\n\n  // auto-refresh traces\n  useEffect(() => {\n    // if the hook reruns, clear the current timeout, since we'll be scheduling another\n    window.clearTimeout(timeoutRef.current);\n\n    const scheduleRefresh = async () => {\n      // only refresh if the user is on the first page\n      // otherwise it might mess with browsing old traces\n      if (loading || hasPreviousPage) return;\n\n      await refreshCurrentPage(true);\n\n      window.clearTimeout(timeoutRef.current);\n      timeoutRef.current = window.setTimeout(scheduleRefresh, TRACE_AUTO_REFRESH_INTERVAL);\n    };\n\n    timeoutRef.current = window.setTimeout(scheduleRefresh, TRACE_AUTO_REFRESH_INTERVAL);\n    return () => window.clearTimeout(timeoutRef.current);\n  }, [refreshCurrentPage, loading, hasPreviousPage]);\n\n  const { theme } = useDesignSystemTheme();\n\n  // Try to find the trace info for the currently selected trace id\n  const selectedTraceInfo = useMemo(() => {\n    if (!selectedTraceId) return undefined;\n    return traces.find((trace) => trace.request_id === selectedTraceId);\n  }, [selectedTraceId, traces]);\n\n  const {\n    // hiddenColumns is a list of columns that are hidden by the user.\n    uiState,\n    toggleHiddenColumn,\n  } = useExperimentViewTracesUIState(experimentIds);\n\n  const existingTagKeys = useMemo(\n    () => uniq(compact(traces.flatMap((trace) => trace.tags?.map((tag) => tag.key)))),\n    [traces],\n  );\n\n  const { showEditTagsModalForTrace, EditTagsModal } = useEditExperimentTraceTags({\n    onSuccess: () => refreshCurrentPage(true),\n    existingTagKeys,\n  });\n\n  const usingFilters = filter !== '';\n\n  const anyTraceContainsTokenCount = traces.some((trace) => !isNil(getTraceInfoTotalTokens(trace)));\n\n  // Automatically disabled columns: hide the token count column if there's no trace that contains token count information.\n  const autoDisabledColumns = useMemo(\n    () => (!anyTraceContainsTokenCount ? [ExperimentViewTracesTableColumns.totalTokens] : []),\n    [anyTraceContainsTokenCount],\n  );\n\n  // Combine columns that are disabled by parent component and columns that are disabled automatically.\n  const allDisabledColumns = useMemo(\n    () => [...(disabledColumns ?? []), ...autoDisabledColumns],\n    [disabledColumns, autoDisabledColumns],\n  );\n\n  const allHiddenColumns = useMemo(\n    () => [...(uiState.hiddenColumns ?? []), ...allDisabledColumns],\n    [uiState, allDisabledColumns],\n  );\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    >\n      <TracesViewControls\n        experimentIds={experimentIds}\n        filter={filter}\n        onChangeFilter={setFilter}\n        rowSelection={rowSelection}\n        setRowSelection={setRowSelection}\n        refreshTraces={refreshCurrentPage}\n        baseComponentId={baseComponentId}\n        runUuid={runUuid}\n        traces={traces}\n      />\n      <TracesViewTable\n        experimentIds={experimentIds}\n        runUuid={runUuid}\n        traces={traces}\n        loading={loading}\n        error={error}\n        onTraceClicked={onTraceClicked}\n        onTraceTagsEdit={showEditTagsModalForTrace}\n        hasNextPage={hasNextPage}\n        hasPreviousPage={hasPreviousPage}\n        onPreviousPage={onPreviousPage}\n        onNextPage={onNextPage}\n        onTagsUpdated={refreshCurrentPage}\n        usingFilters={usingFilters}\n        onResetFilters={() => setFilter('')}\n        hiddenColumns={allHiddenColumns}\n        disableTokenColumn={!anyTraceContainsTokenCount}\n        disabledColumns={allDisabledColumns}\n        setSorting={(sortingSetter) => {\n          // If header is clicked enough times, tanstack table switches to \"no sort\" mode.\n          // In that case, we should just reverse the direction of the current sort instead.\n          if (isFunction(sortingSetter)) {\n            return setSorting((currentState) => {\n              const newState = sortingSetter(currentState);\n              const currentSortBy = currentState[0];\n              if ((!newState || newState.length === 0) && currentSortBy) {\n                return [{ id: currentSortBy.id, desc: !currentSortBy.desc }];\n              }\n              return newState;\n            });\n          }\n        }}\n        sorting={sorting}\n        rowSelection={rowSelection}\n        setRowSelection={setRowSelection}\n        baseComponentId={baseComponentId}\n        toggleHiddenColumn={toggleHiddenColumn}\n      />\n      {selectedTraceId && (\n        <TraceDataDrawer\n          traceInfo={selectedTraceInfo}\n          loadingTraceInfo={loading}\n          requestId={selectedTraceId}\n          onClose={() => setSelectedTraceId(undefined)}\n          selectedSpanId={selectedSpanId}\n          onSelectSpan={setSelectedSpanId}\n        />\n      )}\n      {EditTagsModal}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nfunction useMatchesMediaQuery(queryList: MediaQueryList) {\n  return useSyncExternalStore(\n    React.useCallback(\n      (callback) => {\n        queryList.addEventListener('change', callback);\n        return () => {\n          queryList.removeEventListener('change', callback);\n        };\n      },\n      [queryList],\n    ),\n    () => queryList.matches,\n  );\n}\n\n/**\n * React hook that listens for changes to a [media query][media-query]. Uses\n * [`window.matchMedia()`][match-media] under-the-hood.\n *\n * [media-query]: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries\n * [match-media]: https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\n *\n * @usage\n *\n * ```tsx\n * function FancyButton() {\n *   const prefersReducedMotion = useMediaQuery('(prefers-reduced-motion)');\n *   return prefersReducedMotion ? <Button /> : <DancingButton />;\n * }\n * ```\n *\n * > **Note**\n * > The vast majority of use-cases can (and should) use vanilla CSS media\n * > queries instead of this hook — which will cause a re-render when the match\n * > state changes. Usage of this hook should be reserved for use-cases where\n * > CSS cannot be used instead.\n * >\n * > ```tsx\n * > <Button css={{ 'not (prefers-reduced-motion)': { animation: … } }} />\n * > ```\n */\nexport function useMediaQuery(query: string) {\n  // Note: a new MediaQueryList is created with every _usage_ of this hook.\n  // It's probably cheap to create many instances of MediaQueryList, and\n  // garbage collection will still clean up as expected, but consider using a\n  // [weak cache](https://github.com/tc39/proposal-weakrefs#weak-caches) to\n  // reuse MediaQueryLists where possible if performance is impacted.\n  const queryList = React.useMemo(() => window.matchMedia(query), [query]);\n  return useMatchesMediaQuery(queryList);\n}\n","import { type RefObject, useRef, useCallback, useEffect, useState } from 'react';\n\ntype ResizeObserverOptions<ElementType extends Element> = {\n  /**\n   * The element to watch for size changes. Can either pass a ref object or a function that when called will return the element to be watched\n   */\n  ref: RefObject<ElementType | null> | (() => ElementType | null);\n  /**\n   * Optionally debounces state updates, to prevent rerendering on every single resize\n   */\n  debounceTimeMs?: number;\n};\n\nexport function useResizeObserver<ElementType extends Element>({\n  ref: rootRef,\n  debounceTimeMs,\n}: ResizeObserverOptions<ElementType>): { width: number; height: number } | null {\n  const prevSize = useRef<{ width: number; height: number }>({ width: -1, height: -1 });\n  const debounceRef = useRef<ReturnType<typeof setTimeout>>();\n  const [size, setSize] = useState<{ width: number; height: number } | null>(null);\n\n  const onResize = useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      if (entries.length === 0) {\n        return;\n      }\n\n      const rect = entries[0].contentRect;\n      if (prevSize.current.width === -1) {\n        // First update, just set size immediately\n        prevSize.current = { width: rect.width, height: rect.height };\n        setSize(prevSize.current);\n        return;\n      }\n\n      if (rect.width !== prevSize.current.width || rect.height !== prevSize.current.height) {\n        prevSize.current.width = rect.width;\n        prevSize.current.height = rect.height;\n\n        if (!debounceTimeMs) {\n          setSize({ ...prevSize.current });\n          return;\n        }\n        clearTimeout(debounceRef.current);\n        debounceRef.current = setTimeout(() => {\n          setSize({ ...prevSize.current });\n        }, debounceTimeMs);\n      }\n    },\n    [debounceTimeMs],\n  );\n\n  const observerRef = useRef<ResizeObserver>();\n  if (!observerRef.current) {\n    observerRef.current = new ResizeObserver(onResize);\n  }\n\n  useEffect(() => {\n    const rootElement = typeof rootRef === 'function' ? rootRef() : rootRef.current;\n    if (rootElement) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- TODO(FEINF-3982)\n      const observer = observerRef.current!;\n      observer.observe(rootElement);\n      return () => observer.unobserve(rootElement);\n    }\n    return;\n  });\n\n  return size;\n}\n","import React from 'react';\nimport { Modal, Typography, CopyIcon, useDesignSystemTheme } from '@databricks/design-system';\nconst { Paragraph } = Typography;\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nexport interface KeyValueTagFullViewModalProps {\n  tagKey: string;\n  tagValue: string;\n  setIsKeyValueTagFullViewModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  isKeyValueTagFullViewModalVisible: boolean;\n}\n\nexport const KeyValueTagFullViewModal = React.memo((props: KeyValueTagFullViewModalProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagfullviewmodal.tsx_17\"\n      title={'Tag: ' + props.tagKey}\n      visible={props.isKeyValueTagFullViewModalVisible}\n      onCancel={() => props.setIsKeyValueTagFullViewModalVisible(false)}\n    >\n      <div css={{ display: 'flex' }}>\n        <Paragraph css={{ flexGrow: 1 }}>\n          <pre\n            css={{\n              backgroundColor: theme.colors.backgroundPrimary,\n              marginTop: theme.spacing.sm,\n              whiteSpace: 'pre-wrap',\n              wordBreak: 'break-all',\n            }}\n          >\n            {props.tagValue}\n          </pre>\n        </Paragraph>\n        <div\n          css={{\n            marginTop: theme.spacing.sm,\n          }}\n        >\n          <CopyButton copyText={props.tagValue} showLabel={false} icon={<CopyIcon />} aria-label=\"Copy\" />\n        </div>\n      </div>\n    </Modal>\n  );\n});\n","import { Tag, LegacyTooltip, Typography } from '@databricks/design-system';\nimport { KeyValueEntity } from '../types';\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { KeyValueTagFullViewModal } from './KeyValueTagFullViewModal';\nimport { Interpolation, Theme } from '@emotion/react';\n\n/**\n * An arbitrary number that is used to determine if a tag is too\n * long and should be truncated. We want to avoid short keys or values\n * in a long tag to be truncated\n * */\nconst TRUNCATE_ON_CHARS_LENGTH = 30;\n\nfunction getTruncatedStyles(shouldTruncate = true): Interpolation<Theme> {\n  return shouldTruncate\n    ? {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        textWrap: 'nowrap',\n        whiteSpace: 'nowrap' as const,\n      }\n    : { whiteSpace: 'nowrap' as const };\n}\n\n/**\n * A <Tag /> wrapper used for displaying key-value entity\n */\nexport const KeyValueTag = ({\n  isClosable = false,\n  onClose,\n  tag,\n  enableFullViewModal = false,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n  maxWidth = 300,\n  className,\n}: {\n  isClosable?: boolean;\n  onClose?: () => void;\n  tag: KeyValueEntity;\n  enableFullViewModal?: boolean;\n  charLimit?: number;\n  maxWidth?: number;\n  className?: string;\n}) => {\n  const intl = useIntl();\n\n  const [isKeyValueTagFullViewModalVisible, setIsKeyValueTagFullViewModalVisible] = useState(false);\n\n  const { shouldTruncateKey, shouldTruncateValue } = getKeyAndValueComplexTruncation(tag, charLimit);\n  const allowFullViewModal = enableFullViewModal && (shouldTruncateKey || shouldTruncateValue);\n\n  const fullViewModalLabel = intl.formatMessage({\n    defaultMessage: 'Click to see more',\n    description: 'Run page > Overview > Tags cell > Tag',\n  });\n\n  return (\n    <div>\n      <Tag\n        componentId=\"codegen_mlflow_app_src_common_components_keyvaluetag.tsx_60\"\n        closable={isClosable}\n        onClose={onClose}\n        title={tag.key}\n        className={className}\n      >\n        <LegacyTooltip title={allowFullViewModal ? fullViewModalLabel : ''}>\n          <span\n            css={{ maxWidth, display: 'inline-flex' }}\n            onClick={() => (allowFullViewModal ? setIsKeyValueTagFullViewModalVisible(true) : undefined)}\n          >\n            <Typography.Text bold title={tag.key} css={getTruncatedStyles(shouldTruncateKey)}>\n              {tag.key}\n            </Typography.Text>\n            {tag.value && (\n              <Typography.Text title={tag.value} css={getTruncatedStyles(shouldTruncateValue)}>\n                : {tag.value}\n              </Typography.Text>\n            )}\n          </span>\n        </LegacyTooltip>\n      </Tag>\n      <div>\n        {isKeyValueTagFullViewModalVisible && (\n          <KeyValueTagFullViewModal\n            tagKey={tag.key}\n            tagValue={tag.value}\n            isKeyValueTagFullViewModalVisible={isKeyValueTagFullViewModalVisible}\n            setIsKeyValueTagFullViewModalVisible={setIsKeyValueTagFullViewModalVisible}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport function getKeyAndValueComplexTruncation(\n  tag: KeyValueEntity,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n): { shouldTruncateKey: boolean; shouldTruncateValue: boolean } {\n  const { key, value } = tag;\n  const fullLength = key.length + value.length;\n  const isKeyLonger = key.length > value.length;\n  const shorterLength = isKeyLonger ? value.length : key.length;\n\n  // No need to truncate if tag is short enough\n  if (fullLength <= charLimit) return { shouldTruncateKey: false, shouldTruncateValue: false };\n  // If the shorter string is too long, truncate both key and value.\n  if (shorterLength > charLimit / 2) return { shouldTruncateKey: true, shouldTruncateValue: true };\n\n  // Otherwise truncate the longer string\n  return {\n    shouldTruncateKey: isKeyLonger,\n    shouldTruncateValue: !isKeyLonger,\n  };\n}\n"],"names":["ExperimentSourceTypeIcon","sourceType","className","SourceType","NOTEBOOK","_jsx","NotebookIcon","LOCAL","FileCodeIcon","PROJECT","FolderBranchIcon","JOB","WorkflowsIcon","_ref","name","styles","SourceCellRenderer","React","value","tags","_tags$Utils$sourceTyp","theme","useDesignSystemTheme","_Fragment","children","Utils","sourceTypeTag","sourceLink","renderSource","undefined","_jsxs","css","_css","display","gap","spacing","xs","alignItems","color","colors","textSecondary","shouldEnableAssessmentEditing","shouldEnableSummaryView","PreviewBadge","Tag","componentId","marginLeft","FormattedMessage","id","defaultMessage","LocalStorageUtils","getStoreForComponent","componentName","LocalStorageStore","join","getSessionScopedStoreForComponent","version","constructor","scope","type","storageObj","this","window","localStorage","sessionStorage","loadComponentState","storedVal","getItem","reactComponentStateKey","JSON","parse","saveComponentState","stateRecord","targetValue","toJSON","setItem","stringify","withScopePrefix","key","useResizableMaxWidth","minWidth","ref","useRef","containerWidth","setContainerWidth","useState","updateWidth","useCallback","current","clientWidth","useLayoutEffect","addEventListener","removeEventListener","resizableMaxWidth","node","getDropdownMenu","allAvailableTags","menu","intl","useIntl","searchValue","props","toLowerCase","useMemo","sortedIndexOf","isValidTagKey","test","flattenOptions","data","disabled","style","actionTertiaryTextDefault","actionDisabledText","LegacyTooltip","title","formatMessage","placement","PlusIcon","marginRight","sm","tagKey","groupOption","DropdownMenu","_ref2","TagKeySelectDropdown","control","onKeyChangeCallback","isOpen","setIsOpen","selectRef","field","fieldState","useController","rules","required","message","LegacySelect","allowClear","dangerouslySetAntdProps","showSearch","dropdownRender","placeholder","defaultValue","open","onDropdownVisibleChange","visible","filterOption","input","option","includes","onSelect","onChange","onClear","handleClear","validationState","error","map","tag","Option","getTagsMap","Map","useEditKeyValueTagsModal","onSuccess","saveTagsHandler","valueRequired","editedEntityRef","errorMessage","setErrorMessage","initialTags","setInitialTags","finalTags","setFinalTags","showModal","setShowModal","form","useForm","defaultValues","hideModal","showEditTagsModal","editedEntity","reset","saveTags","async","setIsLoading","Array","from","values","then","catch","e","_e$getUserVisibleErro","ErrorWrapper","getUserVisibleError","formValues","watch","isLoading","hasNewValues","isEqual","sortBy","isDirty","showPopoverMessage","EditTagsModal","Modal","destroyOnClose","onCancel","footer","RestoreAntDDefaultClsPrefix","Button","dangerouslyUseFocusPseudoClass","onClick","UnsavedTagPopoverTrigger","onSaveTask","loading","onSubmit","handleSubmit","trim","newEntries","set","md","flex","FormUI","Label","htmlFor","_tag$value","get","setValue","RHFControlledComponents","Input","htmlType","Message","rowGap","flexWrap","marginTop","KeyValueTag","isClosable","onClose","handleTagDelete","currentFinalTags","delete","_ref3","fullTagDisplay","truncate","length","shownText","Popover","Root","Trigger","asChild","Content","align","Typography","Paragraph","Close","Arrow","getCurrentUser","displayErrorNotification","getIconTypeForSpan","spanType","ModelSpanType","LLM","ModelIconType","MODELS","CHAIN","AGENT","TOOL","WRENCH","CHAT_MODEL","RETRIEVER","SEARCH","PARSER","CODE","EMBEDDING","NUMBERS","RERANKER","SORT","FUNCTION","UNKNOWN","getDisplayNameForSpanType","tryDeserializeAttribute","getMatchesFromSpan","span","searchFilter","matches","sections","inputs","outputs","attributes","events","section","label","push","getMatchesFromEvent","forEach","event","index","Object","keys","attribute","isKeyMatch","getEventAttributeKey","matchIndex","numValueMatches","split","i","createListFromObject","item","searchTree","rootNode","spanFilterState","_rootNode$children","searchFilterLowercased","allSpanTypesSelected","spanTypeDisplayState","every","shouldDisplay","filteredTreeNodes","filteredChildren","child","childNodes","childMatches","spanName","spanMatches","nodeMatchesSearch","spanTypeIsDisplayed","nodePassesSpanFilters","hasMatchingChild","hasException","getSpanExceptionCount","showParents","showExceptions","concat","searchTreeBySpanId","selectedSpanId","_rootNode$children2","isNil","matchedNode","normalizeNewSpanData","rootStartTime","rootEndTime","assessmentMap","traceId","_span$attributes","_span$attributes2","_span$attributes3","_assessmentMap$spanId","_span$attributes4","_span$attributes5","_span$attributes6","_getModelTraceSpanEnd","parentId","getModelTraceSpanParentId","spanId","getModelTraceSpanId","assessments","_assessmentMap$","messagesAttributeValue","messageFormat","chatMessages","getChatMessagesFromSpan","spanAttributes","_normalizeConversatio","_normalizeConversatio2","isArray","isRawModelTraceChatMessage","compact","prettyPrintChatMessage","messagesFromInputs","normalizeConversation","messagesFromOutputs","chatTools","getChatToolsFromSpan","toolsAttributeValue","_inputs$tools","isModelTraceChatTool","tools","mapValues","omitBy","_","startsWith","start","Number","getModelTraceSpanStartTime","end","getModelTraceSpanEndTime","icon","ModelTraceExplorerIcon","isRootSpan","decodeSpanId","isV3Span","base64","binaryString","atob","binaryLen","hex","charCodeAt","toString","padStart","base64ToHex","slice","isV3ModelTraceInfo","info","isV3ModelTraceSpan","_span$context$span_id","_span$context","span_id","context","_span$parent_id","parent_span_id","parent_id","start_time_unix_nano","start_time","end_time_unix_nano","end_time","getModelTraceId","trace","_trace$info$request_i","trace_id","request_id","parseModelTraceToTree","_trace$trace_data$spa","_trace$trace_data","spans","trace_data","spanMap","relationMap","Error","rootSpan","find","getSpanNodeFromData","_span$span_type","_span$end_time","_span$parent_id2","rootStart","rootEnd","getAssessmentMap","span_type","traceInfo","_traceInfo$assessment","getAssessmentsFromTags","assessmentsById","keyBy","assessment","overrides","overriddenAssessment","reduce","acc","_assessment$span_id","sort","a","b","Date","last_update_time","getTime","entries","filter","obj","isString","isNumber","isBoolean","getHighlightedSpanComponents","activeMatchBackgroundColor","inactiveMatchBackgroundColor","containsActiveMatch","activeMatch","scrollToActiveMatch","regex","RegExp","escapeRegExp","parts","isActiveMatch","backgroundColor","scrollMarginTop","isRetrieverDocument","document","has","isRenderableRetrieverSpan","getSpanExceptionEvents","_span$events","isModelTraceChatToolParamProperty","description","enum","_obj$function","parameters","function","properties","isModelTraceToolCall","_obj$function2","_obj$function3","arguments","isContentType","content","part","text","image_url","url","detail","input_audio","format","isContentPart","tool_calls","role","isModelTraceChoices","choice","isModelTraceChatResponse","choices","_normalizeLangchainCh","_normalizeLlamaIndexC","_normalizeOpenAIChatI","_normalizeDspyChatInp","_normalizeGeminiChatI","_normalizeAnthropicCh","_normalizeOpenAIAgent","_normalizeAutogenChat","_normalizeBedrockChat","_normalizeOpenAIChatI2","langchainMessages","normalizeLangchainChatInput","normalizeLangchainChatResult","llamaIndexMessages","normalizeLlamaIndexChatInput","normalizeLlamaIndexChatResponse","openAIMessages","normalizeOpenAIChatInput","normalizeOpenAIChatResponse","normalizeOpenAIResponsesOutput","normalizeOpenAIResponsesInput","dspyMessages","normalizeDspyChatInput","normalizeDspyChatOutput","geminiMessages","normalizeGeminiChatInput","normalizeGeminiChatOutput","anthropicMessages","normalizeAnthropicChatInput","normalizeAnthropicChatOutput","openAIAgentMessages","normalizeOpenAIAgentInput","normalizeOpenAIAgentOutput","autogenMessages","normalizeAutogenChatInput","normalizeAutogenChatOutput","bedrockMessages","normalizeBedrockChatInput","normalizeBedrockChatOutput","prettyPrintToolCall","toolCall","_toolCall$function","args","formatChatContent","_part$image_url","_message$tool_calls","CodeSnippetRenderMode","TracesViewTableNoTracesQuickstartContext","createContext","TracesViewTableNoTracesQuickstartContextProvider","introductionText","displayVersionWarnings","Provider","useTracesViewTableNoTracesQuickstartContext","useContext","TRACE_TAG_NAME_TRACE_NAME","getTraceMetadataField","_traceInfo$request_me","_traceInfo$request_me2","request_metadata","isTraceMetadataPossiblyTruncated","traceMetadata","getTraceInfoRunId","getTraceInfoTotalTokens","getTraceInfoInputs","getTraceInfoOutputs","getTraceTagValue","tagName","_traceInfo$tags2","_traceInfo$tags","_traceInfo$tags$find","getTraceDisplayName","EXPERIMENT_TRACES_SORTABLE_COLUMNS","TRACE_TABLE_CHECKBOX_COLUMN_ID","ExperimentViewTracesTableColumns","ExperimentViewTracesTableColumnLabels","requestId","defineMessage","traceName","timestampMs","status","runName","totalTokens","source","latency","ExperimentViewTracesStatusLabels","UNSET","IN_PROGRESS","OK","ERROR","RUN_ID_FILTER_EXPRESSION","LOGGED_MODEL_ID_FILTER_EXPRESSION","createRunIdsFilterExpression","runUuids","runId","useExperimentTraces","experimentIds","sorting","runUuid","loggedModelId","traces","setTraces","setLoading","setError","orderByString","firstOrderByColumn","first","desc","filterString","pageTokens","setPageTokens","currentPage","setCurrentPage","currentPageToken","fetchTraces","pageToken","silent","response","MlflowService","getExperimentTraces","runNamesForTraces","traceIdToRunIdMap","uniq","runIdsToRunNames","searchRuns","experiment_ids","run_view_type","ViewType","ALL","runs","run","fetchRunNamesForTraces","tracesWithRunNames","prevPages","next_page_token","hasNextPage","hasPreviousPage","useEffect","fetchNextPage","prevPage","fetchPrevPage","refreshCurrentPage","TracesViewTableTagCell","onAddEditTags","baseComponentId","visibleTagList","MLFLOW_INTERNAL_PREFIX","containsTags","columnGap","charLimit","maxWidth","enableFullViewModal","size","PencilIcon","getIcon","ClockIcon","textValidationWarning","CheckCircleIcon","textValidationSuccess","XCircleIcon","textValidationDanger","TracesViewTableStatusCell","row","original","labelDescriptor","clampedLinesCss","TracesViewTablePreviewCell","previewFieldName","isExpanded","setIsExpanded","fullData","setFullData","fetchFullData","getExperimentTraceData","previewValue","requestData","logErrorAndNotifyUser","valuePossiblyTruncated","expand","collapse","ChevronDownIcon","ChevronRightIcon","ExpandedParamCell","structuredJSONValue","objectData","whiteSpace","wordBreak","fontFamily","CodeSnippet","language","wrapLongLines","padding","isDarkMode","TracesViewTableRequestPreviewCell","TracesViewTableResponsePreviewCell","TracesViewTableSourceCell","getHeaderSizeClassName","getColumnSizeClassName","TracesViewTableRow","minHeight","general","buttonHeight","flexDirection","paddingRight","borderBottom","getAllCells","cell","_meta","_meta2","multiline","column","columnDef","meta","overflow","textOverflow","flexRender","getContext","prev","next","columns","selected","TracesViewTableTimestampCell","timestamp_ms","toLocaleString","navigator","timeZoneName","timeSinceStr","TracesViewTableHeaderCheckbox","table","isChecked","getIsAllRowsSelected","getIsSomeRowsSelected","Checkbox","wrapperStyle","margin","toggleAllRowsSelected","TracesViewTableCellCheckbox","getCanSelect","getIsSelected","toggleSelected","QUICKSTART_CONTENT","openai","minVersion","getContent","code","getCodeSource","langchain","llama_index","dspy","crewai","autogen","anthropic","bedrock","litellm","gemini","custom","Link","href","openInNewTab","TraceTableGenericQuickstart","flavorName","alertContent","installCommand","Text","Alert","marginBottom","closable","CopyButton","zIndex","position","top","right","showLabel","copyText","CopyIcon","showLineNumbers","TracesViewTableNoTracesQuickstart","paddingBottom","lg","Header","titleElementLevel","isRun","RequestIdCell","options","onTraceClicked","ellipsis","TraceNameCell","RunNameCell","experiment_id","to","Routes","getRunPageRoute","TraceTagsCell","onTraceTagsEdit","_ref4","_ref5","_ref6","TracesViewTable","onNextPage","onPreviousPage","usingFilters","onResetFilters","setSorting","rowSelection","setRowSelection","hiddenColumns","disableTokenColumn","toggleHiddenColumn","disabledColumns","showQuickStart","useStaticColumnsCells","isUnstableNestedComponentsMigrated","allColumnsList","header","enableResizing","enableSorting","accessorFn","execution_time_ms","isFinite","formatDuration","useReactTable","state","getCoreRowModel","getRowId","getSortedRowModel","onSortingChange","onRowSelectionChange","enableColumnResizing","enableRowSelection","columnResizeMode","columnSizeInfo","getState","columnSizingInfo","columnSizeVars","headers","getFlatHeaders","colSizes","getSize","Table","scrollable","empty","getEmptyState","getMessageField","Empty","image","DangerIcon","button","chunks","pagination","CursorPagination","TableRow","isHeader","getLeafHeaders","TableHeader","sortable","getCanSort","sortDirection","getIsSorted","onToggleSort","getToggleSortingHandler","setColumnSizing","isResizing","getIsResizing","TableRowAction","ColumnsIcon","CheckboxItem","checked","ItemIndicator","TableSkeletonRows","getRowModel","rows","TraceDataDrawer","loadingTraceInfo","onSelectSpan","traceData","loadingTraceData","useExperimentTraceData","skip","setTraceData","fetchTraceData","shouldFetchTraceInfo","internalTraceInfo","loadingInternalTracingInfo","useExperimentTraceInfo","enabled","setTraceInfoData","fetchTraceInfo","getExperimentTraceInfo","trace_info","traceInfoToUse","TitleSkeleton","Title","level","withoutMargins","combinedModelTrace","containsSpans","Drawer","modal","onOpenChange","width","expandContentToFullHeight","ModelTraceExplorer","Skeleton","Spacer","WarningIcon","height","onWheel","stopPropagation","modelTrace","TracesViewDeleteTraceModal","handleClose","refreshTraces","tracesToDelete","pickBy","count","okText","onOk","handleOk","_experimentIds$","deleteTraces","submitDeleteTraces","okButtonProps","danger","bold","TracesViewControlsActions","isModalOpen","setIsModalOpen","openModal","closeModal","InputTooltip","InfoIcon","svg","whereBold","TracesViewControls","onChangeFilter","filterValue","setFilterValue","isEvaluateTracesModalOpen","setEvaluateTracesModalOpen","displayedFilterValue","searchOrDeleteControls","isSelected","TableFilterLayout","target","prefix","SearchIcon","suffix","onKeyDown","defaultExperimentViewTracesUIState","useExperimentViewTracesUIState","localStore","persistenceIdentifier","uiState","setUIState","uiStateRaw","isObject","loadExperimentViewTracesUIState","columnId","prevUIState","QUERY_PARAM_KEY","defaultSorting","TracesView","timeoutRef","setFilter","selectedTraceId","setSelectedTraceId","useActiveExperimentTrace","_searchParams$get","searchParams","setSearchParams","useSearchParams","params","setSelectedSpanId","useActiveExperimentSpan","replace","clearTimeout","scheduleRefresh","setTimeout","selectedTraceInfo","existingTagKeys","flatMap","_trace$tags","showEditTagsModalForTrace","useEditExperimentTraceTags","useV3Apis","existingTags","newTags","traceRequestId","addedOrModifiedTags","newTagKey","newTagValue","some","existingTagKey","existingTagValue","deletedTags","Promise","all","setExperimentTraceTagV3","setExperimentTraceTag","deleteExperimentTraceTagV3","deleteExperimentTraceTag","visibleTags","anyTraceContainsTokenCount","autoDisabledColumns","allDisabledColumns","allHiddenColumns","_uiState$hiddenColumn","onTagsUpdated","sortingSetter","isFunction","currentState","newState","currentSortBy","useMediaQuery","query","queryList","useSyncExternalStore","callback","useMatchesMediaQuery","matchMedia","useResizeObserver","rootRef","debounceTimeMs","prevSize","debounceRef","setSize","onResize","rect","contentRect","observerRef","ResizeObserver","rootElement","observer","observe","unobserve","KeyValueTagFullViewModal","isKeyValueTagFullViewModalVisible","setIsKeyValueTagFullViewModalVisible","backgroundPrimary","tagValue","getTruncatedStyles","shouldTruncate","textWrap","shouldTruncateKey","shouldTruncateValue","fullLength","isKeyLonger","shorterLength","getKeyAndValueComplexTruncation","allowFullViewModal","fullViewModalLabel"],"sourceRoot":""}