{"version":3,"file":"static/js/4321.6be8c6eb.chunk.js","mappings":"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","sources":["../node_modules/use-sync-external-store/shim/index.js","../node_modules/@tanstack/react-query/src/isRestoring.tsx","../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../node_modules/@tanstack/react-query/src/useQuery.ts","../node_modules/@tanstack/react-query/src/suspense.ts","../node_modules/@tanstack/react-query/src/useBaseQuery.ts","../node_modules/@tanstack/query-core/src/queryObserver.ts","../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../node_modules/@tanstack/react-query/src/useSyncExternalStore.ts","../node_modules/@tanstack/react-query/src/utils.ts","../node_modules/use-debounce/src/useDebouncedCallback.ts","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts","../node_modules/react-intl/lib/src/components/message.js","../node_modules/react-intl/lib/src/components/useIntl.js","../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.js","../node_modules/use-clipboard-copy/dist/index.js"],"sourcesContent":["'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","import 'client-only'\nimport type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport { parseQueryArgs, QueryObserver } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","import type { DefaultedQueryObserverOptions } from '@tanstack/query-core'\nimport type { QueryObserver } from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport type { QueryObserverResult } from '@tanstack/query-core'\nimport type { QueryKey } from '@tanstack/query-core'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer\n    .fetchOptimistic(defaultedOptions)\n    .then(({ data }) => {\n      defaultedOptions.onSuccess?.(data as TData)\n      defaultedOptions.onSettled?.(data, null)\n    })\n    .catch((error) => {\n      errorResetBoundary.clearReset()\n      defaultedOptions.onError?.(error)\n      defaultedOptions.onSettled?.(undefined, error)\n    })\n","import 'client-only'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport { notifyManager } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseBaseQueryOptions } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, shouldSuspend, fetchOptimistic } from './suspense'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange))\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","import type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","'use client'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n","'use client'\n// Temporary workaround due to an issue with react-native uSES - https://github.com/TanStack/query/pull/3601\nimport { useSyncExternalStore as uSES } from 'use-sync-external-store/shim/index.js'\n\nexport const useSyncExternalStore = uSES\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n","import { useRef, useEffect, useMemo } from 'react';\n\nexport interface CallOptions {\n  /**\n   * Controls if the function should be invoked on the leading edge of the timeout.\n   */\n  leading?: boolean;\n  /**\n   * Controls if the function should be invoked on the trailing edge of the timeout.\n   */\n  trailing?: boolean;\n}\n\nexport interface Options extends CallOptions {\n  /**\n   * The maximum time the given function is allowed to be delayed before it's invoked.\n   */\n  maxWait?: number;\n  /**\n   * If the setting is set to true, all debouncing and timers will happen on the server side as well\n   */\n  debounceOnServer?: boolean;\n}\n\nexport interface ControlFunctions<ReturnT> {\n  /**\n   * Cancel pending function invocations\n   */\n  cancel: () => void;\n  /**\n   * Immediately invoke pending function invocations\n   */\n  flush: () => ReturnT | undefined;\n  /**\n   * Returns `true` if there are any pending function invocations\n   */\n  isPending: () => boolean;\n}\n\n/**\n * Subsequent calls to the debounced function return the result of the last func invocation.\n * Note, that if there are no previous invocations you will get undefined. You should check it in your code properly.\n */\nexport interface DebouncedState<T extends (...args: any) => ReturnType<T>>\n  extends ControlFunctions<ReturnType<T>> {\n  (...args: Parameters<T>): ReturnType<T> | undefined;\n}\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn.\n *\n * The debounced function comes with a `cancel` method to cancel delayed `func`\n * invocations and a `flush` method to immediately invoke them.\n *\n * Provide `options` to indicate whether `func` should be invoked on the leading\n * and/or trailing edge of the `wait` timeout. The `func` is invoked with the\n * last arguments provided to the debounced function.\n *\n * Subsequent calls to the debounced function return the result of the last\n * `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Controls if `func` should be invoked on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Controls if `func` should be invoked the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback<\n  T extends (...args: any) => ReturnType<T>,\n>(func: T, wait?: number, options?: Options): DebouncedState<T> {\n  const lastCallTime = useRef(null);\n  const lastInvokeTime = useRef(0);\n  const timerId = useRef(null);\n  const lastArgs = useRef<unknown[]>([]);\n  const lastThis = useRef<unknown>();\n  const result = useRef<ReturnType<T>>();\n  const funcRef = useRef(func);\n  const mounted = useRef(true);\n  // Always keep the latest version of debounce callback, with no wait time.\n  funcRef.current = func;\n\n  const isClientSide = typeof window !== 'undefined';\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  const useRAF = !wait && wait !== 0 && isClientSide;\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  wait = +wait || 0;\n  options = options || {};\n\n  const leading = !!options.leading;\n  const trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n  const maxing = 'maxWait' in options;\n  const debounceOnServer =\n    'debounceOnServer' in options ? !!options.debounceOnServer : false; // `false` by default\n  const maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n\n  // You may have a question, why we have so many code under the useMemo definition.\n  //\n  // This was made as we want to escape from useCallback hell and\n  // not to initialize a number of functions each time useDebouncedCallback is called.\n  //\n  // It means that we have less garbage for our GC calls which improves performance.\n  // Also, it makes this library smaller.\n  //\n  // And the last reason, that the code without lots of useCallback with deps is easier to read.\n  // You have only one place for that.\n  const debounced = useMemo(() => {\n    const invokeFunc = (time: number) => {\n      const args = lastArgs.current;\n      const thisArg = lastThis.current;\n\n      lastArgs.current = lastThis.current = null;\n      lastInvokeTime.current = time;\n      return (result.current = funcRef.current.apply(thisArg, args));\n    };\n\n    const startTimer = (pendingFunc: () => void, wait: number) => {\n      if (useRAF) cancelAnimationFrame(timerId.current);\n      timerId.current = useRAF\n        ? requestAnimationFrame(pendingFunc)\n        : setTimeout(pendingFunc, wait);\n    };\n\n    const shouldInvoke = (time: number) => {\n      if (!mounted.current) return false;\n\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return (\n        !lastCallTime.current ||\n        timeSinceLastCall >= wait ||\n        timeSinceLastCall < 0 ||\n        (maxing && timeSinceLastInvoke >= maxWait)\n      );\n    };\n\n    const trailingEdge = (time: number) => {\n      timerId.current = null;\n\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs.current) {\n        return invokeFunc(time);\n      }\n      lastArgs.current = lastThis.current = null;\n      return result.current;\n    };\n\n    const timerExpired = () => {\n      const time = Date.now();\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // https://github.com/xnimorz/use-debounce/issues/97\n      if (!mounted.current) {\n        return;\n      }\n      // Remaining wait calculation\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n      const timeWaiting = wait - timeSinceLastCall;\n      const remainingWait = maxing\n        ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n        : timeWaiting;\n\n      // Restart the timer\n      startTimer(timerExpired, remainingWait);\n    };\n\n    const func: DebouncedState<T> = (...args: Parameters<T>): ReturnType<T> => {\n      if (!isClientSide && !debounceOnServer) {\n        return;\n      }\n      const time = Date.now();\n      const isInvoking = shouldInvoke(time);\n\n      lastArgs.current = args;\n      lastThis.current = this;\n      lastCallTime.current = time;\n\n      if (isInvoking) {\n        if (!timerId.current && mounted.current) {\n          // Reset any `maxWait` timer.\n          lastInvokeTime.current = lastCallTime.current;\n          // Start the timer for the trailing edge.\n          startTimer(timerExpired, wait);\n          // Invoke the leading edge.\n          return leading ? invokeFunc(lastCallTime.current) : result.current;\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          startTimer(timerExpired, wait);\n          return invokeFunc(lastCallTime.current);\n        }\n      }\n      if (!timerId.current) {\n        startTimer(timerExpired, wait);\n      }\n      return result.current;\n    };\n\n    func.cancel = () => {\n      if (timerId.current) {\n        useRAF\n          ? cancelAnimationFrame(timerId.current)\n          : clearTimeout(timerId.current);\n      }\n      lastInvokeTime.current = 0;\n      lastArgs.current =\n        lastCallTime.current =\n        lastThis.current =\n        timerId.current =\n          null;\n    };\n\n    func.isPending = () => {\n      return !!timerId.current;\n    };\n\n    func.flush = () => {\n      return !timerId.current ? result.current : trailingEdge(Date.now());\n    };\n\n    return func;\n  }, [\n    leading,\n    maxing,\n    wait,\n    maxWait,\n    trailing,\n    useRAF,\n    isClientSide,\n    debounceOnServer,\n  ]);\n\n  return debounced;\n}\n","import type { Action, Mutation } from './mutation'\nimport { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { shallowEqualObjects } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import 'client-only'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport {\n  notifyManager,\n  parseMutationArgs,\n  MutationObserver,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { shouldThrowError } from './utils'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\nfunction areEqual(prevProps, nextProps) {\n    var values = prevProps.values, otherProps = __rest(prevProps, [\"values\"]);\n    var nextValues = nextProps.values, nextOtherProps = __rest(nextProps, [\"values\"]);\n    return (shallowEqual(nextValues, values) &&\n        shallowEqual(otherProps, nextOtherProps));\n}\nfunction FormattedMessage(props) {\n    var intl = useIntl();\n    var formatMessage = intl.formatMessage, _a = intl.textComponent, Text = _a === void 0 ? React.Fragment : _a;\n    var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b = props.tagName, Component = _b === void 0 ? Text : _b, ignoreTag = props.ignoreTag;\n    var descriptor = { id: id, description: description, defaultMessage: defaultMessage };\n    var nodes = formatMessage(descriptor, values, {\n        ignoreTag: ignoreTag,\n    });\n    if (typeof children === 'function') {\n        return children(Array.isArray(nodes) ? nodes : [nodes]);\n    }\n    if (Component) {\n        return React.createElement(Component, null, React.Children.toArray(nodes));\n    }\n    return React.createElement(React.Fragment, null, nodes);\n}\nFormattedMessage.displayName = 'FormattedMessage';\nvar MemoizedFormattedMessage = React.memo(FormattedMessage, areEqual);\nMemoizedFormattedMessage.displayName = 'MemoizedFormattedMessage';\nexport default MemoizedFormattedMessage;\n","import * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nexport default function useIntl() {\n    var intl = React.useContext(Context);\n    invariantIntlContext(intl);\n    return intl;\n}\n","/**\n * @license React\n * use-sync-external-store-shim.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar React = require(\"react\");\nfunction is(x, y) {\n  return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);\n}\nvar objectIs = \"function\" === typeof Object.is ? Object.is : is,\n  useState = React.useState,\n  useEffect = React.useEffect,\n  useLayoutEffect = React.useLayoutEffect,\n  useDebugValue = React.useDebugValue;\nfunction useSyncExternalStore$2(subscribe, getSnapshot) {\n  var value = getSnapshot(),\n    _useState = useState({ inst: { value: value, getSnapshot: getSnapshot } }),\n    inst = _useState[0].inst,\n    forceUpdate = _useState[1];\n  useLayoutEffect(\n    function () {\n      inst.value = value;\n      inst.getSnapshot = getSnapshot;\n      checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n    },\n    [subscribe, value, getSnapshot]\n  );\n  useEffect(\n    function () {\n      checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n      return subscribe(function () {\n        checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n      });\n    },\n    [subscribe]\n  );\n  useDebugValue(value);\n  return value;\n}\nfunction checkIfSnapshotChanged(inst) {\n  var latestGetSnapshot = inst.getSnapshot;\n  inst = inst.value;\n  try {\n    var nextValue = latestGetSnapshot();\n    return !objectIs(inst, nextValue);\n  } catch (error) {\n    return !0;\n  }\n}\nfunction useSyncExternalStore$1(subscribe, getSnapshot) {\n  return getSnapshot();\n}\nvar shim =\n  \"undefined\" === typeof window ||\n  \"undefined\" === typeof window.document ||\n  \"undefined\" === typeof window.document.createElement\n    ? useSyncExternalStore$1\n    : useSyncExternalStore$2;\nexports.useSyncExternalStore =\n  void 0 !== React.useSyncExternalStore ? React.useSyncExternalStore : shim;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useClipboard = void 0;\nvar clipboard_copy_1 = __importDefault(require(\"clipboard-copy\"));\nvar react_1 = require(\"react\");\nvar useTimedToggle_1 = require(\"./useTimedToggle\");\nfunction isInputLike(node) {\n    return node && (node.nodeName === 'TEXTAREA' || node.nodeName === 'INPUT');\n}\nfunction useClipboard(options) {\n    if (options === void 0) { options = {}; }\n    var _a = useTimedToggle_1.useTimedToggle(false), copied = _a[0], toggleCopied = _a[1];\n    var targetRef = react_1.useRef(null);\n    var optionsRef = react_1.useRef(options);\n    optionsRef.current = options;\n    function isSupported() {\n        return (!!navigator.clipboard ||\n            (typeof document.execCommand === 'function' &&\n                typeof document.queryCommandSupported === 'function' &&\n                document.queryCommandSupported('copy')));\n    }\n    var copyHandler = react_1.useCallback(function (text) {\n        var opts = optionsRef.current;\n        var target = targetRef.current;\n        function handleSuccess() {\n            if (opts.onSuccess) {\n                opts.onSuccess();\n            }\n            if (opts.copiedTimeout) {\n                toggleCopied(opts.copiedTimeout);\n            }\n            if (opts.selectOnCopy && isInputLike(target)) {\n                target.select();\n            }\n        }\n        function handleError() {\n            if (opts.onError) {\n                opts.onError();\n            }\n            if (opts.selectOnError !== false && isInputLike(target)) {\n                target.select();\n            }\n        }\n        function copy(value) {\n            clipboard_copy_1.default(value).then(handleSuccess).catch(handleError);\n        }\n        if (typeof text === 'string') {\n            copy(text);\n        }\n        else if (target) {\n            copy(target.value);\n        }\n    }, []);\n    return {\n        copied: copied,\n        copy: copyHandler,\n        isSupported: isSupported,\n        target: targetRef,\n    };\n}\nexports.useClipboard = useClipboard;\n"],"names":["module","exports","IsRestoringContext","React","useIsRestoring","Provider","createValue","clearReset","isReset","reset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","useQuery","arg1","arg2","arg3","parsedOptions","parseQueryArgs","useBaseQuery","QueryObserver","ensureStaleTime","defaultedOptions","suspense","staleTime","shouldSuspend","result","isRestoring","willFetch","isLoading","isFetching","fetchOptimistic","observer","errorResetBoundary","then","data","onSuccess","onSettled","catch","error","onError","undefined","options","Observer","queryClient","useQueryClient","context","defaultQueryOptions","_optimisticResults","notifyManager","batchCalls","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","getOptimisticResult","useSyncExternalStore","onStoreChange","unsubscribe","subscribe","updateResult","getCurrentResult","setOptions","listeners","getHasError","useErrorBoundary","query","getCurrentQuery","notifyOnChangeProps","trackResult","Subscribable","constructor","client","super","this","trackedProps","Set","selectError","bindMethods","remove","bind","refetch","onSubscribe","size","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","shallowEqualObjects","getQueryCache","notify","type","enabled","Error","queryKey","updateQuery","mounted","shouldFetchOptionally","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","build","createResult","currentResult","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","add","refetchPage","fetch","meta","isFetchingOptimistic","fetchOptions","_fetchOptions$cancelR","cancelRefetch","promise","throwOnError","noop","isServer","isStale","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","staleTimeoutId","setTimeout","_this$options$refetch","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","fetchStatus","status","isPreviousData","isPlaceholderData","fetchOnMount","fetchOptionally","canFetch","networkMode","keepPreviousData","isSuccess","select","selectFn","selectResult","replaceData","process","placeholderData","Date","now","isError","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","nextResult","defaultNotifyOptions","cache","shouldNotifyListeners","includedProps","some","typedKey","has","onQueryUpdate","action","manual","isCancelledError","batch","_this$options$onSucce","_this$options","_this$options$onSettl","_this$options2","call","_this$options$onError","_this$options3","_this$options$onSettl2","_this$options4","listener","retryOnMount","shouldLoadOnMount","refetchOnMount","field","value","isStaleByTime","useSyncExternalStore$1","shouldThrowError","_useErrorBoundary","params","c","e","u","i","a","r","o","f","l","v","m","d","g","current","p","window","w","TypeError","s","leading","x","trailing","h","y","debounceOnServer","F","Math","max","maxWait","n","A","t","apply","cancelAnimationFrame","requestAnimationFrame","min","slice","arguments","cancel","isPending","flush","MutationObserver","mutate","_this$currentMutation","defaultMutationOptions","getMutationCache","mutation","currentMutation","_this$currentMutation2","onMutationUpdate","variables","mutateOptions","execute","getDefaultState","isIdle","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","useMutation","parseMutationArgs","mutateAsync","areEqual","prevProps","nextProps","values","otherProps","__rest","nextValues","nextOtherProps","shallowEqual","FormattedMessage","props","intl","useIntl","formatMessage","_a","textComponent","Text","id","description","defaultMessage","children","_b","tagName","Component","nodes","ignoreTag","Array","isArray","toArray","displayName","MemoizedFormattedMessage","Context","invariantIntlContext","require","objectIs","is","useState","useEffect","useLayoutEffect","useDebugValue","checkIfSnapshotChanged","inst","latestGetSnapshot","getSnapshot","nextValue","shim","document","createElement","_useState","forceUpdate","__importDefault","mod","__esModule","useClipboard","clipboard_copy_1","react_1","useTimedToggle_1","isInputLike","node","nodeName","useTimedToggle","copied","toggleCopied","targetRef","useRef","optionsRef","copy","useCallback","text","opts","target","handleSuccess","copiedTimeout","selectOnCopy","handleError","selectOnError","default","isSupported","navigator","clipboard","execCommand","queryCommandSupported"],"sourceRoot":""}