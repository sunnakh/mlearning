{"version":3,"file":"static/js/3770.caf40a03.chunk.js","mappings":"sQAMuD,IAAAA,EAAA,CAAAC,KAAA,UAAAC,OAAA,mBAAAC,EAAA,CAAAF,KAAA,UAAAC,OAAA,wBAAAE,EAAA,CAAAH,KAAA,SAAAC,OAAA,kCAGhD,MAAMG,EAAwCA,EACnDC,wBACAC,gBACAC,oBAMA,MAAM,MAAEC,IAAUC,EAAAA,EAAAA,KACZC,GAAOC,EAAAA,EAAAA,MACP,eAAEC,EAAc,uBAAEC,EAAsB,SAAEC,GAAaT,GAAyB,CAAC,EAEjFU,GAAgCC,EAAAA,EAAAA,cACnCC,GACCV,GAAeW,IAAK,IACfA,EACHb,sBAAuB,IAClBa,EAAMb,yBACNY,QAGT,CAACV,IAGGY,EAA2BL,IAAaM,EAAAA,GAA6BC,OAErEC,EAAQZ,EAAKa,cAAc,CAAAC,GAAA,SAC/BC,eAAe,qBAIjB,OACEC,EAAAA,EAAAA,IAACC,EAAAA,aAAaC,KAAI,CAACC,OAAO,EAAMC,SAAA,EAC9BC,EAAAA,EAAAA,GAACC,EAAAA,EAAO,CACNC,YAAY,4HACZC,QAASZ,EAAMQ,UAEfC,EAAAA,EAAAA,GAACJ,EAAAA,aAAaQ,QAAO,CAACC,SAAO,EAAAN,UAC3BC,EAAAA,EAAAA,GAACM,EAAAA,EAAM,CACLJ,YAAY,qDACZK,MAAMP,EAAAA,EAAAA,GAACQ,EAAAA,SAAQ,IACf,aAAYjB,SAIlBI,EAAAA,EAAAA,IAACC,EAAAA,aAAaa,QAAO,CAACC,MAAM,MAAMC,IAAG3C,EAAoB+B,SAAA,EACvDJ,EAAAA,EAAAA,IAACC,EAAAA,aAAagB,MAAK,CACjBC,KAAK,SACL,aAAYlC,EAAKa,cAAc,CAAAC,GAAA,SAC7BC,eAAe,WAGdK,SAAA,EAEHC,EAAAA,EAAAA,GAACJ,EAAAA,aAAakB,MAAK,CAACH,IAAGxC,EAA8B4B,UACnDC,EAAAA,EAAAA,GAACe,EAAAA,EAAgB,CAAAtB,GAAA,SACfC,eAAe,cAInBC,EAAAA,EAAAA,IAACC,EAAAA,aAAaoB,aAAY,CACxBd,YAAY,4HACZe,QAASlC,IAAaM,EAAAA,GAA6B6B,KACnDC,QAASA,IAAMnC,EAA8B,CAAED,SAAUM,EAAAA,GAA6B6B,OAAQnB,SAAA,EAE9FC,EAAAA,EAAAA,GAACJ,EAAAA,aAAawB,cAAa,KAC3BpB,EAAAA,EAAAA,GAACe,EAAAA,EAAgB,CAAAtB,GAAA,SACfC,eAAe,aAInBC,EAAAA,EAAAA,IAACC,EAAAA,aAAaoB,aAAY,CACxBd,YAAY,4HACZe,QAASlC,IAAaM,EAAAA,GAA6BgC,KACnDF,QAASA,IAAMnC,EAA8B,CAAED,SAAUM,EAAAA,GAA6BgC,OAAQtB,SAAA,EAE9FC,EAAAA,EAAAA,GAACJ,EAAAA,aAAawB,cAAa,KAC3BpB,EAAAA,EAAAA,GAACe,EAAAA,EAAgB,CAAAtB,GAAA,SACfC,eAAe,oBAInBC,EAAAA,EAAAA,IAACC,EAAAA,aAAaoB,aAAY,CACxBd,YAAY,4HACZe,QAASlC,IAAaM,EAAAA,GAA6BiC,cACnDH,QAASA,IAAMnC,EAA8B,CAAED,SAAUM,EAAAA,GAA6BiC,gBAAiBvB,SAAA,EAEvGC,EAAAA,EAAAA,GAACJ,EAAAA,aAAawB,cAAa,KAC3BpB,EAAAA,EAAAA,GAACe,EAAAA,EAAgB,CAAAtB,GAAA,SACfC,eAAe,wBAInBC,EAAAA,EAAAA,IAACC,EAAAA,aAAa2B,IAAG,CAAAxB,SAAA,EACfJ,EAAAA,EAAAA,IAACC,EAAAA,aAAa4B,WAAU,CACtBb,KAAGc,EAAAA,EAAAA,IAAE,CACHC,YAAajD,EAAMkD,QAAQC,GAAKnD,EAAMkD,QAAQE,IAC/C,IAAC9B,SAAA,EAEFC,EAAAA,EAAAA,GAACJ,EAAAA,aAAakC,YAAW,CAAA/B,UACvBC,EAAAA,EAAAA,GAAC+B,EAAAA,EAAS,CACRpB,KAAGc,EAAAA,EAAAA,IAAE,CACHO,WAAY5C,EAA2B,UAAY,UACpD,SAGLY,EAAAA,EAAAA,GAACe,EAAAA,EAAgB,CAAAtB,GAAA,SACfC,eAAe,eAInBM,EAAAA,EAAAA,GAACJ,EAAAA,aAAaqC,WAAU,CAACtB,IAAGvC,EAAuC2B,SAChExB,EAAc2D,KAAKC,IAClBxC,EAAAA,EAAAA,IAACC,EAAAA,aAAaoB,aAAY,CACxBd,YAAY,6HAEZe,QAASnC,IAA2BqD,GAAa/C,EACjD+B,QAASA,IACPnC,EAA8B,CAC5BD,SAAUM,EAAAA,GAA6BC,OACvCR,uBAAwBqD,IAE3BpC,SAAA,EAEDC,EAAAA,EAAAA,GAACJ,EAAAA,aAAawB,cAAa,IAC1Be,IAVIA,cAgBfxC,EAAAA,EAAAA,IAACC,EAAAA,aAAagB,MAAK,CACjBC,KAAK,SACL,aAAYlC,EAAKa,cAAc,CAAAC,GAAA,SAC7BC,eAAe,mBAGdK,SAAA,EAEHC,EAAAA,EAAAA,GAACJ,EAAAA,aAAakB,MAAK,CAAAf,UACjBC,EAAAA,EAAAA,GAACe,EAAAA,EAAgB,CAAAtB,GAAA,SACfC,eAAe,sBAKnBM,EAAAA,EAAAA,GAAA,OAAKW,KAAGc,EAAAA,EAAAA,IAAE,CAAEW,QAAS3D,EAAMkD,QAAQE,IAAI,IAAC9B,UACtCC,EAAAA,EAAAA,GAACqC,EAAAA,EAAgB,CACfC,IAAK,EACLC,IAAK,IACLC,SAAW3D,GAAmBG,EAA8B,CAAEH,mBAC9D4D,MAAO5D,GAAkC,cAK/B,C,sEChKjB,MAAM6D,EAAiBA,KAC5B,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAsC,YAA7BC,SAASC,iBAMxD,OALAC,EAAAA,EAAAA,YAAU,KACRF,SAASG,iBAAiB,oBAAqBC,IAC7CN,EAA4C,YAA7BE,SAASC,gBAA8B,GACtD,GACD,IACIJ,CAAW,C,qJCGpB,IAAIQ,EAA+B,KAE5B,MAAMC,EAAuBA,IAE9BD,IAGJA,EAAa,IAAIE,EAAAA,UACjBF,EAAWG,UAVmB,UAWvBH,GAQHI,EAAmB,CACvBC,YAAa,CACX,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,aACA,IACA,IACA,KACA,KACA,KACA,KACA,MACA,IACA,IACA,SACA,KACA,SACA,OACA,KACA,KACA,MACA,QACA,QACA,QACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,KACA,KACA,KACA,MACA,IACA,OACA,OACA,MACA,KACA,KACA,KACA,UACA,SACA,MACA,UACA,UAEFC,kBAAmB,CACjBC,EAAG,CAAC,OAAQ,OAAQ,UACpBC,IAAK,CAAC,MAAO,YACbC,IAAK,CAAC,YAAa,cAIVC,EAAyBC,GAC7BC,IAAaD,EAAWP,GAGpBS,EAAwBC,GAC5BA,EAAKC,QAAQ,IAAIC,OAAO,KAAM,KAAM,qB,yGC3EtC,MAAMC,UAA2BC,EAAAA,UACtCC,WAAAA,CAAYC,GACVC,MAAMD,GACNE,KAAKC,aAAeD,KAAKC,aAAaC,KAAKF,KAC7C,CAEAC,YAAAA,GACE,MAAME,EAAsB,GAI5B,OAHAH,KAAKF,MAAMM,eAAeC,SAASC,IACjCH,EAAeI,KAAKP,KAAKF,MAAMU,aAAaF,GAAO,IAE9CG,QAAQC,IAAIP,GAChBQ,OAAM,KACL,MAAMC,EAAoB,GAAGZ,KAAKF,MAAM5F,KAAKa,cAAc,CAAAC,GAAA,SACzDC,eAAe,2DAGjB+E,KAAKF,MAAMe,eAAeD,EAAkB,IAE7CE,MAAK,KAAO,IAADC,EAAAC,EACU,QAApBD,GAAAC,EAAAhB,KAAKF,OAAMmB,iBAAS,IAAAF,GAApBA,EAAAG,KAAAF,EAAwB,GAE9B,CAEAG,MAAAA,GACE,MAAMC,EAASpB,KAAKF,MAAMM,eAAeiB,OACzC,OACE9F,EAAAA,EAAAA,GAAC+F,EAAAA,EAAY,CACXC,OAAQvB,KAAKF,MAAMyB,OACnBC,QAASxB,KAAKF,MAAM0B,QACpBvB,aAAcD,KAAKC,aACnBwB,MAAO,qBAAqBC,EAAAA,EAAMC,UAAU,MAAOP,KACnDQ,UACE1G,EAAAA,EAAAA,IAAA,OAAAI,SAAA,EACEC,EAAAA,EAAAA,GAAA,KAAAD,UACEJ,EAAAA,EAAAA,IAAA,KAAAI,SAAA,CACG8F,EAAO,eAAaM,EAAAA,EAAMC,UAAU,MAAOP,GAAQ,yBAUtD,MAINS,kBAAkB,UAGxB,EAGF,MAAMC,EAAqB,CACzBtB,aAAY,KACZK,eACF,MAEA,KAAekB,EAAAA,EAAAA,IAAQ,KAAMD,EAA7B,EAAiDE,EAAAA,EAAAA,IAAWrC,G,oJC/ErD,MAAMsC,EAAwBA,EAAGC,yBACtC,MAAMC,GAAsBC,EAAAA,EAAAA,OACtB,MAAEpI,IAAUC,EAAAA,EAAAA,MAEXoI,EAAYC,IAAiBlE,EAAAA,EAAAA,WAAS,IAAwB,OAAlB8D,QAAkB,IAAlBA,EAAAA,EAAsB,MAClEK,EAAWC,IAAgBpE,EAAAA,EAAAA,WAAS,IAErC,cAAErD,IAAkBZ,EAAAA,EAAAA,KAEpBsI,GAAoBjI,EAAAA,EAAAA,cACvBwD,IACCmE,GAAqBO,IAAO,IACvBA,EACHR,mBAAoBlE,MAEtBwE,GAAa,EAAM,GAErB,CAACL,IAGGQ,GAA6BC,EAAAA,EAAAA,IAAqBH,EAAmB,KAE3E,OACElH,EAAAA,EAAAA,GAACsH,EAAAA,EAAK,CACJpH,YAAY,4GACZW,KAAK,YACL0G,QACEvH,EAAAA,EAAAA,GAAA,OAAKW,KAAGc,EAAAA,EAAAA,IAAE,CAAE+F,MAAO/I,EAAMgJ,QAAQC,aAAcC,WAAY,GAAG,IAAC5H,SAC5DiH,GAAYhH,EAAAA,EAAAA,GAAC4H,EAAAA,EAAO,CAACC,KAAK,WAAa7H,EAAAA,EAAAA,GAAC8H,EAAAA,EAAU,MAGvDrF,MAAOqE,EACPiB,YAAU,EACVvF,SAAWwF,IACTjB,EAAciB,EAAEC,OAAOxF,OACvBwE,GAAa,GACbG,EAA2BY,EAAEC,OAAOxF,MAAM,EAE5CyF,YAAa1I,EAAc,CAAAC,GAAA,SACzBC,eAAe,0BAGjB,C,mJCrBN,MAAMyI,UAA2B9D,EAAAA,UAAiBC,WAAAA,IAAA8D,GAAA,SAAAA,GAAA,KAChDC,QAAUC,EAAAA,YAAkB,KAE5BC,gBAAmBC,IAEjB,MAAMC,EAAaD,EAAOE,EAAAA,GAEpBC,GAAqBC,EAAAA,EAAAA,MAE3B,OAAOnE,KAAKF,MACTsE,aAAapE,KAAKF,MAAMuE,QAASL,EAAYE,GAC7CpD,MAAK,SAAAC,EAAAC,EAAA,OAA0B,QAA1BD,GAAMC,EAAAhB,KAAKF,OAAMmB,iBAAS,IAAAF,OAAA,EAApBA,EAAAG,KAAAF,EAAwB,GAAC,CACvC,CAEFG,MAAAA,GACE,MAAM,OAAEI,GAAS,EAAK,QAAE+C,GAAYtE,KAAKF,MACzC,OACEvE,EAAAA,EAAAA,GAACgJ,EAAAA,EAAiB,CAChB9C,MAAOzB,KAAKF,MAAM5F,KAAKa,cAAc,CAAAC,GAAA,SACnCC,eAAe,eAGjBuJ,OAAQxE,KAAKF,MAAM5F,KAAKa,cAAc,CAAAC,GAAA,SACpCC,eAAe,SAGjBsG,OAAQA,EACRtB,aAAcD,KAAK8D,gBACnBtC,QAASxB,KAAKF,MAAM0B,QAAQlG,UAE5BC,EAAAA,EAAAA,GAACkJ,EAAAA,EAAU,CACTC,KAAK,MACLlL,KAAM8K,EACNK,SAAU3E,KAAK4D,QACfgB,QAASrD,EACTsD,UAAWC,MAAOC,EAAG/G,KACnB,GAAqB,kBAAVA,GAAsBA,EAAMqD,SAAWrD,EAAMgH,OACtD,MAAM,IAAIC,MACRjF,KAAKF,MAAM5F,KAAKa,cAAc,CAAAC,GAAA,SAC5BC,eAAe,iDAKrB,OAAO,CAAI,KAKrB,EAGF,MAAM6G,EAAqB,CACzBsC,aACF,MAEac,GAAyBlD,EAAAA,EAAAA,IAAW0B,GACpCyB,GAAiBpD,EAAAA,EAAAA,SAAQqD,EAAWtD,EAAnBC,CAAuCmD,E,mHC5E9D,MAAMG,EAA6BA,EACxCC,WACAC,mBACAC,qBACAC,cASA,MAAMC,GAAWC,EAAAA,EAAAA,MASXC,EAAqBN,EAASO,MAAM,EAAGC,EAAAA,IAAmCC,KAAK,MACrFxH,EAAAA,EAAAA,YAAU,KAEHkH,IAAWD,GAGhBI,EAAmBI,MAAM,KAAK3F,SAASgE,IACjCA,GACFqB,GAASO,EAAAA,EAAAA,IAAc5B,GACzB,GACA,GACD,CAACuB,EAAoBF,EAAUF,EAAoBC,IAEtD,MAAMS,GAAoBC,EAAAA,EAAAA,aAA2Bf,GAC/CgB,GAAwBD,EAAAA,EAAAA,QAAOX,GAAsBC,GAC3DW,EAAsB1D,QAAU8C,EAEhC,MAAMa,EAA6Bd,EAAiBM,MAAM,EAAGC,EAAAA,IAAmCC,KAAK,MAErGxH,EAAAA,EAAAA,YAAU,KACR,IAAI+H,GAAgB,EAEpB,IAAKb,IAAYD,EACf,OAGF,MAAMe,EAAgBzB,UACpB,MAAMQ,EAAWM,EAAmBI,MAAM,KAEpCQ,EAAiBH,EAA2BL,MAAM,MAE/BS,EAAcnB,EAASoB,QAAO,CAAC3B,EAAG4B,IAAoC,SAA1BH,EAAeG,KAAqBrB,GAExFjF,SAASgE,IACpBA,GACFqB,GAASO,EAAAA,EAAAA,IAAc5B,EAASoC,GAClC,GACA,EAGEG,EAAkB9B,UAEtB,GAAKsB,EAAsB1D,UAAW4D,EAAtC,CAGA,UACQC,GAAc,EACtB,CAAE,MAAOhD,GAEP7B,EAAAA,EAAMmF,sBAAsBtD,EAC9B,CACAuD,aAAaZ,EAAkBxD,SAG1B0D,EAAsB1D,UAAW4D,IAItCJ,EAAkBxD,QAAUqE,OAAOC,WAAWJ,EAAiBK,EAAAA,IAd/D,CAc2G,EAK7G,OAFAV,GAAc,GAAOzF,KAAK8F,GAEnB,KACLL,GAAc,GAEdD,GAAgB,EAEhBQ,aAAaZ,EAAkBxD,QAAQ,CACxC,GACA,CAACgD,EAAUE,EAAoBS,EAA4Bb,EAAoBC,GAAS,C,+HCzFtF,MAAMxB,EAAiB,UAa9B,MAAMiD,UAA4BtH,EAAAA,UAAiBC,WAAAA,IAAA8D,GAAA,SAAAA,GAAA,KACjDwD,sBAAgB,OAOhBC,kBAAqBD,IACnBnH,KAAKmH,iBAAmBA,EACxBA,GAAoBA,EAAiBE,QACrCF,GAAoBA,EAAiBG,QAAQ,EAC7C,KAEFC,UAAaC,KACe,IAAtBA,EAAU5C,UAA4C,IAAvB5E,KAAKF,MAAM8E,UAE5C5E,KAAKmH,kBAAoBnH,KAAKmH,iBAAiBE,QAE/CrH,KAAKmH,kBAAoBnH,KAAKmH,iBAAiBG,SACjD,EACA,KAEFG,YAAeD,IACb,MAAM5D,EAAU5D,KAAKF,MAAM6E,SACvB6C,EAAUhO,OAASwG,KAAKF,MAAMtG,MAEhCoK,EAAQlB,QAAQ+E,YAAY,CAACxD,GAC/B,CACA,CA1BFyD,kBAAAA,CAAmBF,GACjBxH,KAAKuH,UAAUC,GACfxH,KAAKyH,YAAYD,EACnB,CAyBArG,MAAAA,GACE,OAEE5F,EAAAA,EAAAA,GAACoM,EAAAA,WAAU,CAACC,IAAK5H,KAAKF,MAAM6E,SAAUkD,OAAO,WAAUvM,UACrDC,EAAAA,EAAAA,GAACoM,EAAAA,WAAWG,KAAI,CACdtO,KAAMyK,EACN8D,aAAc/H,KAAKF,MAAMtG,KACzBwO,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,mCAAmClI,KAAKF,MAAM4E,SACzE,CAAEG,UAAW7E,KAAKF,MAAM+E,YAE1B/J,MAAO,OAAOkF,KAAKF,MAAM4E,YAAYpJ,UAErCC,EAAAA,EAAAA,GAACsH,EAAAA,EAAK,CACJpH,YAAY,iFACZgI,YAAa,WAAWzD,KAAKF,MAAM4E,YACnCkD,IAAK5H,KAAKoH,kBACV,cAAY,0BAKtB,EAGK,MAAM3C,EAAayC,C,sGCtE1B,MAUMiB,EAAUrD,OAASsD,UAAW,CAAEC,OACpC,MAAMC,GAAgBC,EAAAA,EAAAA,OAAMF,EAXS,KAYrC,OAAO5H,QAAQC,IACb4H,EAAc7K,KAAK+K,IACjB,MAAMC,EAAc,IAAIC,gBACxB,IAAK,MAAM1N,KAAMwN,EACfC,EAAYE,OAAO,YAAa3N,GAElC,OAAO4N,EAAAA,EAAAA,IACLC,EAAAA,EAAAA,IAAW,8CAA8CJ,EAAYK,cACrE,MACD,IAEJ,EAMUC,EAA0BA,EAEnCC,YAIFC,KAEA,MAAM,KAAEC,EAAI,UAAEC,EAAS,WAAEC,EAAU,QAAEC,EAAO,MAAEC,IAAUC,EAAAA,EAAAA,GAA6D,CACnHnB,UA9BiBC,EA8Ba,OAARW,QAAQ,IAARA,EAAAA,EAAY,GA9BsB,CAAC,oBAAqBX,IA+B9EF,UACAb,OAASkC,GAAmB,OAAPA,QAAO,IAAPA,OAAO,EAAPA,EAASC,SAASC,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQC,SAAU,KACpEC,OAAO,KACJX,IAlCcZ,MAqCnB,MAAO,CACLc,YACAC,aACAF,OACAG,UACAC,QACD,C,4FCvCI,MAAMhI,UAAqB1B,EAAAA,UAChCC,WAAAA,CAAYC,GACVC,MAAMD,GAAO,KAKfpF,MAAQ,CACNmP,cAAc,GALd7J,KAAK8J,sBAAwB9J,KAAK8J,sBAAsB5J,KAAKF,MAC7DA,KAAK+J,oBAAsB/J,KAAK+J,oBAAoB7J,KAAKF,KAC3D,CAMA8J,qBAAAA,GACO9J,KAAKtF,MAAMmP,cACd7J,KAAKF,MAAM0B,SAEf,CAEAuI,mBAAAA,GAEE,OADA/J,KAAKgK,SAAS,CAAEH,cAAc,IACvB7J,KAAKF,MAAMG,eAAegK,SAAQ,KACvCjK,KAAKF,MAAM0B,UACXxB,KAAKgK,SAAS,CAAEH,cAAc,GAAQ,GAE1C,CAEA1I,MAAAA,GACE,OACE5F,EAAAA,EAAAA,GAAC2O,EAAAA,EAAK,CACJ,cAAY,gBACZzI,MAAOzB,KAAKF,MAAM2B,MAClBmD,QAAS5E,KAAKF,MAAMyB,OACpB4I,KAAMnK,KAAK+J,oBACXvF,OAAQxE,KAAKF,MAAM+B,kBACnBuI,cAAepK,KAAKF,MAAMuK,mBAC1BC,eAAgBtK,KAAKtF,MAAMmP,aAC3BU,SAAUvK,KAAK8J,sBAEfU,UAAQ,EAAAlP,UAERC,EAAAA,EAAAA,GAAA,OAAKkP,UAAU,yBAAwBnP,SAAE0E,KAAKF,MAAM8B,YAG1D,E","sources":["experiment-tracking/components/runs-charts/components/RunsChartsGlobalChartSettingsDropdown.tsx","common/hooks/useIsTabActive.tsx","common/utils/MarkdownUtils.ts","experiment-tracking/components/modals/DeleteRunModal.tsx","experiment-tracking/components/runs-charts/components/RunsChartsFilterInput.tsx","experiment-tracking/components/modals/RenameRunModal.tsx","experiment-tracking/components/experiment-page/hooks/usePopulateImagesByRunUuid.tsx","experiment-tracking/components/modals/RenameForm.tsx","experiment-tracking/hooks/logged-models/useGetLoggedModelsQuery.tsx","experiment-tracking/components/modals/ConfirmModal.tsx"],"sourcesContent":["import { Button, CheckIcon, DropdownMenu, GearIcon, Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunsChartsGlobalLineChartConfig } from '../../experiment-page/models/ExperimentPageUIState';\nimport { isUndefined } from 'lodash';\nimport { RunsChartsLineChartXAxisType } from './RunsCharts.common';\nimport { useCallback } from 'react';\nimport { LineSmoothSlider } from '../../LineSmoothSlider';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RunsChartsUIConfigurationSetter } from '../hooks/useRunsChartsUIConfiguration';\n\nexport const RunsChartsGlobalChartSettingsDropdown = ({\n  globalLineChartConfig,\n  metricKeyList,\n  updateUIState,\n}: {\n  metricKeyList: string[];\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n  updateUIState: (stateSetter: RunsChartsUIConfigurationSetter) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  const { lineSmoothness, selectedXAxisMetricKey, xAxisKey } = globalLineChartConfig || {};\n\n  const updateGlobalLineChartSettings = useCallback(\n    (newSettings: Partial<RunsChartsGlobalLineChartConfig>) =>\n      updateUIState((state) => ({\n        ...state,\n        globalLineChartConfig: {\n          ...state.globalLineChartConfig,\n          ...newSettings,\n        },\n      })),\n    [updateUIState],\n  );\n\n  const isUsingGlobalMetricXaxis = xAxisKey === RunsChartsLineChartXAxisType.METRIC;\n\n  const label = intl.formatMessage({\n    defaultMessage: 'Configure charts',\n    description: 'Experiment page > view controls > global settings for line chart view > dropdown button label',\n  });\n\n  return (\n    <DropdownMenu.Root modal={false}>\n      <Tooltip\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_44\"\n        content={label}\n      >\n        <DropdownMenu.Trigger asChild>\n          <Button\n            componentId=\"mlflow.charts.controls.global_chart_setup_dropdown\"\n            icon={<GearIcon />}\n            aria-label={label}\n          />\n        </DropdownMenu.Trigger>\n      </Tooltip>\n      <DropdownMenu.Content align=\"end\" css={{ minWidth: 300 }}>\n        <DropdownMenu.Group\n          role=\"region\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'X-axis',\n            description:\n              'Experiment page > view controls > global settings for line chart view > settings for x-axis section label',\n          })}\n        >\n          <DropdownMenu.Label css={{ display: 'flex', gap: 8 }}>\n            <FormattedMessage\n              defaultMessage=\"X-axis\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis section label\"\n            />\n          </DropdownMenu.Label>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_68\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.STEP}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.STEP })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Step\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use step axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_78\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.TIME}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.TIME })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Time (wall)\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use wall time axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_88\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.TIME_RELATIVE })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Time (relative)\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use relative time axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.Sub>\n            <DropdownMenu.SubTrigger\n              css={{\n                paddingLeft: theme.spacing.xs + theme.spacing.sm,\n              }}\n            >\n              <DropdownMenu.IconWrapper>\n                <CheckIcon\n                  css={{\n                    visibility: isUsingGlobalMetricXaxis ? 'visible' : 'hidden',\n                  }}\n                />\n              </DropdownMenu.IconWrapper>\n              <FormattedMessage\n                defaultMessage=\"Metric\"\n                description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use metric axis in all charts\"\n              />\n            </DropdownMenu.SubTrigger>\n            <DropdownMenu.SubContent css={{ maxHeight: 300, overflow: 'auto' }}>\n              {metricKeyList.map((metricKey) => (\n                <DropdownMenu.CheckboxItem\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_118\"\n                  key={metricKey}\n                  checked={selectedXAxisMetricKey === metricKey && isUsingGlobalMetricXaxis}\n                  onClick={() =>\n                    updateGlobalLineChartSettings({\n                      xAxisKey: RunsChartsLineChartXAxisType.METRIC,\n                      selectedXAxisMetricKey: metricKey,\n                    })\n                  }\n                >\n                  <DropdownMenu.ItemIndicator />\n                  {metricKey}\n                </DropdownMenu.CheckboxItem>\n              ))}\n            </DropdownMenu.SubContent>\n          </DropdownMenu.Sub>\n        </DropdownMenu.Group>\n        <DropdownMenu.Group\n          role=\"region\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Line smoothing',\n            description:\n              'Runs charts > line chart > configuration > label for line smoothing slider control. The control allows changing data trace line smoothness from 1 to 100, where 1 is the original data trace and 100 is the smoothest trace. Line smoothing helps eliminate noise in the data.',\n          })}\n        >\n          <DropdownMenu.Label>\n            <FormattedMessage\n              defaultMessage=\"Line smoothing\"\n              description=\"Runs charts > line chart > configuration > label for line smoothing slider control. The control allows changing data trace line smoothness from 1 to 100, where 1 is the original data trace and 100 is the smoothest trace. Line smoothing helps eliminate noise in the data.\"\n            />\n          </DropdownMenu.Label>\n\n          <div css={{ padding: theme.spacing.sm }}>\n            <LineSmoothSlider\n              min={0}\n              max={100}\n              onChange={(lineSmoothness) => updateGlobalLineChartSettings({ lineSmoothness })}\n              value={lineSmoothness ? lineSmoothness : 0}\n            />\n          </div>\n        </DropdownMenu.Group>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { useEffect, useState } from 'react';\n\n/**\n * Hook that returns whether the browser tab is active or not.\n * @returns true if the tab is active, false otherwise\n */\nexport const useIsTabActive = () => {\n  const [isTabActive, setIsTabActive] = useState(document.visibilityState === 'visible');\n  useEffect(() => {\n    document.addEventListener('visibilitychange', (x) => {\n      setIsTabActive(document.visibilityState === 'visible');\n    });\n  }, []);\n  return isTabActive;\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { useCallback } from 'react';\nimport sanitizeHtml from 'sanitize-html';\n// @ts-expect-error TS(7016): Could not find a declaration file for module 'show... Remove this comment to see the full error message\nimport { Converter } from 'showdown';\n\n// Use Github-like Markdown (i.e. support for tasklists, strikethrough,\n// simple line breaks, code blocks, emojis)\nconst DEFAULT_MARKDOWN_FLAVOR = 'github';\n\nlet _converter: Converter | null = null;\n\nexport const getMarkdownConverter = () => {\n  // Reuse the same converter instance if available\n  if (_converter) {\n    return _converter;\n  }\n  _converter = new Converter();\n  _converter.setFlavor(DEFAULT_MARKDOWN_FLAVOR);\n  return _converter;\n};\n\n// Options for HTML sanitizer.\n// See https://www.npmjs.com/package/sanitize-html#what-are-the-default-options for usage.\n// These options were chosen to be similar to Github's allowlist but simpler (i.e. we don't\n// do any transforms of the contained HTML and we disallow script entirely instead of\n// removing contents).\nconst sanitizerOptions = {\n  allowedTags: [\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'h7',\n    'h8',\n    'blockquote',\n    'p',\n    'a',\n    'ul',\n    'ol',\n    'nl',\n    'li',\n    'ins',\n    'b',\n    'i',\n    'strong',\n    'em',\n    'strike',\n    'code',\n    'hr',\n    'br',\n    'div',\n    'table',\n    'thead',\n    'tbody',\n    'tr',\n    'th',\n    'td',\n    'pre',\n    'del',\n    'sup',\n    'sub',\n    'dl',\n    'dt',\n    'dd',\n    'kbd',\n    'q',\n    'samp',\n    'samp',\n    'var',\n    'hr',\n    'rt',\n    'rp',\n    'summary',\n    'iframe',\n    'img',\n    'caption',\n    'figure',\n  ],\n  allowedAttributes: {\n    a: ['href', 'name', 'target'],\n    img: ['src', 'longdesc'],\n    div: ['itemscope', 'itemtype'],\n  },\n};\n\nexport const sanitizeConvertedHtml = (dirtyHtml: any) => {\n  return sanitizeHtml(dirtyHtml, sanitizerOptions);\n};\n\nexport const forceAnchorTagNewTab = (html: any) => {\n  return html.replace(new RegExp('<a', 'g'), '<a target=\"_blank\"');\n};\n\nexport const useMarkdownConverter = () =>\n  useCallback((markdown?: string) => {\n    const converter = getMarkdownConverter();\n    const html = converter.makeHtml(markdown);\n    return sanitizeConvertedHtml(html);\n  }, []);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { ConfirmModal } from './ConfirmModal';\nimport { deleteRunApi, openErrorModal } from '../../actions';\nimport { connect } from 'react-redux';\nimport Utils from '../../../common/utils/Utils';\nimport { IntlShape, injectIntl } from 'react-intl';\n\ntype Props = {\n  isOpen: boolean;\n  onClose: (...args: any[]) => any;\n  selectedRunIds: string[];\n  openErrorModal: (...args: any[]) => any;\n  deleteRunApi: (...args: any[]) => any;\n  onSuccess?: () => void;\n  intl: IntlShape;\n};\n\nexport class DeleteRunModalImpl extends Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const deletePromises: any = [];\n    this.props.selectedRunIds.forEach((runId) => {\n      deletePromises.push(this.props.deleteRunApi(runId));\n    });\n    return Promise.all(deletePromises)\n      .catch(() => {\n        const errorModalContent = `${this.props.intl.formatMessage({\n          defaultMessage: 'While deleting an experiment run, an error occurred.',\n          description: 'Experiment tracking > delete run modal > error message',\n        })}`;\n        this.props.openErrorModal(errorModalContent);\n      })\n      .then(() => {\n        this.props.onSuccess?.();\n      });\n  }\n\n  render() {\n    const number = this.props.selectedRunIds.length;\n    return (\n      <ConfirmModal\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        handleSubmit={this.handleSubmit}\n        title={`Delete Experiment ${Utils.pluralize('Run', number)}`}\n        helpText={\n          <div>\n            <p>\n              <b>\n                {number} experiment {Utils.pluralize('run', number)} will be deleted.\n              </b>\n            </p>\n            {/* @ts-expect-error TS(4111): Property 'MLFLOW_SHOW_GDPR_PURGING_MESSAGES' comes from a... Remove this comment to see the full error message */}\n            {process.env.MLFLOW_SHOW_GDPR_PURGING_MESSAGES === 'true' ? (\n              <p>\n                Deleted runs are restorable for 30 days, after which they are purged along with associated metrics,\n                params, tags, and artifacts.\n              </p>\n            ) : (\n              ''\n            )}\n          </div>\n        }\n        confirmButtonText=\"Delete\"\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteRunApi,\n  openErrorModal,\n};\n\nexport default connect(null, mapDispatchToProps)(injectIntl(DeleteRunModalImpl));\n","import { useCallback, useState } from 'react';\nimport { useUpdateRunsChartsUIConfiguration } from '../hooks/useRunsChartsUIConfiguration';\nimport { useIntl } from 'react-intl';\nimport { Input, SearchIcon, Spinner, useDesignSystemTheme } from '@databricks/design-system';\nimport { useDebouncedCallback } from 'use-debounce';\n\nexport const RunsChartsFilterInput = ({ chartsSearchFilter }: { chartsSearchFilter?: string }) => {\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n  const { theme } = useDesignSystemTheme();\n\n  const [inputValue, setInputValue] = useState(() => chartsSearchFilter ?? '');\n  const [searching, setSearching] = useState(false);\n\n  const { formatMessage } = useIntl();\n\n  const updateChartFilter = useCallback(\n    (value: string) => {\n      updateChartsUIState((current) => ({\n        ...current,\n        chartsSearchFilter: value,\n      }));\n      setSearching(false);\n    },\n    [updateChartsUIState],\n  );\n\n  const updateChartFilterDebounced = useDebouncedCallback(updateChartFilter, 150);\n\n  return (\n    <Input\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsfilterinput.tsx_30\"\n      role=\"searchbox\"\n      prefix={\n        <div css={{ width: theme.general.iconFontSize, lineHeight: 0 }}>\n          {searching ? <Spinner size=\"small\" /> : <SearchIcon />}\n        </div>\n      }\n      value={inputValue}\n      allowClear\n      onChange={(e) => {\n        setInputValue(e.target.value);\n        setSearching(true);\n        updateChartFilterDebounced(e.target.value);\n      }}\n      placeholder={formatMessage({\n        defaultMessage: 'Search metric charts',\n        description: 'Run page > Charts tab > Filter metric charts input > placeholder',\n      })}\n    />\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { IntlShape, injectIntl } from 'react-intl';\n\nimport { GenericInputModal } from './GenericInputModal';\nimport { RenameForm, NEW_NAME_FIELD } from './RenameForm';\n\nimport { updateRunApi } from '../../actions';\nimport { getUUID } from '../../../common/utils/ActionUtils';\n\ntype Props = {\n  isOpen?: boolean;\n  runUuid: string;\n  runName: string;\n  onClose: () => void;\n  updateRunApi: (runId: string, newName: string, id: string) => any;\n  intl: IntlShape;\n  onSuccess?: () => void;\n};\n\nclass RenameRunModalImpl extends Component<Props> {\n  formRef = React.createRef();\n\n  handleRenameRun = (values: Record<string, string>) => {\n    // get value of input field\n    const newRunName = values[NEW_NAME_FIELD];\n\n    const updateRunRequestId = getUUID();\n\n    return this.props\n      .updateRunApi(this.props.runUuid, newRunName, updateRunRequestId)\n      .then(() => this.props.onSuccess?.());\n  };\n\n  render() {\n    const { isOpen = false, runName } = this.props;\n    return (\n      <GenericInputModal\n        title={this.props.intl.formatMessage({\n          defaultMessage: 'Rename Run',\n          description: 'Modal title to rename the experiment run name',\n        })}\n        okText={this.props.intl.formatMessage({\n          defaultMessage: 'Save',\n          description: 'Modal button text to save the changes to rename the experiment run name',\n        })}\n        isOpen={isOpen}\n        handleSubmit={this.handleRenameRun}\n        onClose={this.props.onClose}\n      >\n        <RenameForm\n          type=\"run\"\n          name={runName}\n          innerRef={this.formRef}\n          visible={isOpen}\n          validator={async (_, value) => {\n            if (typeof value === 'string' && value.length && !value.trim()) {\n              throw new Error(\n                this.props.intl.formatMessage({\n                  defaultMessage: 'Run name cannot consist only of whitespace!',\n                  description: \"An error shown when user sets the run's name to whitespace characters only\",\n                }),\n              );\n            }\n            return true;\n          }}\n        />\n      </GenericInputModal>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  updateRunApi,\n};\n\nexport const RenameRunModalWithIntl = injectIntl(RenameRunModalImpl);\nexport const RenameRunModal = connect(undefined, mapDispatchToProps)(RenameRunModalWithIntl);\n","import Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport { listImagesApi } from '@mlflow/mlflow/src/experiment-tracking/actions';\nimport { EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '@mlflow/mlflow/src/redux-types';\nimport { NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE } from '@mlflow/mlflow/src/experiment-tracking/constants';\n\nexport const usePopulateImagesByRunUuid = ({\n  runUuids,\n  runUuidsIsActive,\n  autoRefreshEnabled,\n  enabled,\n}: {\n  runUuids: string[];\n  runUuidsIsActive: boolean[];\n  autoRefreshEnabled?: boolean;\n  enabled?: boolean;\n}) => {\n  // Retrieve image keys for each run. This should only re-render when the runUuids change.\n  // This populates the imagesByRunUuid with imageKeys, which will be used elsewhere to fetch metadata.\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  /**\n   * The criteria to populate images for a run is\n   * 1. The run is not hidden\n   * 2. The run includes the mlflow.loggedImage tag\n   * 3. The run's image is not already populated\n   */\n  // We need to use a serialized version of runUuids to avoid re-triggering the effect when using an array.\n  const runUuidsSerialized = runUuids.slice(0, NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE).join(',');\n  useEffect(() => {\n    // Regular single fetch event with no auto-refresh capabilities. Used if auto-refresh is disabled.\n    if (!enabled || autoRefreshEnabled) {\n      return;\n    }\n    runUuidsSerialized.split(',').forEach((runUuid) => {\n      if (runUuid) {\n        dispatch(listImagesApi(runUuid));\n      }\n    });\n  }, [runUuidsSerialized, dispatch, autoRefreshEnabled, enabled]);\n\n  const refreshTimeoutRef = useRef<number | undefined>(undefined);\n  const autoRefreshEnabledRef = useRef(autoRefreshEnabled && enabled);\n  autoRefreshEnabledRef.current = autoRefreshEnabled;\n\n  const runUuidsIsActiveSerialized = runUuidsIsActive.slice(0, NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE).join(',');\n  // A fetch effect with auto-refresh capabilities. Used only if auto-refresh is enabled.\n  useEffect(() => {\n    let hookUnmounted = false;\n\n    if (!enabled || !autoRefreshEnabled) {\n      return;\n    }\n\n    const fetchImagesFn = async (autoRefresh: boolean) => {\n      const runUuids = runUuidsSerialized.split(',');\n\n      const activeRunUuids = runUuidsIsActiveSerialized.split(',');\n      // If auto-refresh is enabled, only fetch images for runs that are currently active\n      const filteredRunUuids = autoRefresh ? runUuids.filter((_, index) => activeRunUuids[index] === 'true') : runUuids;\n\n      filteredRunUuids.forEach((runUuid) => {\n        if (runUuid) {\n          dispatch(listImagesApi(runUuid, autoRefresh));\n        }\n      });\n    };\n\n    const scheduleRefresh = async () => {\n      // Initial check to confirm that auto-refresh is still enabled and the hook is still mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n      try {\n        await fetchImagesFn(true);\n      } catch (e) {\n        // In case of error during auto-refresh, log the error but do break the auto-refresh loop\n        Utils.logErrorAndNotifyUser(e);\n      }\n      clearTimeout(refreshTimeoutRef.current);\n\n      // After loading the data, schedule the next refresh if the hook is still enabled and mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n\n      refreshTimeoutRef.current = window.setTimeout(scheduleRefresh, EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL);\n    };\n\n    fetchImagesFn(false).then(scheduleRefresh);\n\n    return () => {\n      fetchImagesFn(true);\n      // Mark the hook as unmounted to prevent scheduling new auto-refreshes with current data\n      hookUnmounted = true;\n      // Clear the timeout\n      clearTimeout(refreshTimeoutRef.current);\n    };\n  }, [dispatch, runUuidsSerialized, runUuidsIsActiveSerialized, autoRefreshEnabled, enabled]);\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\n\nimport { LegacyForm, Input } from '@databricks/design-system';\n\nexport const NEW_NAME_FIELD = 'newName';\n\ntype Props = {\n  type: string;\n  name: string;\n  visible: boolean;\n  validator?: (...args: any[]) => any;\n  innerRef: any;\n};\n\n/**\n * Component that renders a form for updating a run's or experiment's name.\n */\nclass RenameFormComponent extends Component<Props> {\n  inputToAutoFocus: any;\n\n  componentDidUpdate(prevProps: Props) {\n    this.autoFocus(prevProps);\n    this.resetFields(prevProps);\n  }\n\n  autoFocusInputRef = (inputToAutoFocus: any) => {\n    this.inputToAutoFocus = inputToAutoFocus;\n    inputToAutoFocus && inputToAutoFocus.focus();\n    inputToAutoFocus && inputToAutoFocus.select();\n  };\n\n  autoFocus = (prevProps: any) => {\n    if (prevProps.visible === false && this.props.visible === true) {\n      // focus on input field\n      this.inputToAutoFocus && this.inputToAutoFocus.focus();\n      // select text\n      this.inputToAutoFocus && this.inputToAutoFocus.select();\n    }\n  };\n\n  resetFields = (prevProps: any) => {\n    const formRef = this.props.innerRef;\n    if (prevProps.name !== this.props.name) {\n      // reset input field to reset displayed initialValue\n      formRef.current.resetFields([NEW_NAME_FIELD]);\n    }\n  };\n\n  render() {\n    return (\n      // @ts-expect-error TS(2322): Type '{ children: Element; ref: any; layout: \"vert... Remove this comment to see the full error message\n      <LegacyForm ref={this.props.innerRef} layout=\"vertical\">\n        <LegacyForm.Item\n          name={NEW_NAME_FIELD}\n          initialValue={this.props.name}\n          rules={[\n            { required: true, message: `Please input a new name for the ${this.props.type}.` },\n            { validator: this.props.validator },\n          ]}\n          label={`New ${this.props.type} name`}\n        >\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_modals_renameform.tsx_69\"\n            placeholder={`Input a ${this.props.type} name`}\n            ref={this.autoFocusInputRef}\n            data-testid=\"rename-modal-input\"\n          />\n        </LegacyForm.Item>\n      </LegacyForm>\n    );\n  }\n}\n\nexport const RenameForm = RenameFormComponent;\n","import {\n  type QueryFunctionContext,\n  useQuery,\n  type UseQueryOptions,\n} from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { LoggedModelProto } from '../../types';\nimport { loggedModelsDataRequest } from './request.utils';\nimport { chunk } from 'lodash';\nimport { getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\nconst LOGGED_MODEL_BY_ID_BATCH_LIMIT = 100; // API supports batch size of 100\n\ntype QueryResult = {\n  models?: LoggedModelProto[];\n};\n\ntype QueryKey = ['GET_LOGGED_MODELS', string[]];\n\nconst getQueryKey = (loggedModelIds: string[]): QueryKey => ['GET_LOGGED_MODELS', loggedModelIds] as const;\n\nconst queryFn = async ({ queryKey: [, loggedModelIds] }: QueryFunctionContext<QueryKey>): Promise<QueryResult[]> => {\n  const modelIdChunks = chunk(loggedModelIds, LOGGED_MODEL_BY_ID_BATCH_LIMIT);\n  return Promise.all<QueryResult>(\n    modelIdChunks.map((chunkedIds) => {\n      const queryParams = new URLSearchParams();\n      for (const id of chunkedIds) {\n        queryParams.append('model_ids', id);\n      }\n      return loggedModelsDataRequest(\n        getAjaxUrl(`ajax-api/2.0/mlflow/logged-models:batchGet?${queryParams.toString()}`),\n        'GET',\n      );\n    }),\n  );\n};\n\n/**\n * Retrieve many logged model from API based on IDs\n */\nexport const useGetLoggedModelsQuery = (\n  {\n    modelIds,\n  }: {\n    modelIds?: string[];\n  },\n  options: UseQueryOptions<QueryResult[], Error, LoggedModelProto[], QueryKey>,\n) => {\n  const { data, isLoading, isFetching, refetch, error } = useQuery<QueryResult[], Error, LoggedModelProto[], QueryKey>({\n    queryKey: getQueryKey(modelIds ?? []),\n    queryFn,\n    select: (results) => results?.flatMap((result) => result?.models || []),\n    retry: false,\n    ...options,\n  });\n\n  return {\n    isLoading,\n    isFetching,\n    data,\n    refetch,\n    error,\n  } as const;\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { Modal, ModalProps } from '@databricks/design-system';\n\ntype Props = {\n  isOpen: boolean;\n  handleSubmit: (...args: any[]) => any;\n  onClose: (...args: any[]) => any;\n  title: React.ReactNode;\n  helpText: React.ReactNode;\n  confirmButtonText: React.ReactNode;\n  confirmButtonProps?: ModalProps['okButtonProps'];\n};\n\ntype State = any;\n\nexport class ConfirmModal extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.onRequestCloseHandler = this.onRequestCloseHandler.bind(this);\n    this.handleSubmitWrapper = this.handleSubmitWrapper.bind(this);\n  }\n\n  state = {\n    isSubmitting: false,\n  };\n\n  onRequestCloseHandler() {\n    if (!this.state.isSubmitting) {\n      this.props.onClose();\n    }\n  }\n\n  handleSubmitWrapper() {\n    this.setState({ isSubmitting: true });\n    return this.props.handleSubmit().finally(() => {\n      this.props.onClose();\n      this.setState({ isSubmitting: false });\n    });\n  }\n\n  render() {\n    return (\n      <Modal\n        data-testid=\"confirm-modal\"\n        title={this.props.title}\n        visible={this.props.isOpen}\n        onOk={this.handleSubmitWrapper}\n        okText={this.props.confirmButtonText}\n        okButtonProps={this.props.confirmButtonProps}\n        confirmLoading={this.state.isSubmitting}\n        onCancel={this.onRequestCloseHandler}\n        // @ts-expect-error TS(2322): Type '{ children: Element; \"data-testid\": string; ... Remove this comment to see the full error message\n        centered\n      >\n        <div className=\"modal-explanatory-text\">{this.props.helpText}</div>\n      </Modal>\n    );\n  }\n}\n"],"names":["_ref","name","styles","_ref2","_ref3","RunsChartsGlobalChartSettingsDropdown","globalLineChartConfig","metricKeyList","updateUIState","theme","useDesignSystemTheme","intl","useIntl","lineSmoothness","selectedXAxisMetricKey","xAxisKey","updateGlobalLineChartSettings","useCallback","newSettings","state","isUsingGlobalMetricXaxis","RunsChartsLineChartXAxisType","METRIC","label","formatMessage","id","defaultMessage","_jsxs","DropdownMenu","Root","modal","children","_jsx","Tooltip","componentId","content","Trigger","asChild","Button","icon","GearIcon","Content","align","css","Group","role","Label","FormattedMessage","CheckboxItem","checked","STEP","onClick","ItemIndicator","TIME","TIME_RELATIVE","Sub","SubTrigger","_css","paddingLeft","spacing","xs","sm","IconWrapper","CheckIcon","visibility","SubContent","map","metricKey","padding","LineSmoothSlider","min","max","onChange","value","useIsTabActive","isTabActive","setIsTabActive","useState","document","visibilityState","useEffect","addEventListener","x","_converter","getMarkdownConverter","Converter","setFlavor","sanitizerOptions","allowedTags","allowedAttributes","a","img","div","sanitizeConvertedHtml","dirtyHtml","sanitizeHtml","forceAnchorTagNewTab","html","replace","RegExp","DeleteRunModalImpl","Component","constructor","props","super","this","handleSubmit","bind","deletePromises","selectedRunIds","forEach","runId","push","deleteRunApi","Promise","all","catch","errorModalContent","openErrorModal","then","_this$props$onSuccess","_this$props","onSuccess","call","render","number","length","ConfirmModal","isOpen","onClose","title","Utils","pluralize","helpText","confirmButtonText","mapDispatchToProps","connect","injectIntl","RunsChartsFilterInput","chartsSearchFilter","updateChartsUIState","useUpdateRunsChartsUIConfiguration","inputValue","setInputValue","searching","setSearching","updateChartFilter","current","updateChartFilterDebounced","useDebouncedCallback","Input","prefix","width","general","iconFontSize","lineHeight","Spinner","size","SearchIcon","allowClear","e","target","placeholder","RenameRunModalImpl","args","formRef","React","handleRenameRun","values","newRunName","NEW_NAME_FIELD","updateRunRequestId","getUUID","updateRunApi","runUuid","runName","GenericInputModal","okText","RenameForm","type","innerRef","visible","validator","async","_","trim","Error","RenameRunModalWithIntl","RenameRunModal","undefined","usePopulateImagesByRunUuid","runUuids","runUuidsIsActive","autoRefreshEnabled","enabled","dispatch","useDispatch","runUuidsSerialized","slice","NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE","join","split","listImagesApi","refreshTimeoutRef","useRef","autoRefreshEnabledRef","runUuidsIsActiveSerialized","hookUnmounted","fetchImagesFn","activeRunUuids","autoRefresh","filter","index","scheduleRefresh","logErrorAndNotifyUser","clearTimeout","window","setTimeout","EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL","RenameFormComponent","inputToAutoFocus","autoFocusInputRef","focus","select","autoFocus","prevProps","resetFields","componentDidUpdate","LegacyForm","ref","layout","Item","initialValue","rules","required","message","queryFn","queryKey","loggedModelIds","modelIdChunks","chunk","chunkedIds","queryParams","URLSearchParams","append","loggedModelsDataRequest","getAjaxUrl","toString","useGetLoggedModelsQuery","modelIds","options","data","isLoading","isFetching","refetch","error","useQuery","results","flatMap","result","models","retry","isSubmitting","onRequestCloseHandler","handleSubmitWrapper","setState","finally","Modal","onOk","okButtonProps","confirmButtonProps","confirmLoading","onCancel","centered","className"],"sourceRoot":""}