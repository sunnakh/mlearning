{"version":3,"file":"static/js/9513.50df1031.chunk.js","mappings":"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","sources":["experiment-tracking/components/run-page/RunViewArtifactTab.tsx","experiment-tracking/components/run-page/useRunViewActiveTab.tsx","experiment-tracking/components/run-page/RunViewModeSwitch.tsx","experiment-tracking/components/run-page/RunViewHeaderRegisterModelButton.tsx","experiment-tracking/components/run-page/RunViewHeader.tsx","experiment-tracking/components/run-page/overview/RunViewStatusBox.tsx","experiment-tracking/components/run-page/overview/RunViewUserLinkBox.tsx","experiment-tracking/components/run-page/overview/RunViewMetricsTable.tsx","experiment-tracking/components/run-page/overview/RunViewDatasetBox.tsx","experiment-tracking/components/run-page/overview/RunViewParentRunBox.tsx","experiment-tracking/components/run-page/overview/RunViewTagsBox.tsx","experiment-tracking/components/run-page/overview/RunViewDescriptionBox.tsx","experiment-tracking/components/run-page/overview/RunViewRegisteredModelsBox.tsx","experiment-tracking/pages/prompts/hooks/usePromptVersionsForRunQuery.tsx","experiment-tracking/components/run-page/overview/RunViewRegisteredPromptsBox.tsx","experiment-tracking/components/run-page/overview/RunViewLoggedModelsBox.tsx","experiment-tracking/components/run-page/overview/RunViewSourceBox.tsx","experiment-tracking/components/run-page/overview/RunViewLoggedModelsTable.tsx","experiment-tracking/hooks/logged-models/useCombinedRunInputsOutputsModels.tsx","experiment-tracking/components/run-page/overview/RunViewDatasetBoxV2.tsx","experiment-tracking/components/run-page/hooks/useRunDetailsPageOverviewSectionsV2.tsx","experiment-tracking/components/run-page/RunViewOverview.tsx","experiment-tracking/components/RunNotFoundView.tsx","experiment-tracking/components/run-page/RunViewChartTooltipBody.tsx","experiment-tracking/components/run-page/RunViewMetricCharts.tsx","experiment-tracking/components/run-page/RunViewTracesTab.tsx","experiment-tracking/components/experiment-page/hooks/useLoggedModelsForExperimentRunV2.tsx","experiment-tracking/components/run-page/RunPage.tsx","experiment-tracking/components/experiment-page/hooks/useLoggedModelsForExperimentRun.tsx","graphql/get-graphql-error.ts","common/components/PageContainer.tsx","experiment-tracking/components/NotFoundPage.tsx"],"sourcesContent":["import { useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../../../common/types';\nimport ArtifactPage from '../ArtifactPage';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { UseGetRunQueryResponseOutputs } from './hooks/useGetRunQuery';\n\n/**\n * A run page tab containing the artifact browser\n */\nexport const RunViewArtifactTab = ({\n  runTags,\n  experimentId,\n  runOutputs,\n  artifactUri,\n  runUuid,\n}: {\n  runUuid: string;\n  experimentId: string;\n  artifactUri?: string;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  runTags: Record<string, KeyValueEntity>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // Use scrollable artifact area only for non-xs screens\n  const useFullHeightPage = useMediaQuery(`(min-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        overflow: 'hidden',\n        display: 'flex',\n        paddingBottom: theme.spacing.md,\n        position: 'relative',\n      }}\n    >\n      <ArtifactPage\n        runUuid={runUuid}\n        runTags={runTags}\n        runOutputs={runOutputs}\n        useAutoHeight={useFullHeightPage}\n        artifactRootUri={artifactUri}\n        experimentId={experimentId}\n      />\n    </div>\n  );\n};\n","import { useParams } from '../../../common/utils/RoutingUtils';\nimport { RunPageTabName } from '../../constants';\n\n/**\n * Returns the run view's active tab.\n * - Supports multi-slash artifact paths (hence '*' catch-all param)\n * - Supports both new (/artifacts/...) and previous (/artifactPath/...) routes\n */\nexport const useRunViewActiveTab = (): RunPageTabName => {\n  const { '*': tabParam } = useParams<{ '*': string }>();\n  if (tabParam === 'model-metrics') {\n    return RunPageTabName.MODEL_METRIC_CHARTS;\n  }\n  if (tabParam === 'system-metrics') {\n    return RunPageTabName.SYSTEM_METRIC_CHARTS;\n  }\n  if (tabParam === 'traces') {\n    return RunPageTabName.TRACES;\n  }\n  if (tabParam?.match(/^(artifactPath|artifacts)/)) {\n    return RunPageTabName.ARTIFACTS;\n  }\n\n  return RunPageTabName.OVERVIEW;\n};\n","import { InfoPopover, LegacyTabs, useDesignSystemTheme, Typography } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { RunPageTabName } from '../../constants';\nimport { useRunViewActiveTab } from './useRunViewActiveTab';\nimport { useState } from 'react';\n\n// Set of tabs that when active, the margin of the tab selector should be removed for better displaying\nconst TABS_WITHOUT_MARGIN = [RunPageTabName.ARTIFACTS, RunPageTabName.EVALUATIONS];\n\n/**\n * Mode switcher for the run details page.\n */\nexport const RunViewModeSwitch = () => {\n  const { experimentId, runUuid } = useParams<{ runUuid: string; experimentId: string }>();\n  const navigate = useNavigate();\n  const { theme } = useDesignSystemTheme();\n  const currentTab = useRunViewActiveTab();\n  const [removeTabMargin, setRemoveTabMargin] = useState(TABS_WITHOUT_MARGIN.includes(currentTab));\n\n  const onTabChanged = (newTabKey: string) => {\n    if (!experimentId || !runUuid || currentTab === newTabKey) {\n      return;\n    }\n\n    setRemoveTabMargin(TABS_WITHOUT_MARGIN.includes(newTabKey as RunPageTabName));\n\n    if (newTabKey === RunPageTabName.OVERVIEW) {\n      navigate(Routes.getRunPageRoute(experimentId, runUuid));\n      return;\n    }\n    navigate(Routes.getRunPageTabRoute(experimentId, runUuid, newTabKey));\n  };\n\n  const getLegacyTracesTabLink = () => {\n    return (\n      <LegacyTabs.TabPane\n        tab={<FormattedMessage defaultMessage=\"Traces\" description=\"Run details page > tab selector > Traces tab\" />}\n        key={RunPageTabName.TRACES}\n      />\n    );\n  };\n\n  return (\n    // @ts-expect-error TS(2322)\n    <LegacyTabs activeKey={currentTab} onChange={onTabChanged} tabBarStyle={{ margin: removeTabMargin && '0px' }}>\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage defaultMessage=\"Overview\" description=\"Run details page > tab selector > overview tab\" />\n        }\n        key={RunPageTabName.OVERVIEW}\n      />\n\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage\n            defaultMessage=\"Model metrics\"\n            description=\"Run details page > tab selector > Model metrics tab\"\n          />\n        }\n        key={RunPageTabName.MODEL_METRIC_CHARTS}\n      />\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage\n            defaultMessage=\"System metrics\"\n            description=\"Run details page > tab selector > Model metrics tab\"\n          />\n        }\n        key={RunPageTabName.SYSTEM_METRIC_CHARTS}\n      />\n      {getLegacyTracesTabLink()}\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage defaultMessage=\"Artifacts\" description=\"Run details page > tab selector > artifacts tab\" />\n        }\n        key={RunPageTabName.ARTIFACTS}\n      />\n    </LegacyTabs>\n  );\n};\n","import {\n  Button,\n  ChevronDownIcon,\n  DropdownMenu,\n  NewWindowIcon,\n  Tag,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { first, last, orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { RegisterModel } from '../../../model-registry/components/RegisterModel';\nimport { ModelVersionStatusIcons } from '../../../model-registry/constants';\nimport { ModelRegistryRoutes } from '../../../model-registry/routes';\nimport Routes from '../../routes';\nimport { ModelVersionInfoEntity } from '../../types';\nimport { KeyValueEntity } from '../../../common/types';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../common/static/registered-model-grey-ok.svg';\nimport { RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\n\ninterface LoggedModelWithRegistrationInfo {\n  path: string;\n  absolutePath: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}\n\nfunction LoggedModelsDropdownContent({\n  models,\n  onRegisterClick,\n  experimentId,\n  runUuid,\n}: {\n  models: LoggedModelWithRegistrationInfo[];\n  onRegisterClick: (model: LoggedModelWithRegistrationInfo) => void;\n  experimentId: string;\n  runUuid: string;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const renderSection = (title: string, sectionModels: LoggedModelWithRegistrationInfo[]) => {\n    return (\n      <DropdownMenu.Group>\n        <DropdownMenu.Label>{title}</DropdownMenu.Label>\n        {sectionModels.map((model) => {\n          const registeredModelSummary = first(model.registeredModelVersionSummaries);\n          if (!registeredModelSummary) {\n            return (\n              <DropdownMenu.Item\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_50\"\n                onClick={() => onRegisterClick(model)}\n                key={model.absolutePath}\n              >\n                <div css={{ marginRight: theme.spacing.md }}>{last(model.path.split('/'))}</div>\n                <DropdownMenu.HintColumn>\n                  <Link\n                    target=\"_blank\"\n                    to={Routes.getRunPageTabRoute(experimentId, runUuid, 'artifacts/' + model.path)}\n                  >\n                    <Button\n                      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_58\"\n                      type=\"link\"\n                      size=\"small\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                      }}\n                      endIcon={<NewWindowIcon />}\n                    >\n                      <FormattedMessage\n                        defaultMessage=\"View model\"\n                        description=\"Run page > Header > Register model dropdown > View model button label\"\n                      />\n                    </Button>\n                  </Link>\n                </DropdownMenu.HintColumn>\n              </DropdownMenu.Item>\n            );\n          }\n          const { status, displayedName, version, link } = registeredModelSummary;\n\n          return (\n            <Link target=\"_blank\" to={link} key={model.absolutePath}>\n              <DropdownMenu.Item componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_80\">\n                <DropdownMenu.IconWrapper css={{ display: 'flex', alignItems: 'center' }}>\n                  {status === 'READY' ? <RegisteredModelOkIcon /> : status ? ModelVersionStatusIcons[status] : null}\n                </DropdownMenu.IconWrapper>\n                <span css={{ marginRight: theme.spacing.md }}>\n                  {displayedName}\n                  <Tag\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_90\"\n                    css={{ marginLeft: 8, marginRight: 4 }}\n                  >\n                    v{version}\n                  </Tag>\n                </span>\n                <DropdownMenu.HintColumn>\n                  <Button\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_89\"\n                    type=\"link\"\n                    size=\"small\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                    }}\n                    endIcon={<NewWindowIcon />}\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"Go to model\"\n                      description=\"Run page > Header > Register model dropdown > Go to model button label\"\n                    />\n                  </Button>\n                </DropdownMenu.HintColumn>\n              </DropdownMenu.Item>\n            </Link>\n          );\n        })}\n      </DropdownMenu.Group>\n    );\n  };\n  const registeredModels = models.filter((model) => model.registeredModelVersionSummaries.length > 0);\n  const unregisteredModels = models.filter((model) => !model.registeredModelVersionSummaries.length);\n  return (\n    <>\n      {unregisteredModels.length ? renderSection('Unregistered models', unregisteredModels) : null}\n      {unregisteredModels.length && registeredModels.length ? <DropdownMenu.Separator /> : null}\n      {registeredModels.length ? renderSection('Registered models', registeredModels) : null}\n    </>\n  );\n}\n\nconst getRegisteredModelVersionLink = (modelVersion: ModelVersionInfoEntity) => {\n  const { name, version } = modelVersion;\n  return ModelRegistryRoutes.getModelVersionPageRoute(name, version);\n};\n\nexport const RunViewHeaderRegisterModelButton = ({\n  runUuid,\n  experimentId,\n  runTags,\n  artifactRootUri,\n  registeredModelVersionSummaries,\n}: {\n  runUuid: string;\n  experimentId: string;\n  runTags: Record<string, KeyValueEntity>;\n  artifactRootUri?: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const loggedModelPaths = useMemo(\n    () => (runTags ? Utils.getLoggedModelsFromTags(runTags).map(({ artifactPath }) => artifactPath) : []),\n    [runTags],\n  );\n\n  const models = useMemo<LoggedModelWithRegistrationInfo[]>(\n    () =>\n      orderBy(\n        loggedModelPaths.map((path) => ({\n          path,\n          absolutePath: `${artifactRootUri}/${path}`,\n          registeredModelVersionSummaries:\n            registeredModelVersionSummaries?.filter(({ source }) => source === `${artifactRootUri}/${path}`) || [],\n        })),\n        (model) => parseInt(model.registeredModelVersionSummaries[0]?.version || '0', 10),\n        'desc',\n      ),\n    [loggedModelPaths, registeredModelVersionSummaries, artifactRootUri],\n  );\n\n  const [selectedModelToRegister, setSelectedModelToRegister] = useState<LoggedModelWithRegistrationInfo | null>(null);\n\n  if (models.length > 1) {\n    const modelsRegistered = models.filter((model) => model.registeredModelVersionSummaries.length > 0);\n\n    return (\n      <>\n        {selectedModelToRegister && (\n          <RegisterModel\n            runUuid={runUuid}\n            modelPath={selectedModelToRegister.absolutePath}\n            modelRelativePath={selectedModelToRegister.path}\n            disabled={false}\n            showButton={false}\n            modalVisible\n            onCloseModal={() => setSelectedModelToRegister(null)}\n          />\n        )}\n        <DropdownMenu.Root modal={false}>\n          <LegacyTooltip\n            placement=\"bottom\"\n            title={\n              <FormattedMessage\n                defaultMessage=\"{registeredCount}/{loggedCount} logged models are registered\"\n                description=\"Run page > Header > Register model dropdown > Button tooltip\"\n                values={{ registeredCount: modelsRegistered.length, loggedCount: models.length }}\n              />\n            }\n          >\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_195\"\n                type=\"primary\"\n                endIcon={<ChevronDownIcon />}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Register model\"\n                  description=\"Run page > Header > Register model dropdown > Button label when some models are not registered\"\n                />\n              </Button>\n            </DropdownMenu.Trigger>\n          </LegacyTooltip>\n          <DropdownMenu.Content align=\"end\">\n            <LoggedModelsDropdownContent\n              models={models}\n              onRegisterClick={setSelectedModelToRegister}\n              experimentId={experimentId}\n              runUuid={runUuid}\n            />\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      </>\n    );\n  }\n\n  const singleModel = first(models);\n\n  if (!singleModel) {\n    return null;\n  }\n\n  const registeredModelVersionSummary = first(singleModel.registeredModelVersionSummaries);\n\n  if (registeredModelVersionSummary) {\n    return (\n      <Link to={registeredModelVersionSummary.link} target=\"_blank\" css={{ marginLeft: theme.spacing.sm }}>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_231\"\n          endIcon={<NewWindowIcon />}\n          type=\"link\"\n        >\n          Model registered\n        </Button>\n      </Link>\n    );\n  }\n  return (\n    <RegisterModel\n      disabled={false}\n      runUuid={runUuid}\n      modelPath={singleModel.absolutePath}\n      modelRelativePath={singleModel.path}\n      showButton\n      buttonType=\"primary\"\n    />\n  );\n};\n","import { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { OverflowMenu, PageHeader } from '../../../shared/building_blocks/PageHeader';\nimport Routes, { PageId as ExperimentTrackingPageId } from '../../routes';\nimport type { ExperimentEntity } from '../../types';\nimport { KeyValueEntity } from '../../../common/types';\nimport { RunViewModeSwitch } from './RunViewModeSwitch';\nimport Utils from '../../../common/utils/Utils';\nimport { RunViewHeaderRegisterModelButton } from './RunViewHeaderRegisterModelButton';\nimport type { UseGetRunQueryResponseExperiment } from './hooks/useGetRunQuery';\nimport type { RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { ExperimentPageTabName } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { shouldEnableExperimentPageHeaderV2 } from '../../../common/utils/FeatureUtils';\n\n/**\n * Run details page header component, common for all page view modes\n */\nexport const RunViewHeader = ({\n  hasComparedExperimentsBefore,\n  comparedExperimentIds = [],\n  experiment,\n  runDisplayName,\n  runTags,\n  runParams,\n  runUuid,\n  handleRenameRunClick,\n  handleDeleteRunClick,\n  artifactRootUri,\n  registeredModelVersionSummaries,\n  isLoading,\n}: {\n  hasComparedExperimentsBefore?: boolean;\n  comparedExperimentIds?: string[];\n  runDisplayName: string;\n  runUuid: string;\n  runTags: Record<string, KeyValueEntity>;\n  runParams: Record<string, KeyValueEntity>;\n  experiment: ExperimentEntity | UseGetRunQueryResponseExperiment;\n  handleRenameRunClick: () => void;\n  handleDeleteRunClick?: () => void;\n  artifactRootUri?: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n  isLoading?: boolean;\n}) => {\n  function getExperimentPageLink() {\n    return hasComparedExperimentsBefore && comparedExperimentIds ? (\n      <Link to={Routes.getCompareExperimentsPageRoute(comparedExperimentIds)}>\n        <FormattedMessage\n          defaultMessage=\"Displaying Runs from {numExperiments} Experiments\"\n          // eslint-disable-next-line max-len\n          description=\"Breadcrumb nav item to link to the compare-experiments page on compare runs page\"\n          values={{\n            numExperiments: comparedExperimentIds.length,\n          }}\n        />\n      </Link>\n    ) : (\n      <Link to={Routes.getExperimentPageRoute(experiment?.experimentId ?? '')} data-test-id=\"experiment-runs-link\">\n        {experiment.name}\n      </Link>\n    );\n  }\n\n  const breadcrumbs = [getExperimentPageLink()];\n  if (shouldEnableExperimentPageHeaderV2() && experiment.experimentId) {\n    breadcrumbs.push(\n      <Link\n        to={Routes.getExperimentPageTabRoute(experiment.experimentId, ExperimentPageTabName.Runs)}\n        data-test-id=\"experiment-observatory-link-runs\"\n      >\n        <FormattedMessage\n          defaultMessage=\"Runs\"\n          description=\"Breadcrumb nav item to link to the list of runs on the parent experiment\"\n        />\n      </Link>,\n    );\n  }\n\n  const renderRegisterModelButton = () => {\n    return (\n      <RunViewHeaderRegisterModelButton\n        runUuid={runUuid}\n        experimentId={experiment?.experimentId ?? ''}\n        runTags={runTags}\n        artifactRootUri={artifactRootUri}\n        registeredModelVersionSummaries={registeredModelVersionSummaries}\n      />\n    );\n  };\n\n  return (\n    <div css={{ flexShrink: 0 }}>\n      <PageHeader\n        title={<span data-test-id=\"runs-header\">{runDisplayName}</span>}\n        breadcrumbs={breadcrumbs}\n        /* prettier-ignore */\n      >\n        <OverflowMenu\n          menu={[\n            {\n              id: 'overflow-rename-button',\n              onClick: handleRenameRunClick,\n              itemName: (\n                <FormattedMessage defaultMessage=\"Rename\" description=\"Menu item to rename an experiment run\" />\n              ),\n            },\n            ...(handleDeleteRunClick\n              ? [\n                  {\n                    id: 'overflow-delete-button',\n                    onClick: handleDeleteRunClick,\n                    itemName: (\n                      <FormattedMessage defaultMessage=\"Delete\" description=\"Menu item to delete an experiment run\" />\n                    ),\n                  },\n                ]\n              : []),\n          ]}\n        />\n\n        {renderRegisterModelButton()}\n      </PageHeader>\n      <RunViewModeSwitch />\n    </div>\n  );\n};\n","import { Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { RunInfoEntity } from '../../../types';\nimport { RunStatusIcon } from '../../RunStatusIcon';\nimport { FormattedMessage } from 'react-intl';\nimport type { MlflowRunStatus } from '../../../../graphql/__generated__/graphql';\n\n/**\n * Displays run status cell in run detail overview.\n */\nexport const RunViewStatusBox = ({ status }: { status: RunInfoEntity['status'] | MlflowRunStatus | null }) => {\n  const { theme } = useDesignSystemTheme();\n  const getTagColor = () => {\n    if (status === 'FINISHED') {\n      return theme.isDarkMode ? theme.colors.green800 : theme.colors.green100;\n    }\n    if (status === 'KILLED' || status === 'FAILED') {\n      return theme.isDarkMode ? theme.colors.red800 : theme.colors.red100;\n    }\n    if (status === 'SCHEDULED' || status === 'RUNNING') {\n      return theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100;\n    }\n\n    return undefined;\n  };\n\n  const getStatusLabel = () => {\n    if (status === 'FINISHED') {\n      return (\n        <Typography.Text color=\"success\">\n          <FormattedMessage\n            defaultMessage=\"Finished\"\n            description=\"Run page > Overview > Run status cell > Value for finished state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'KILLED') {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Killed\"\n            description=\"Run page > Overview > Run status cell > Value for killed state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'FAILED') {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Failed\"\n            description=\"Run page > Overview > Run status cell > Value for failed state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'RUNNING') {\n      return (\n        <Typography.Text color=\"info\">\n          <FormattedMessage\n            defaultMessage=\"Running\"\n            description=\"Run page > Overview > Run status cell > Value for running state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'SCHEDULED') {\n      return (\n        <Typography.Text color=\"info\">\n          <FormattedMessage\n            defaultMessage=\"Scheduled\"\n            description=\"Run page > Overview > Run status cell > Value for scheduled state\"\n          />\n        </Typography.Text>\n      );\n    }\n    return status;\n  };\n\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewstatusbox.tsx_81\"\n      css={{ backgroundColor: getTagColor() }}\n    >\n      {status && <RunStatusIcon status={status} />}{' '}\n      <Typography.Text css={{ marginLeft: theme.spacing.sm }}>{getStatusLabel()}</Typography.Text>\n    </Tag>\n  );\n};\n","import { Link } from '../../../../common/utils/RoutingUtils';\nimport Utils from '../../../../common/utils/Utils';\nimport Routes from '../../../routes';\nimport type { RunInfoEntity } from '../../../types';\nimport { KeyValueEntity } from '../../../../common/types';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\nexport const RunViewUserLinkBox = ({\n  runInfo,\n  tags,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n}) => {\n  const user = Utils.getUser(runInfo, tags);\n  return <Link to={Routes.searchRunsByUser(runInfo?.experimentId ?? '', user)}>{user}</Link>;\n};\n","import {\n  Empty,\n  Input,\n  Overflow,\n  SearchIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { LoggedModelProto, MetricEntitiesByName, MetricEntity, RunInfoEntity } from '../../../types';\nimport { compact, flatMap, groupBy, isEmpty, keyBy, mapValues, sum, values } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { FormattedMessage, defineMessages, useIntl } from 'react-intl';\nimport { isSystemMetricKey } from '../../../utils/MetricsUtils';\nimport { ColumnDef, Table as TableDef, flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\nimport { isUndefined } from 'lodash';\nimport { useExperimentTrackingDetailsPageLayoutStyles } from '../../../hooks/useExperimentTrackingDetailsPageLayoutStyles';\n\nconst { systemMetricsLabel, modelMetricsLabel } = defineMessages({\n  systemMetricsLabel: {\n    defaultMessage: 'System metrics',\n    description: 'Run page > Overview > Metrics table > System charts section > title',\n  },\n  modelMetricsLabel: {\n    defaultMessage: 'Model metrics',\n    description: 'Run page > Overview > Metrics table > Model charts section > title',\n  },\n});\n\nconst metricKeyMatchesFilter =\n  (filter: string) =>\n  ({ key }: MetricEntity) =>\n    key.toLowerCase().includes(filter.toLowerCase());\n\ninterface MetricEntityWithLoggedModels extends MetricEntity {\n  loggedModels?: LoggedModelProto[];\n}\n\nconst RunViewMetricsTableSection = ({\n  metricsList,\n  runInfo,\n  header,\n  table,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  metricsList: MetricEntityWithLoggedModels[];\n  header?: React.ReactNode;\n  table: TableDef<MetricEntityWithLoggedModels>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [{ column: keyColumn }, ...otherColumns] = table.getLeafHeaders();\n\n  const valueColumn = otherColumns.find((column) => column.id === 'value')?.column;\n\n  const anyRowHasModels = metricsList.some(({ loggedModels }) => !isEmpty(loggedModels));\n  const modelColumn = otherColumns.find((column) => column.id === 'models')?.column;\n\n  return metricsList.length ? (\n    <>\n      {header && (\n        <TableRow>\n          <TableCell css={{ flex: 1, backgroundColor: theme.colors.backgroundSecondary }}>\n            <Typography.Text bold>\n              {header} ({metricsList.length})\n            </Typography.Text>\n          </TableCell>\n        </TableRow>\n      )}\n      {metricsList.map(\n        ({\n          // Get metric key and value to display in table\n          key,\n          value,\n          loggedModels,\n        }) => (\n          <TableRow key={key}>\n            <TableCell\n              style={{\n                flex: keyColumn.getCanResize() ? keyColumn.getSize() / 100 : undefined,\n              }}\n            >\n              <Link to={Routes.getMetricPageRoute([runInfo.runUuid ?? ''], key, [runInfo.experimentId ?? ''])}>\n                {key}\n              </Link>\n            </TableCell>\n            <TableCell\n              css={{\n                flex: valueColumn?.getCanResize() ? valueColumn.getSize() / 100 : undefined,\n              }}\n            >\n              {value.toString()}\n            </TableCell>\n            {anyRowHasModels && (\n              <TableCell\n                css={{\n                  flex: modelColumn?.getCanResize() ? modelColumn.getSize() / 100 : undefined,\n                }}\n              >\n                {!isEmpty(loggedModels) ? (\n                  <Overflow>\n                    {loggedModels?.map((model) => (\n                      <Link\n                        key={model.info?.model_id}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        to={Routes.getExperimentLoggedModelDetailsPage(\n                          model.info?.experiment_id ?? '',\n                          model.info?.model_id ?? '',\n                        )}\n                      >\n                        {model.info?.name}\n                      </Link>\n                    ))}\n                  </Overflow>\n                ) : (\n                  '-'\n                )}\n              </TableCell>\n            )}\n          </TableRow>\n        ),\n      )}\n    </>\n  ) : null;\n};\n\n/**\n * Displays table with metrics key/values in run detail overview.\n */\nexport const RunViewMetricsTable = ({\n  latestMetrics,\n  runInfo,\n  loggedModels,\n}: {\n  latestMetrics: MetricEntitiesByName;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModels?: LoggedModelProto[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const {\n    detailsPageTableStyles,\n    detailsPageNoEntriesStyles,\n    detailsPageNoResultsWrapperStyles,\n    usingUnifiedDetailsLayout,\n  } = useExperimentTrackingDetailsPageLayoutStyles();\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n\n  /**\n   * Aggregate logged models by metric key.\n   * This is used to display the models associated with each metric in the table.\n   */\n  const loggedModelsByMetricKey = useMemo(() => {\n    if (!loggedModels) {\n      return {};\n    }\n    const metricsWithModels = compact(\n      flatMap(loggedModels, (model) => model.data?.metrics?.map(({ key }) => ({ key, model }))),\n    );\n    const groupedMetrics = groupBy(metricsWithModels, 'key');\n    return mapValues(groupedMetrics, (group) => group.map(({ model }) => model));\n  }, [loggedModels]);\n\n  /**\n   * Enrich the metric list with related logged models.\n   */\n  const metricValues = useMemo<MetricEntityWithLoggedModels[]>(() => {\n    const metricList = values(latestMetrics);\n\n    if (isEmpty(loggedModelsByMetricKey)) {\n      return metricList;\n    }\n    return metricList.map((metric) => ({\n      ...metric,\n      loggedModels: loggedModelsByMetricKey[metric.key] ?? [],\n    }));\n  }, [latestMetrics, loggedModelsByMetricKey]);\n\n  const anyRowHasModels = metricValues.some(({ loggedModels }) => !isEmpty(loggedModels));\n\n  const modelColumnDefs: ColumnDef<MetricEntityWithLoggedModels>[] = useMemo(\n    () => [\n      {\n        id: 'models',\n        header: intl.formatMessage({\n          defaultMessage: 'Models',\n          description: 'Run page > Overview > Metrics table > Models column header',\n        }),\n        accessorKey: 'models',\n        enableResizing: true,\n      },\n    ],\n    [intl],\n  );\n\n  const columns = useMemo(() => {\n    const columnDefs: ColumnDef<MetricEntityWithLoggedModels>[] = [\n      {\n        id: 'key',\n        accessorKey: 'key',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Metric\"\n            description=\"Run page > Overview > Metrics table > Key column header\"\n          />\n        ),\n        enableResizing: true,\n        size: 240,\n      },\n      {\n        id: 'value',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Value\"\n            description=\"Run page > Overview > Metrics table > Value column header\"\n          />\n        ),\n        accessorKey: 'value',\n        enableResizing: true,\n      },\n    ];\n\n    if (anyRowHasModels) {\n      columnDefs.push(...modelColumnDefs);\n    }\n\n    return columnDefs;\n  }, [anyRowHasModels, modelColumnDefs]);\n\n  // Break down metric lists into system and model segments. If no system (or model) metrics\n  // are detected, return a single segment.\n  const metricSegments = useMemo(() => {\n    const systemMetrics = metricValues.filter(({ key }) => isSystemMetricKey(key));\n    const modelMetrics = metricValues.filter(({ key }) => !isSystemMetricKey(key));\n    const isSegmented = systemMetrics.length > 0 && modelMetrics.length > 0;\n    if (!isSegmented) {\n      return [{ header: undefined, metrics: metricValues.filter(metricKeyMatchesFilter(filter)) }];\n    }\n    return [\n      {\n        header: intl.formatMessage(systemMetricsLabel),\n        metrics: systemMetrics.filter(metricKeyMatchesFilter(filter)),\n      },\n      {\n        header: intl.formatMessage(modelMetricsLabel),\n        metrics: modelMetrics.filter(metricKeyMatchesFilter(filter)),\n      },\n    ];\n  }, [filter, metricValues, intl]);\n\n  const table = useReactTable<MetricEntity>({\n    data: metricValues,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (row) => row.key,\n    enableColumnResizing: true,\n    columnResizeMode: 'onChange',\n    columns,\n  });\n\n  const renderTableContent = () => {\n    if (!metricValues.length) {\n      return (\n        <div css={detailsPageNoEntriesStyles}>\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No metrics recorded\"\n                description=\"Run page > Overview > Metrics table > No metrics recorded\"\n              />\n            }\n          />\n        </div>\n      );\n    }\n\n    const areAllResultsFiltered = sum(metricSegments.map(({ metrics }) => metrics.length)) < 1;\n\n    return (\n      <>\n        <div css={{ marginBottom: theme.spacing.sm }}>\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewmetricstable.tsx_186\"\n            prefix={<SearchIcon />}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search metrics',\n              description: 'Run page > Overview > Metrics table > Filter input placeholder',\n            })}\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n            allowClear\n          />\n        </div>\n\n        <Table\n          scrollable\n          empty={\n            areAllResultsFiltered ? (\n              <div css={detailsPageNoResultsWrapperStyles}>\n                <Empty\n                  description={\n                    <FormattedMessage\n                      defaultMessage=\"No metrics match the search filter\"\n                      description=\"Message displayed when no metrics match the search filter in the run details page details metrics table\"\n                    />\n                  }\n                />\n              </div>\n            ) : null\n          }\n          css={detailsPageTableStyles}\n        >\n          <TableRow isHeader>\n            {table.getLeafHeaders().map((header) => (\n              <TableHeader\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewmetricstable.tsx_312\"\n                key={header.id}\n                header={header}\n                column={header.column}\n                setColumnSizing={table.setColumnSizing}\n                isResizing={header.column.getIsResizing()}\n                style={{\n                  flex: header.column.getCanResize() ? header.column.getSize() / 100 : undefined,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            ))}\n          </TableRow>\n          {metricSegments.map((segment, index) => (\n            <RunViewMetricsTableSection\n              key={segment.header || index}\n              metricsList={segment.metrics}\n              runInfo={runInfo}\n              header={segment.header}\n              table={table}\n            />\n          ))}\n        </Table>\n      </>\n    );\n  };\n  return (\n    <div\n      css={{\n        flex: usingUnifiedDetailsLayout ? '0 0 auto' : 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      <Typography.Title level={4} css={{ flexShrink: 0 }}>\n        <FormattedMessage\n          defaultMessage=\"Metrics ({length})\"\n          description=\"Run page > Overview > Metrics table > Section title\"\n          values={{ length: metricValues.filter(metricKeyMatchesFilter(filter)).length }}\n        />\n      </Typography.Title>\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.borderDecorative}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          overflow: 'hidden',\n        }}\n      >\n        {renderTableContent()}\n      </div>\n    </div>\n  );\n};\n","import type { RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport { KeyValueEntity } from '../../../../common/types';\nimport { Button, DropdownMenu, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentViewDatasetWithContext } from '../../experiment-page/components/runs/ExperimentViewDatasetWithContext';\nimport { useState } from 'react';\nimport {\n  DatasetWithRunType,\n  ExperimentViewDatasetDrawer,\n} from '../../experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Renders single dataset, either in overview table cell or within a dropdown\n */\nconst DatasetEntry = ({ dataset, onClick }: { dataset: RunDatasetWithTags; onClick: () => void }) => {\n  return (\n    <Typography.Link\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_16\"\n      role=\"link\"\n      css={{\n        textAlign: 'left',\n      }}\n      onClick={onClick}\n    >\n      <ExperimentViewDatasetWithContext datasetWithTags={dataset} displayTextAsLink css={{ margin: 0 }} />\n    </Typography.Link>\n  );\n};\n\n/**\n * Displays run datasets section in run detail overview.\n */\nexport const RunViewDatasetBox = ({\n  tags,\n  runInfo,\n  datasets,\n}: {\n  tags: Record<string, KeyValueEntity>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  datasets: RunDatasetWithTags[];\n}) => {\n  const [selectedDatasetWithRun, setSelectedDatasetWithRun] = useState<DatasetWithRunType | null>(null);\n  const { theme } = useDesignSystemTheme();\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n\n  if (!datasets || !datasets.length) {\n    return null;\n  }\n\n  const firstDataset = datasets[0];\n  const remainingDatasets = datasets.slice(1);\n\n  const datasetClicked = (dataset: RunDatasetWithTags) => {\n    setSelectedDatasetWithRun({\n      datasetWithTags: dataset,\n      runData: {\n        experimentId: runInfo.experimentId ?? undefined,\n        runUuid: runInfo.runUuid ?? '',\n        runName: runInfo.runName ?? undefined,\n        datasets: datasets,\n        tags: tags,\n      },\n    });\n    setIsDrawerOpen(true);\n  };\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n      <DatasetEntry dataset={firstDataset} onClick={() => datasetClicked(firstDataset)} />\n      {remainingDatasets.length ? (\n        <DropdownMenu.Root modal={false}>\n          <DropdownMenu.Trigger asChild>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_70\"\n              size=\"small\"\n            >\n              +{remainingDatasets.length}\n            </Button>\n          </DropdownMenu.Trigger>\n          <DropdownMenu.Content>\n            {remainingDatasets.map((datasetWithTags) => {\n              return (\n                <DropdownMenu.Item\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdatasetbox.tsx_81\"\n                  key={datasetWithTags.dataset.digest}\n                >\n                  <DatasetEntry dataset={datasetWithTags} onClick={() => datasetClicked(datasetWithTags)} />\n                </DropdownMenu.Item>\n              );\n            })}\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      ) : null}\n      {selectedDatasetWithRun && (\n        <ExperimentViewDatasetDrawer\n          isOpen={isDrawerOpen}\n          setIsOpen={setIsDrawerOpen}\n          selectedDatasetWithRun={selectedDatasetWithRun}\n          setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n        />\n      )}\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { useEffect, useMemo } from 'react';\nimport { getRunApi } from '../../../actions';\nimport { ParagraphSkeleton } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { FormattedMessage } from 'react-intl';\nimport { shouldEnableGraphQLRunDetailsPage } from '../../../../common/utils/FeatureUtils';\nimport { useGetRunQuery } from '../hooks/useGetRunQuery';\n\nexport const RunViewParentRunBox = ({ parentRunUuid }: { parentRunUuid: string }) => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const parentRunInfoRedux = useSelector(({ entities }: ReduxState) => {\n    return entities.runInfosByUuid[parentRunUuid];\n  });\n\n  const parentRunInfoGraphql = useGetRunQuery({\n    runUuid: parentRunUuid,\n    disabled: !shouldEnableGraphQLRunDetailsPage(),\n  });\n\n  const parentRunInfo = useMemo(() => {\n    return shouldEnableGraphQLRunDetailsPage() ? parentRunInfoGraphql?.data?.info : parentRunInfoRedux;\n  }, [parentRunInfoGraphql, parentRunInfoRedux]);\n\n  useEffect(() => {\n    // Don't call REST API if GraphQL is enabled\n    if (shouldEnableGraphQLRunDetailsPage()) {\n      return;\n    }\n    if (!parentRunInfo) {\n      dispatch(getRunApi(parentRunUuid));\n    }\n  }, [dispatch, parentRunUuid, parentRunInfo]);\n\n  if (!parentRunInfo) {\n    return (\n      <ParagraphSkeleton\n        loading\n        label={\n          <FormattedMessage\n            defaultMessage=\"Parent run name loading\"\n            description=\"Run page > Overview > Parent run name loading\"\n          />\n        }\n      />\n    );\n  }\n\n  if (!parentRunInfo.experimentId || !parentRunInfo.runUuid) {\n    return null;\n  }\n\n  return (\n    <Link to={Routes.getRunPageRoute(parentRunInfo.experimentId, parentRunInfo.runUuid)}>{parentRunInfo.runName}</Link>\n  );\n};\n","import { Button, PencilIcon, Spinner, Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { shouldUseSharedTaggingUI } from '../../../../common/utils/FeatureUtils';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { KeyValueEntity } from '../../../../common/types';\nimport { KeyValueTag } from '../../../../common/components/KeyValueTag';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { keys, values } from 'lodash';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport { setRunTagsBulkApi, saveRunTagsApi } from '../../../actions';\nimport { useMemo, useState } from 'react';\nimport { isUserFacingTag } from '../../../../common/utils/TagUtils';\n\n/**\n * Displays run tags cell in run detail overview.\n */\nexport const RunViewTagsBox = ({\n  runUuid,\n  tags,\n  onTagsUpdated,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  onTagsUpdated: () => void;\n}) => {\n  const sharedTaggingUIEnabled = shouldUseSharedTaggingUI();\n\n  const [isSavingTags, setIsSavingTags] = useState(false);\n\n  const { theme } = useDesignSystemTheme();\n  const dispatch = useDispatch<ThunkDispatch>();\n  const intl = useIntl();\n\n  // Get keys and tag entities while excluding system tags\n  const [visibleTagKeys, visibleTagEntities] = useMemo(\n    () => [keys(tags).filter(isUserFacingTag), values(tags).filter(({ key }) => isUserFacingTag(key))],\n    [tags],\n  );\n\n  const { EditTagsModal, showEditTagsModal, isLoading } = useEditKeyValueTagsModal({\n    valueRequired: true,\n    allAvailableTags: visibleTagKeys,\n    saveTagsHandler: async (_, existingTags, newTags) =>\n      dispatch(setRunTagsBulkApi(runUuid, existingTags, newTags)).then(onTagsUpdated),\n  });\n\n  const showEditModal = () => {\n    showEditTagsModal({ tags: visibleTagEntities });\n  };\n\n  const editTagsLabel = intl.formatMessage({\n    defaultMessage: 'Edit tags',\n    description: \"Run page > Overview > Tags cell > 'Edit' button label\",\n  });\n\n  return (\n    <div\n      css={{\n        paddingTop: theme.spacing.xs,\n        paddingBottom: theme.spacing.xs,\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        gap: theme.spacing.xs,\n      }}\n    >\n      {visibleTagEntities.length < 1 ? (\n        <Button\n          componentId=\"mlflow.run_details.overview.tags.add_button\"\n          size=\"small\"\n          type=\"tertiary\"\n          onClick={showEditModal}\n        >\n          <FormattedMessage\n            defaultMessage=\"Add tags\"\n            description=\"Run page > Overview > Tags cell > 'Add' button label\"\n          />\n        </Button>\n      ) : (\n        <>\n          {visibleTagEntities.map((tag) => (\n            <KeyValueTag tag={tag} key={`${tag.key}-${tag.value}`} enableFullViewModal css={{ marginRight: 0 }} />\n          ))}\n          <Tooltip componentId=\"mlflow.run_details.overview.tags.edit_button.tooltip\" content={editTagsLabel}>\n            <Button\n              componentId=\"mlflow.run_details.overview.tags.edit_button\"\n              aria-label={editTagsLabel}\n              size=\"small\"\n              icon={<PencilIcon />}\n              onClick={showEditModal}\n            />\n          </Tooltip>\n        </>\n      )}\n      {isLoading && <Spinner size=\"small\" />}\n      {/** Old modal for editing tags */}\n      {EditTagsModal}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { EditableNote } from '../../../../common/components/EditableNote';\nimport { KeyValueEntity } from '../../../../common/types';\nimport { NOTE_CONTENT_TAG } from '../../../utils/NoteUtils';\nimport { Button, PencilIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useDispatch } from 'react-redux';\nimport { ThunkDispatch } from '../../../../redux-types';\nimport { setTagApi } from '../../../actions';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * Displays editable description section in run detail overview.\n */\nexport const RunViewDescriptionBox = ({\n  runUuid,\n  tags,\n  onDescriptionChanged,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  onDescriptionChanged: () => void | Promise<void>;\n}) => {\n  const noteContent = tags[NOTE_CONTENT_TAG]?.value || '';\n\n  const [showNoteEditor, setShowNoteEditor] = useState(false);\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const handleSubmitEditNote = (markdown: string) =>\n    dispatch(setTagApi(runUuid, NOTE_CONTENT_TAG, markdown))\n      .then(onDescriptionChanged)\n      .then(() => setShowNoteEditor(false));\n  const handleCancelEditNote = () => setShowNoteEditor(false);\n\n  const isEmpty = !noteContent;\n\n  return (\n    <div css={{ marginBottom: theme.spacing.md }}>\n      <Typography.Title level={4} css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n        <FormattedMessage\n          defaultMessage=\"Description\"\n          description=\"Run page > Overview > Description section > Section title\"\n        />\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdescriptionbox.tsx_46\"\n          size=\"small\"\n          type=\"tertiary\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Edit description',\n            description: 'Run page > Overview > Description section > Edit button label',\n          })}\n          onClick={() => setShowNoteEditor(true)}\n          icon={<PencilIcon />}\n        />\n      </Typography.Title>\n      {isEmpty && !showNoteEditor && (\n        <Typography.Hint>\n          <FormattedMessage\n            defaultMessage=\"No description\"\n            description=\"Run page > Overview > Description section > Empty value placeholder\"\n          />\n        </Typography.Hint>\n      )}\n      {(!isEmpty || showNoteEditor) && (\n        <EditableNote\n          defaultMarkdown={noteContent}\n          onSubmit={handleSubmitEditNote}\n          onCancel={handleCancelEditNote}\n          showEditor={showNoteEditor}\n        />\n      )}\n    </div>\n  );\n};\n","import { Overflow, Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../../common/static/registered-model-grey-ok.svg';\nimport type { RunPageModelVersionSummary } from '../hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\n\n/**\n * Displays list of registered models in run detail overview.\n * TODO: expand with logged models after finalizing design\n */\nexport const RunViewRegisteredModelsBox = ({\n  registeredModelVersionSummaries,\n}: {\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Overflow>\n      {registeredModelVersionSummaries?.map((modelSummary) => (\n        <Link\n          key={modelSummary.displayedName}\n          to={modelSummary.link}\n          css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}\n        >\n          <RegisteredModelOkIcon /> {modelSummary.displayedName}{' '}\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewregisteredmodelsbox.tsx_40\"\n            css={{ cursor: 'pointer' }}\n          >\n            v{modelSummary.version}\n          </Tag>\n        </Link>\n      ))}\n    </Overflow>\n  );\n};\n","import { QueryFunctionContext, useQuery, UseQueryOptions } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport type { PromptVersionsForRunResponse, RegisteredPromptDetailsResponse, RegisteredPromptVersion } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nconst queryFn = async ({ queryKey }: QueryFunctionContext<PromptVersionsForRunQueryKey>) => {\n  const [, { runUuid }] = queryKey;\n  return RegisteredPromptsApi.getPromptVersionsForRun(runUuid);\n};\n\ntype PromptVersionsForRunQueryKey = ['run_uuid', { runUuid: string }];\n\nexport const usePromptVersionsForRunQuery = (\n  { runUuid }: { runUuid: string },\n  options: UseQueryOptions<\n    PromptVersionsForRunResponse,\n    Error,\n    PromptVersionsForRunResponse,\n    PromptVersionsForRunQueryKey\n  > = {},\n) => {\n  const queryResult = useQuery<\n    PromptVersionsForRunResponse,\n    Error,\n    PromptVersionsForRunResponse,\n    PromptVersionsForRunQueryKey\n  >(['run_uuid', { runUuid }], {\n    queryFn,\n    retry: false,\n    ...options,\n  });\n\n  return {\n    data: queryResult.data,\n    error: queryResult.error ?? undefined,\n    isLoading: queryResult.isLoading,\n    refetch: queryResult.refetch,\n  };\n};\n","import { ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '@mlflow/mlflow/src/common/types';\n\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { usePromptVersionsForRunQuery } from '../../../pages/prompts/hooks/usePromptVersionsForRunQuery';\nimport Routes from '../../../routes';\nimport { parseLinkedPromptsFromRunTags } from '../../../pages/prompts/utils';\n\nexport const RunViewRegisteredPromptsBox = ({\n  tags,\n  runUuid,\n}: {\n  tags: Record<string, KeyValueEntity>;\n  runUuid: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  // This part is for supporting prompt versions created using mlflow < 3.1.0\n  const { data, error, isLoading } = usePromptVersionsForRunQuery({ runUuid });\n  const promptVersionsFromPromptTags = data?.model_versions || [];\n  const promptVersionsFromRunTags = parseLinkedPromptsFromRunTags(tags);\n  const promptVersions = [...promptVersionsFromPromptTags, ...promptVersionsFromRunTags];\n\n  if (isLoading) {\n    return <ParagraphSkeleton />;\n  }\n\n  if (error || !promptVersions || promptVersions.length === 0) {\n    return <Typography.Hint>—</Typography.Hint>;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        gap: theme.spacing.sm,\n        flexWrap: 'wrap',\n        padding: `${theme.spacing.sm}px 0px`,\n      }}\n    >\n      {promptVersions.map((promptVersion, index) => {\n        const to = Routes.getPromptDetailsPageRoute(encodeURIComponent(promptVersion.name));\n        const displayText = `${promptVersion.name} (v${promptVersion.version})`;\n        return (\n          <Typography.Text key={displayText} css={{ whiteSpace: 'nowrap' }}>\n            <Link to={to}>{displayText}</Link>\n            {index < promptVersions.length - 1 && ','}\n          </Typography.Text>\n        );\n      })}\n    </div>\n  );\n};\n","import { ModelsIcon, Overflow, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { RunInfoEntity } from '../../../types';\nimport { type LoggedModelProto } from '../../../types';\nimport Routes from '../../../routes';\nimport { first } from 'lodash';\nimport { FormattedMessage } from 'react-intl';\nimport { useMemo } from 'react';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Displays list of registered models in run detail overview.\n */\nexport const RunViewLoggedModelsBox = ({\n  loggedModels,\n  loggedModelsV3,\n  runInfo,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModelsV3: LoggedModelProto[];\n  loggedModels: {\n    artifactPath: string;\n    flavors: string[];\n    utcTimeCreated: number;\n  }[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { experimentId, runUuid } = runInfo;\n\n  const getModelFlavorName = (flavors: string[]) => {\n    return (\n      first(flavors) || (\n        <FormattedMessage\n          defaultMessage=\"Model\"\n          description=\"Run page > Overview > Logged models > Unknown model flavor\"\n        />\n      )\n    );\n  };\n\n  // Check if list has models with same flavor names.\n  // If true, display artifact path in dropdown menu to reduce ambiguity.\n  const shouldDisplayArtifactPaths = useMemo(() => {\n    const flavors = loggedModels.map((model) => getModelFlavorName(model.flavors));\n    const uniqueFlavors = new Set(flavors);\n    return uniqueFlavors.size !== flavors.length;\n  }, [loggedModels]);\n\n  return (\n    <Overflow>\n      {loggedModels.map((model, index) => {\n        return (\n          <Link\n            to={Routes.getRunPageRoute(experimentId ?? '', runUuid ?? '', model.artifactPath)}\n            key={model.artifactPath}\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: theme.spacing.sm,\n              cursor: 'pointer',\n              height: shouldDisplayArtifactPaths && index > 0 ? theme.general.heightBase : theme.general.heightSm,\n            }}\n          >\n            <ModelsIcon />\n            <div>\n              {getModelFlavorName(model.flavors)}\n              {shouldDisplayArtifactPaths && index > 0 && <Typography.Hint>{model.artifactPath}</Typography.Hint>}\n            </div>\n          </Link>\n        );\n      })}\n      {loggedModelsV3.map((model, index) => {\n        return (\n          <Link\n            to={Routes.getExperimentLoggedModelDetailsPageRoute(experimentId ?? '', model.info?.model_id ?? '')}\n            key={model.info?.model_id ?? index}\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: theme.spacing.sm,\n              cursor: 'pointer',\n              height: shouldDisplayArtifactPaths && index > 0 ? theme.general.heightBase : theme.general.heightSm,\n            }}\n          >\n            <ModelsIcon />\n            <div>{model.info?.name}</div>\n          </Link>\n        );\n      })}\n    </Overflow>\n  );\n};\n","import {\n  BranchIcon,\n  CopyIcon,\n  GitCommitIcon,\n  Tag,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n  Popover,\n} from '@databricks/design-system';\nimport Utils from '../../../../common/utils/Utils';\nimport { KeyValueEntity } from '../../../../common/types';\nimport { MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG } from '../../../constants';\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\nimport { ExperimentSourceTypeIcon } from '../../ExperimentSourceTypeIcon';\n\nexport const RunViewSourceBox = ({\n  runUuid,\n  tags,\n  search,\n  className,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  search: string;\n  className?: string;\n}) => {\n  const branchName = tags?.[MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG]?.value;\n  const commitHash = tags?.[Utils.gitCommitTag]?.value;\n  const runSource = Utils.renderSource(tags, search, runUuid, branchName);\n\n  const { theme } = useDesignSystemTheme();\n  return runSource ? (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.sm,\n        paddingTop: theme.spacing.sm,\n        paddingBottom: theme.spacing.sm,\n        flexWrap: 'wrap',\n      }}\n      className={className}\n    >\n      <ExperimentSourceTypeIcon\n        sourceType={tags[Utils.sourceTypeTag]?.value}\n        css={{ color: theme.colors.actionPrimaryBackgroundDefault }}\n      />\n      {runSource}{' '}\n      {branchName && (\n        <LegacyTooltip title={branchName}>\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewsourcebox.tsx_48\"\n            css={{ marginRight: 0 }}\n          >\n            <div css={{ display: 'flex', gap: 4, whiteSpace: 'nowrap' }}>\n              <BranchIcon /> {branchName}\n            </div>\n          </Tag>\n        </LegacyTooltip>\n      )}\n      {commitHash && (\n        <Popover.Root componentId=\"mlflow.run_details.overview.source.commit_hash_popover\">\n          <Popover.Trigger asChild>\n            <Tag\n              componentId=\"mlflow.run_details.overview.source.commit_hash\"\n              css={{ marginRight: 0, '&>div': { paddingRight: 0 } }}\n            >\n              <div css={{ display: 'flex', gap: theme.spacing.xs, whiteSpace: 'nowrap', alignContent: 'center' }}>\n                <GitCommitIcon />\n                {commitHash.slice(0, 7)}\n              </div>\n            </Tag>\n          </Popover.Trigger>\n          <Popover.Content align=\"start\">\n            <Popover.Arrow />\n            <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n              {commitHash}\n              <CopyButton showLabel={false} size=\"small\" type=\"tertiary\" copyText={commitHash} icon={<CopyIcon />} />\n            </div>\n          </Popover.Content>\n        </Popover.Root>\n      )}\n    </div>\n  ) : (\n    <Typography.Hint>—</Typography.Hint>\n  );\n};\n","import {\n  Alert,\n  Button,\n  ColumnsIcon,\n  getShadowScrollStyles,\n  Spacer,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useCombinedRunInputsOutputsModels } from '../../../hooks/logged-models/useCombinedRunInputsOutputsModels';\nimport { LoggedModelProto, RunInfoEntity } from '../../../types';\nimport { ExperimentLoggedModelListPageTable } from '../../experiment-logged-models/ExperimentLoggedModelListPageTable';\nimport {\n  ExperimentLoggedModelListPageKnownColumns,\n  useExperimentLoggedModelListPageTableColumns,\n} from '../../experiment-logged-models/hooks/useExperimentLoggedModelListPageTableColumns';\nimport { ExperimentLoggedModelOpenDatasetDetailsContextProvider } from '../../experiment-logged-models/hooks/useExperimentLoggedModelOpenDatasetDetails';\nimport {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from '../hooks/useGetRunQuery';\nimport { ExperimentLoggedModelListPageColumnSelector } from '../../experiment-logged-models/ExperimentLoggedModelListPageColumnSelector';\n\nconst supportedAttributeColumnKeys = [\n  ExperimentLoggedModelListPageKnownColumns.RelationshipType,\n  ExperimentLoggedModelListPageKnownColumns.Step,\n  ExperimentLoggedModelListPageKnownColumns.Name,\n  ExperimentLoggedModelListPageKnownColumns.Status,\n  ExperimentLoggedModelListPageKnownColumns.CreationTime,\n  ExperimentLoggedModelListPageKnownColumns.RegisteredModels,\n  ExperimentLoggedModelListPageKnownColumns.Dataset,\n];\n\nexport const RunViewLoggedModelsTable = ({\n  inputs,\n  outputs,\n  runInfo,\n  loggedModelsV3,\n  isLoadingLoggedModels = false,\n  loggedModelsError,\n}: {\n  inputs?: UseGetRunQueryResponseInputs;\n  outputs?: UseGetRunQueryResponseOutputs;\n  runInfo?: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModelsV3: LoggedModelProto[];\n  isLoadingLoggedModels?: boolean;\n  loggedModelsError?: Error;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const { models: loggedModels } = useCombinedRunInputsOutputsModels(inputs, outputs, runInfo, loggedModelsV3);\n\n  const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>({});\n\n  const { columnDefs } = useExperimentLoggedModelListPageTableColumns({\n    loggedModels: loggedModels,\n    columnVisibility,\n    disablePinnedColumns: true,\n    disableOrderBy: true,\n    supportedAttributeColumnKeys,\n  });\n\n  return (\n    <div css={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n      <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Typography.Title level={4} css={{ flexShrink: 0 }}>\n          <FormattedMessage\n            defaultMessage=\"Logged models ({length})\"\n            description=\"A header for a table of logged models displayed on the run page. The 'length' variable is being replaced with the number of displayed logged models.\"\n            values={{ length: loggedModels.length }}\n          />\n        </Typography.Title>\n        <ExperimentLoggedModelListPageColumnSelector\n          columnDefs={columnDefs}\n          onUpdateColumns={setColumnVisibility}\n          columnVisibility={columnVisibility}\n          customTrigger={<Button componentId=\"mlflow.logged_model.list.columns\" icon={<ColumnsIcon />} />}\n        />\n      </div>\n      <Spacer size=\"sm\" shrinks={false} />\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.border}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          overflow: 'hidden',\n        }}\n      >\n        {loggedModelsError instanceof Error && loggedModelsError.message && (\n          <>\n            <Alert\n              type=\"error\"\n              description={loggedModelsError.message}\n              message={\n                <FormattedMessage\n                  defaultMessage=\"Error loading logged models\"\n                  description=\"Error message displayed in the experiment run details page when loading logged models fails\"\n                />\n              }\n              closable={false}\n              componentId=\"mlflow.run_page.logged_model.list.error\"\n            />\n            <Spacer size=\"sm\" shrinks={false} />\n          </>\n        )}\n        <ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n          <ExperimentLoggedModelListPageTable\n            columnDefs={columnDefs}\n            loggedModels={loggedModels}\n            columnVisibility={columnVisibility}\n            isLoading={isLoadingLoggedModels}\n            isLoadingMore={false}\n            moreResultsAvailable={false}\n            disableLoadMore\n            css={getTableTheme(theme)}\n            displayShowExampleButton={false}\n          />\n        </ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n      </div>\n    </div>\n  );\n};\n\nconst getTableTheme = (theme: Theme) => ({\n  '&.ag-theme-balham': {\n    '--ag-border-color': theme.colors.border,\n    '--ag-row-border-color': theme.colors.border,\n    '--ag-foreground-color': theme.colors.textPrimary,\n    '--ag-background-color': 'transparent',\n    '--ag-odd-row-background-color': 'transparent',\n    '--ag-row-hover-color': theme.colors.actionDefaultBackgroundHover,\n    '--ag-selected-row-background-color': theme.colors.actionDefaultBackgroundPress,\n    '--ag-header-foreground-color': theme.colors.textPrimary,\n    '--ag-header-background-color': theme.colors.backgroundPrimary,\n    '--ag-modal-overlay-background-color': theme.colors.overlayOverlay,\n    '.ag-header-row.ag-header-row-column-group': {\n      '--ag-header-foreground-color': theme.colors.textPrimary,\n    },\n    borderTop: 0,\n    fontSize: theme.typography.fontSizeBase,\n    '.ag-center-cols-viewport': {\n      ...getShadowScrollStyles(theme, {\n        orientation: 'horizontal',\n      }),\n    },\n  },\n});\n","import { compact, uniq, uniqBy } from 'lodash';\nimport { useMemo } from 'react';\nimport type {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from '../../components/run-page/hooks/useGetRunQuery';\nimport type { LoggedModelProto, RunInfoEntity } from '../../types';\n\ntype LoggedModelProtoWithRunDirection = LoggedModelProto & { direction: 'input' | 'output'; step?: string };\n\nconst filterMetricsByMatchingRunId = (runUuid?: string | null) => (loggedModel: LoggedModelProtoWithRunDirection) => {\n  if (loggedModel.data?.metrics) {\n    return {\n      ...loggedModel,\n      data: {\n        ...loggedModel.data,\n        metrics: loggedModel.data.metrics.filter((metric) => !runUuid || metric.run_id === runUuid),\n      },\n    };\n  }\n  return loggedModel;\n};\n\nexport const useCombinedRunInputsOutputsModels = (\n  inputs?: UseGetRunQueryResponseInputs,\n  outputs?: UseGetRunQueryResponseOutputs,\n  runInfo?: RunInfoEntity | UseGetRunQueryResponseRunInfo,\n  loggedModelsV3?: LoggedModelProto[],\n) => {\n  const inputLoggedModels = useMemo(() => {\n    const inputModelIds = compact(uniq(inputs?.modelInputs?.map((modelInput) => modelInput.modelId)));\n    return inputModelIds.map<LoggedModelProtoWithRunDirection | undefined>((model_id) => {\n      const model = loggedModelsV3?.find((model) => model.info?.model_id === model_id);\n      if (!model) return undefined;\n      return { ...model, direction: 'input' as const };\n    });\n  }, [inputs?.modelInputs, loggedModelsV3]);\n\n  const outputLoggedModels = useMemo(() => {\n    const outputModelIds = compact(uniq(outputs?.modelOutputs?.map((modelOutput) => modelOutput.modelId)));\n    return outputModelIds.map<LoggedModelProtoWithRunDirection | undefined>((model_id) => {\n      const model = loggedModelsV3?.find((model) => model.info?.model_id === model_id);\n\n      const correspondingOutputEntry = outputs?.modelOutputs?.find(({ modelId }) => modelId === model?.info?.model_id);\n\n      if (!model) return undefined;\n      return { ...model, direction: 'output' as const, step: correspondingOutputEntry?.step ?? undefined };\n    });\n  }, [outputs?.modelOutputs, loggedModelsV3]);\n\n  const modelsWithDirection = useMemo(() => {\n    return (\n      uniqBy(\n        compact([...inputLoggedModels, ...outputLoggedModels]).map(filterMetricsByMatchingRunId(runInfo?.runUuid)),\n        (modelData) => modelData.info?.model_id,\n      ) ?? []\n    );\n  }, [inputLoggedModels, outputLoggedModels, runInfo]);\n\n  return { models: modelsWithDirection };\n};\n","import { Overflow, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useState } from 'react';\nimport type { RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport { KeyValueEntity } from '../../../../common/types';\nimport {\n  DatasetWithRunType,\n  ExperimentViewDatasetDrawer,\n} from '../../experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport { ExperimentViewDatasetWithContext } from '../../experiment-page/components/runs/ExperimentViewDatasetWithContext';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Displays run datasets section in run detail overview.\n */\nexport const RunViewDatasetBoxV2 = ({\n  tags,\n  runInfo,\n  datasets,\n}: {\n  tags: Record<string, KeyValueEntity>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  datasets: RunDatasetWithTags[];\n}) => {\n  const [selectedDatasetWithRun, setSelectedDatasetWithRun] = useState<DatasetWithRunType | null>(null);\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  if (!datasets || !datasets.length) {\n    return null;\n  }\n\n  const datasetClicked = (dataset: RunDatasetWithTags) => {\n    setSelectedDatasetWithRun({\n      datasetWithTags: dataset,\n      runData: {\n        experimentId: runInfo.experimentId ?? undefined,\n        runUuid: runInfo.runUuid ?? '',\n        runName: runInfo.runName ?? undefined,\n        datasets: datasets,\n        tags: tags,\n      },\n    });\n    setIsDrawerOpen(true);\n  };\n\n  return (\n    <>\n      <Overflow>\n        {datasets.map((datasetWithTags) => (\n          <Typography.Link\n            componentId=\"mlflow.run_details.datasets_box.dataset_link\"\n            css={{\n              textAlign: 'left',\n              '.anticon': {\n                fontSize: theme.general.iconFontSize,\n              },\n            }}\n            onClick={() => datasetClicked(datasetWithTags)}\n          >\n            <ExperimentViewDatasetWithContext datasetWithTags={datasetWithTags} displayTextAsLink css={{ margin: 0 }} />\n          </Typography.Link>\n        ))}\n      </Overflow>\n      {selectedDatasetWithRun && (\n        <ExperimentViewDatasetDrawer\n          isOpen={isDrawerOpen}\n          setIsOpen={setIsDrawerOpen}\n          selectedDatasetWithRun={selectedDatasetWithRun}\n          setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n        />\n      )}\n    </>\n  );\n};\n","import { Button, FileIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { KeyValueProperty, NoneCell, SecondarySections } from '@databricks/web-shared/utils';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { LoggedModelProto, RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport { KeyValueEntity } from '../../../../common/types';\nimport { UseGetRunQueryResponseRunInfo } from './useGetRunQuery';\nimport Utils from '../../../../common/utils/Utils';\nimport { RunViewTagsBox } from '../overview/RunViewTagsBox';\nimport { RunViewUserLinkBox } from '../overview/RunViewUserLinkBox';\nimport { DetailsOverviewCopyableIdBox } from '../../DetailsOverviewCopyableIdBox';\nimport { RunViewStatusBox } from '../overview/RunViewStatusBox';\nimport { RunViewParentRunBox } from '../overview/RunViewParentRunBox';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../../experiment-page/utils/experimentPage.common-utils';\nimport { RunViewDatasetBoxV2 } from '../overview/RunViewDatasetBoxV2';\nimport { RunViewSourceBox } from '../overview/RunViewSourceBox';\nimport { Link, useLocation } from '../../../../common/utils/RoutingUtils';\nimport { RunViewLoggedModelsBox } from '../overview/RunViewLoggedModelsBox';\nimport { useMemo } from 'react';\nimport { RunPageModelVersionSummary } from './useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { RunViewRegisteredModelsBox } from '../overview/RunViewRegisteredModelsBox';\nimport Routes from '../../../routes';\n\nenum RunDetailsPageMetadataSections {\n  DETAILS = 'DETAILS',\n  DATASETS = 'DATASETS',\n  TAGS = 'TAGS',\n  REGISTERED_MODELS = 'REGISTERED_MODELS',\n}\n\nexport const useRunDetailsPageOverviewSectionsV2 = ({\n  runUuid,\n  runInfo,\n  tags,\n  onTagsUpdated,\n  datasets,\n  shouldRenderLoggedModelsBox,\n  loggedModelsV3,\n  registeredModelVersionSummaries,\n}: {\n  runUuid: string;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n  onTagsUpdated: () => void;\n  datasets?: RunDatasetWithTags[];\n  shouldRenderLoggedModelsBox?: boolean;\n  loggedModelsV3: LoggedModelProto[];\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}): SecondarySections => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const { search } = useLocation();\n  const loggedModelsFromTags = useMemo(() => Utils.getLoggedModelsFromTags(tags), [tags]);\n\n  const parentRunIdTag = tags[EXPERIMENT_PARENT_ID_TAG];\n\n  const detailsContent = runInfo && (\n    <>\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Created at',\n          description: 'Run page > Overview > Run start time section label',\n        })}\n        value={runInfo.startTime ? Utils.formatTimestamp(runInfo.startTime, intl) : <NoneCell />}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Created by',\n          description: 'Run page > Overview > Run author section label',\n        })}\n        value={<RunViewUserLinkBox runInfo={runInfo} tags={tags} />}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Experiment ID',\n          description: 'Run page > Overview > experiment ID section label',\n        })}\n        value={\n          <DetailsOverviewCopyableIdBox\n            value={runInfo?.experimentId ?? ''}\n            element={\n              runInfo?.experimentId ? (\n                <Link to={Routes.getExperimentPageRoute(runInfo.experimentId)}>{runInfo?.experimentId}</Link>\n              ) : undefined\n            }\n          />\n        }\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Status',\n          description: 'Run page > Overview > Run status section label',\n        })}\n        value={<RunViewStatusBox status={runInfo.status} />}\n      />\n\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Run ID',\n          description: 'Run page > Overview > Run ID section label',\n        })}\n        value={<DetailsOverviewCopyableIdBox value={runInfo.runUuid ?? ''} />}\n      />\n\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Duration',\n          description: 'Run page > Overview > Run duration section label',\n        })}\n        value={Utils.getDuration(runInfo.startTime, runInfo.endTime)}\n      />\n\n      {parentRunIdTag && (\n        <KeyValueProperty\n          keyValue={intl.formatMessage({\n            defaultMessage: 'Parent run',\n            description: 'Run page > Overview > Parent run',\n          })}\n          value={<RunViewParentRunBox parentRunUuid={parentRunIdTag.value} />}\n        />\n      )}\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Source',\n          description: 'Run page > Overview > Run source section label',\n        })}\n        value={\n          <RunViewSourceBox\n            tags={tags}\n            search={search}\n            runUuid={runUuid}\n            css={{\n              paddingTop: theme.spacing.xs,\n              paddingBottom: theme.spacing.xs,\n            }}\n          />\n        }\n      />\n      {shouldRenderLoggedModelsBox && (\n        <KeyValueProperty\n          keyValue={intl.formatMessage({\n            defaultMessage: 'Logged models',\n            description: 'Run page > Overview > Run models section label',\n          })}\n          value={\n            <RunViewLoggedModelsBox\n              // Pass the run info and logged models\n              runInfo={runInfo}\n              loggedModels={loggedModelsFromTags}\n              loggedModelsV3={loggedModelsV3}\n            />\n          }\n        />\n      )}\n    </>\n  );\n\n  return [\n    {\n      id: RunDetailsPageMetadataSections.DETAILS,\n      title: intl.formatMessage({\n        defaultMessage: 'About this run',\n        description: 'Title for the details/metadata section on the run details page',\n      }),\n      content: detailsContent,\n    },\n    {\n      id: RunDetailsPageMetadataSections.DATASETS,\n      title: intl.formatMessage({\n        defaultMessage: 'Datasets',\n        description: 'Title for the datasets section on the run details page',\n      }),\n      content: datasets?.length ? (\n        <RunViewDatasetBoxV2 tags={tags} runInfo={runInfo} datasets={datasets} />\n      ) : (\n        <NoneCell />\n      ),\n    },\n    {\n      id: RunDetailsPageMetadataSections.TAGS,\n      title: intl.formatMessage({\n        defaultMessage: 'Tags',\n        description: 'Title for the tags section on the run details page',\n      }),\n      content: <RunViewTagsBox runUuid={runInfo.runUuid ?? ''} tags={tags} onTagsUpdated={onTagsUpdated} />,\n    },\n    {\n      id: RunDetailsPageMetadataSections.REGISTERED_MODELS,\n      title: intl.formatMessage({\n        defaultMessage: 'Registered models',\n        description: 'Title for the registered models section on the run details page',\n      }),\n      content:\n        registeredModelVersionSummaries?.length > 0 ? (\n          <RunViewRegisteredModelsBox registeredModelVersionSummaries={registeredModelVersionSummaries} />\n        ) : (\n          <NoneCell />\n        ),\n    },\n  ];\n};\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { useMemo } from 'react';\n\nimport { Button, FileIcon, Spacer, Spinner, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport Utils from '../../../common/utils/Utils';\nimport type { ReduxState } from '../../../redux-types';\nimport { useLocation } from '../../../common/utils/RoutingUtils';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../experiment-page/utils/experimentPage.common-utils';\n\nimport { RunViewStatusBox } from './overview/RunViewStatusBox';\nimport { RunViewUserLinkBox } from './overview/RunViewUserLinkBox';\nimport { DetailsOverviewParamsTable } from '../DetailsOverviewParamsTable';\nimport { RunViewMetricsTable } from './overview/RunViewMetricsTable';\nimport { RunViewDatasetBox } from './overview/RunViewDatasetBox';\nimport { RunViewParentRunBox } from './overview/RunViewParentRunBox';\nimport { RunViewTagsBox } from './overview/RunViewTagsBox';\nimport { RunViewDescriptionBox } from './overview/RunViewDescriptionBox';\nimport { DetailsOverviewMetadataRow } from '../DetailsOverviewMetadataRow';\nimport { RunViewRegisteredModelsBox } from './overview/RunViewRegisteredModelsBox';\nimport { RunViewRegisteredPromptsBox } from './overview/RunViewRegisteredPromptsBox';\nimport { RunViewLoggedModelsBox } from './overview/RunViewLoggedModelsBox';\nimport { RunViewSourceBox } from './overview/RunViewSourceBox';\nimport { DetailsOverviewMetadataTable } from '@mlflow/mlflow/src/experiment-tracking/components/DetailsOverviewMetadataTable';\nimport type { LoggedModelProto } from '../../types';\nimport { useExperimentLoggedModelRegisteredVersions } from '../experiment-logged-models/hooks/useExperimentLoggedModelRegisteredVersions';\nimport { DetailsOverviewCopyableIdBox } from '../DetailsOverviewCopyableIdBox';\nimport type { RunInfoEntity } from '../../types';\nimport type {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from './hooks/useGetRunQuery';\nimport type { MetricEntitiesByName, RunDatasetWithTags } from '../../types';\nimport { KeyValueEntity } from '../../../common/types';\nimport { type RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { isEmpty, uniqBy } from 'lodash';\nimport { RunViewLoggedModelsTable } from './overview/RunViewLoggedModelsTable';\nimport { isRunPageLoggedModelsTableEnabled } from '../../../common/utils/FeatureUtils';\nimport { useExperimentTrackingDetailsPageLayoutStyles } from '../../hooks/useExperimentTrackingDetailsPageLayoutStyles';\nimport { DetailsPageLayout } from '../../../common/components/details-page-layout/DetailsPageLayout';\nimport { useRunDetailsPageOverviewSectionsV2 } from './hooks/useRunDetailsPageOverviewSectionsV2';\n\nconst EmptyValue = () => <Typography.Hint>—</Typography.Hint>;\n\nexport const RunViewOverview = ({\n  runUuid,\n  onRunDataUpdated,\n  tags,\n  runInfo,\n  datasets,\n  params,\n  latestMetrics,\n  runInputs,\n  runOutputs,\n  registeredModelVersionSummaries: registeredModelVersionSummariesForRun,\n  loggedModelsV3 = [],\n  isLoadingLoggedModels = false,\n  loggedModelsError,\n}: {\n  runUuid: string;\n  onRunDataUpdated: () => void | Promise<any>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n  latestMetrics: MetricEntitiesByName;\n  runInputs?: UseGetRunQueryResponseInputs;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  datasets?: RunDatasetWithTags[];\n  params: Record<string, KeyValueEntity>;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n  loggedModelsV3?: LoggedModelProto[];\n  isLoadingLoggedModels?: boolean;\n  loggedModelsError?: Error;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { usingUnifiedDetailsLayout } = useExperimentTrackingDetailsPageLayoutStyles();\n  const { search } = useLocation();\n  const intl = useIntl();\n\n  const loggedModelsFromTags = useMemo(() => Utils.getLoggedModelsFromTags(tags), [tags]);\n  const parentRunIdTag = tags[EXPERIMENT_PARENT_ID_TAG];\n  const containsLoggedModelsFromInputsOutputs = !isEmpty(runInputs?.modelInputs) || !isEmpty(runOutputs?.modelOutputs);\n  const shouldRenderLoggedModelsBox = !isRunPageLoggedModelsTableEnabled() || !containsLoggedModelsFromInputsOutputs;\n\n  // We have two flags for controlling the visibility of the \"logged models\" section:\n  // - `shouldRenderLoggedModelsBox` determines if \"logged models\" section should be rendered.\n  //   It is hidden if any IAv3 logged models are detected in inputs/outputs, in this case we're\n  //   displaying a big table instead.\n  // - `shouldDisplayContentsOfLoggedModelsBox` determines if the contents of the \"logged models\"\n  //   section should be displayed. It is hidden if there are no logged models to display.\n  const shouldDisplayContentsOfLoggedModelsBox = loggedModelsFromTags?.length > 0 || loggedModelsV3?.length > 0;\n  const { modelVersions: loggedModelsV3RegisteredModels } = useExperimentLoggedModelRegisteredVersions({\n    loggedModels: loggedModelsV3,\n  });\n\n  /**\n   * We have to query multiple sources for registered model versions (logged models API, models API, UC)\n   * and it's possible to end up with duplicates.\n   * We can dedupe them using `link` field, which should be unique for each model.\n   */\n  const registeredModelVersionSummaries = uniqBy(\n    [...registeredModelVersionSummariesForRun, ...loggedModelsV3RegisteredModels],\n    (model) => model?.link,\n  );\n\n  const renderPromptMetadataRow = () => {\n    return (\n      <DetailsOverviewMetadataRow\n        title={\n          <FormattedMessage\n            defaultMessage=\"Registered prompts\"\n            description=\"Run page > Overview > Run prompts section label\"\n          />\n        }\n        value={<RunViewRegisteredPromptsBox tags={tags} runUuid={runUuid} />}\n      />\n    );\n  };\n\n  const renderDetails = () => {\n    return (\n      <DetailsOverviewMetadataTable>\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created at\"\n              description=\"Run page > Overview > Run start time section label\"\n            />\n          }\n          value={runInfo.startTime ? Utils.formatTimestamp(runInfo.startTime, intl) : <EmptyValue />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created by\"\n              description=\"Run page > Overview > Run author section label\"\n            />\n          }\n          value={<RunViewUserLinkBox runInfo={runInfo} tags={tags} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Experiment ID\"\n              description=\"Run page > Overview > experiment ID section label\"\n            />\n          }\n          value={<DetailsOverviewCopyableIdBox value={runInfo?.experimentId ?? ''} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage defaultMessage=\"Status\" description=\"Run page > Overview > Run status section label\" />\n          }\n          value={<RunViewStatusBox status={runInfo.status} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={<FormattedMessage defaultMessage=\"Run ID\" description=\"Run page > Overview > Run ID section label\" />}\n          value={<DetailsOverviewCopyableIdBox value={runInfo.runUuid ?? ''} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Duration\"\n              description=\"Run page > Overview > Run duration section label\"\n            />\n          }\n          value={Utils.getDuration(runInfo.startTime, runInfo.endTime)}\n        />\n        {parentRunIdTag && (\n          <DetailsOverviewMetadataRow\n            title={<FormattedMessage defaultMessage=\"Parent run\" description=\"Run page > Overview > Parent run\" />}\n            value={<RunViewParentRunBox parentRunUuid={parentRunIdTag.value} />}\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Datasets used\"\n              description=\"Run page > Overview > Run datasets section label\"\n            />\n          }\n          value={\n            datasets?.length ? <RunViewDatasetBox tags={tags} runInfo={runInfo} datasets={datasets} /> : <EmptyValue />\n          }\n        />\n        <DetailsOverviewMetadataRow\n          title={<FormattedMessage defaultMessage=\"Tags\" description=\"Run page > Overview > Run tags section label\" />}\n          value={<RunViewTagsBox runUuid={runInfo.runUuid ?? ''} tags={tags} onTagsUpdated={onRunDataUpdated} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage defaultMessage=\"Source\" description=\"Run page > Overview > Run source section label\" />\n          }\n          value={<RunViewSourceBox tags={tags} search={search} runUuid={runUuid} />}\n        />\n        {shouldRenderLoggedModelsBox && (\n          <DetailsOverviewMetadataRow\n            title={\n              <FormattedMessage\n                defaultMessage=\"Logged models\"\n                description=\"Run page > Overview > Run models section label\"\n              />\n            }\n            value={\n              isLoadingLoggedModels ? (\n                <Spinner />\n              ) : shouldDisplayContentsOfLoggedModelsBox ? (\n                <RunViewLoggedModelsBox\n                  // Pass the run info and logged models\n                  runInfo={runInfo}\n                  loggedModels={loggedModelsFromTags}\n                  // Provide loggedModels from IA v3\n                  loggedModelsV3={loggedModelsV3}\n                />\n              ) : (\n                <EmptyValue />\n              )\n            }\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Registered models\"\n              description=\"Run page > Overview > Run models section label\"\n            />\n          }\n          value={\n            registeredModelVersionSummaries?.length > 0 ? (\n              <RunViewRegisteredModelsBox registeredModelVersionSummaries={registeredModelVersionSummaries} />\n            ) : (\n              <EmptyValue />\n            )\n          }\n        />\n        {renderPromptMetadataRow()}\n      </DetailsOverviewMetadataTable>\n    );\n  };\n\n  const renderParams = () => {\n    return <DetailsOverviewParamsTable params={params} />;\n  };\n\n  const detailsSectionsV2 = useRunDetailsPageOverviewSectionsV2({\n    runUuid,\n    runInfo,\n    tags,\n    onTagsUpdated: onRunDataUpdated,\n    datasets,\n    loggedModelsV3,\n    shouldRenderLoggedModelsBox,\n    registeredModelVersionSummaries,\n  });\n  const usingSidebarLayout = usingUnifiedDetailsLayout;\n  return (\n    <DetailsPageLayout\n      css={{ flex: 1, alignSelf: 'flex-start' }}\n      //\n      // Enable sidebar layout based on feature flag\n      usingSidebarLayout={usingSidebarLayout}\n      secondarySections={detailsSectionsV2}\n    >\n      <RunViewDescriptionBox runUuid={runUuid} tags={tags} onDescriptionChanged={onRunDataUpdated} />\n      {!usingSidebarLayout && (\n        <>\n          <Typography.Title level={4}>\n            <FormattedMessage defaultMessage=\"Details\" description=\"Run page > Overview > Details section title\" />\n          </Typography.Title>\n          {renderDetails()}\n        </>\n      )}\n      <div\n        // Use different grid setup for unified details page layout\n        css={[\n          usingSidebarLayout ? { flexDirection: 'column' } : { minHeight: 360, maxHeight: 760 },\n          { display: 'flex', gap: theme.spacing.lg, overflow: 'hidden' },\n        ]}\n      >\n        <RunViewMetricsTable latestMetrics={latestMetrics} runInfo={runInfo} loggedModels={loggedModelsV3} />\n        {renderParams()}\n      </div>\n      {isRunPageLoggedModelsTableEnabled() && containsLoggedModelsFromInputsOutputs && (\n        <>\n          <Spacer />\n          <div css={{ minHeight: 360, maxHeight: 760, overflow: 'hidden', display: 'flex' }}>\n            <RunViewLoggedModelsTable\n              loggedModelsV3={loggedModelsV3}\n              isLoadingLoggedModels={isLoadingLoggedModels}\n              inputs={runInputs}\n              outputs={runOutputs}\n              runInfo={runInfo}\n              loggedModelsError={loggedModelsError}\n            />\n          </div>\n        </>\n      )}\n      {!usingSidebarLayout && <Spacer />}\n    </DetailsPageLayout>\n  );\n};\n","import Routes from '../routes';\nimport { ErrorView } from '../../common/components/ErrorView';\n\ntype Props = {\n  runId: string;\n};\n\nexport function RunNotFoundView({ runId }: Props) {\n  return (\n    <ErrorView\n      statusCode={404}\n      subMessage={`Run ID ${runId} does not exist`}\n      fallbackHomePageReactRoute={Routes.rootRoute}\n    />\n  );\n}\n","import type { MetricHistoryByName, RunInfoEntity } from '../../types';\nimport {\n  containsMultipleRunsTooltipData,\n  RunsChartsTooltipMode,\n  type RunsChartsTooltipBodyProps,\n} from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { isUndefined } from 'lodash';\nimport type {\n  RunsCompareMultipleTracesTooltipData,\n  RunsMetricsSingleTraceTooltipData,\n} from '../runs-charts/components/RunsMetricsLinePlot';\nimport type { RunsMetricsBarPlotHoverData } from '../runs-charts/components/RunsMetricsBarPlot';\nimport { RunsMultipleTracesTooltipBody } from '../runs-charts/components/RunsMultipleTracesTooltipBody';\nimport { Spacer, Typography } from '@databricks/design-system';\n\n/**\n * Tooltip body displayed when hovering over run view metric charts\n */\nexport const RunViewChartTooltipBody = ({\n  contextData: { metricsForRun },\n  hoverData,\n  chartData: { metricKey },\n  isHovering,\n  mode,\n}: RunsChartsTooltipBodyProps<\n  { metricsForRun: MetricHistoryByName },\n  { metricKey: string },\n  RunsMetricsBarPlotHoverData | RunsMetricsSingleTraceTooltipData | RunsCompareMultipleTracesTooltipData\n>) => {\n  const singleTraceHoverData = containsMultipleRunsTooltipData(hoverData) ? hoverData.hoveredDataPoint : hoverData;\n  const intl = useIntl();\n\n  if (\n    mode === RunsChartsTooltipMode.MultipleTracesWithScanline &&\n    containsMultipleRunsTooltipData(hoverData) &&\n    isHovering\n  ) {\n    return <RunsMultipleTracesTooltipBody hoverData={hoverData} />;\n  }\n\n  if (!singleTraceHoverData?.metricEntity) {\n    return null;\n  }\n\n  const { timestamp, step, value } = singleTraceHoverData.metricEntity;\n\n  const metricContainsHistory = metricsForRun?.[metricKey]?.length > 1;\n  const isSystemMetric = isSystemMetricKey(metricKey);\n  const displayTimestamp = metricContainsHistory && isSystemMetric && !isUndefined(timestamp);\n  const displayStep = metricContainsHistory && !isSystemMetric && !isUndefined(step);\n\n  return (\n    <div>\n      {displayStep && (\n        <div css={styles.valueField}>\n          <strong>\n            <FormattedMessage defaultMessage=\"Step\" description=\"Run page > Charts tab > Chart tooltip > Step label\" />:\n          </strong>{' '}\n          {step}\n        </div>\n      )}\n      {displayTimestamp && (\n        <div css={styles.valueField}>\n          <strong>\n            <FormattedMessage\n              defaultMessage=\"Timestamp\"\n              description=\"Run page > Charts tab > Chart tooltip > Timestamp label\"\n            />\n            :\n          </strong>{' '}\n          {Utils.formatTimestamp(timestamp, intl)}\n        </div>\n      )}\n      {value && (\n        <div>\n          <Typography.Text bold>{metricKey}</Typography.Text>\n          <Spacer size=\"xs\" />\n          <Typography.Text>{value}</Typography.Text>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  valueField: {\n    whiteSpace: 'nowrap' as const,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n};\n","import { TableSkeleton, ToggleButton, useDesignSystemTheme } from '@databricks/design-system';\nimport { compact, mapValues, values } from 'lodash';\nimport { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { ReduxState } from '../../../redux-types';\nimport type { MetricEntitiesByName, RunInfoEntity } from '../../types';\nimport { KeyValueEntity } from '../../../common/types';\n\nimport { RunsChartsTooltipWrapper } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { RunViewChartTooltipBody } from './RunViewChartTooltipBody';\nimport { RunsChartType, RunsChartsCardConfig } from '../runs-charts/runs-charts.types';\nimport type { RunsChartsRunData } from '../runs-charts/components/RunsCharts.common';\nimport { RunsChartsLineChartXAxisType } from '../runs-charts/components/RunsCharts.common';\nimport type { ExperimentRunsChartsUIConfiguration } from '../experiment-page/models/ExperimentPageUIState';\nimport { RunsChartsSectionAccordion } from '../runs-charts/components/sections/RunsChartsSectionAccordion';\nimport { RunsChartsConfigureModal } from '../runs-charts/components/RunsChartsConfigureModal';\nimport {\n  RunsChartsUIConfigurationContextProvider,\n  useConfirmChartCardConfigurationFn,\n  useInsertRunsChartsFn,\n  useRemoveRunsChartFn,\n  useReorderRunsChartsFn,\n} from '../runs-charts/hooks/useRunsChartsUIConfiguration';\nimport {\n  LOG_IMAGE_TAG_INDICATOR,\n  MLFLOW_MODEL_METRIC_NAME,\n  MLFLOW_SYSTEM_METRIC_NAME,\n  MLFLOW_SYSTEM_METRIC_PREFIX,\n} from '../../constants';\nimport LocalStorageUtils from '../../../common/utils/LocalStorageUtils';\nimport { RunsChartsFullScreenModal } from '../runs-charts/components/RunsChartsFullScreenModal';\nimport { useIsTabActive } from '../../../common/hooks/useIsTabActive';\nimport { shouldEnableRunDetailsPageAutoRefresh } from '../../../common/utils/FeatureUtils';\nimport { usePopulateImagesByRunUuid } from '../experiment-page/hooks/usePopulateImagesByRunUuid';\nimport type { UseGetRunQueryResponseRunInfo } from './hooks/useGetRunQuery';\nimport { RunsChartsGlobalChartSettingsDropdown } from '../runs-charts/components/RunsChartsGlobalChartSettingsDropdown';\nimport { RunsChartsDraggableCardsGridContextProvider } from '../runs-charts/components/RunsChartsDraggableCardsGridContext';\nimport { RunsChartsFilterInput } from '../runs-charts/components/RunsChartsFilterInput';\n\ninterface RunViewMetricChartsProps {\n  metricKeys: string[];\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  /**\n   * Whether to display model or system metrics. This affects labels and tooltips.\n   */\n  mode: 'model' | 'system';\n\n  latestMetrics?: MetricEntitiesByName;\n  tags?: Record<string, KeyValueEntity>;\n  params?: Record<string, KeyValueEntity>;\n}\n\n/**\n * Component displaying metric charts for a single run\n */\nconst RunViewMetricChartsImpl = ({\n  runInfo,\n  metricKeys,\n  mode,\n  chartUIState,\n  updateChartsUIState,\n  latestMetrics = {},\n  params = {},\n  tags = {},\n}: RunViewMetricChartsProps & {\n  chartUIState: ExperimentRunsChartsUIConfiguration;\n  updateChartsUIState: (\n    stateSetter: (state: ExperimentRunsChartsUIConfiguration) => ExperimentRunsChartsUIConfiguration,\n  ) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [search, setSearch] = useState('');\n  const { formatMessage } = useIntl();\n\n  const { compareRunCharts, compareRunSections, chartsSearchFilter } = chartUIState;\n\n  // For the draggable grid layout, we filter visible cards on this level\n  const visibleChartCards = useMemo(() => {\n    return compareRunCharts?.filter((chart) => !chart.deleted) ?? [];\n  }, [compareRunCharts]);\n\n  const [fullScreenChart, setFullScreenChart] = useState<\n    | {\n        config: RunsChartsCardConfig;\n        title: string | ReactNode;\n        subtitle: ReactNode;\n      }\n    | undefined\n  >(undefined);\n\n  const metricsForRun = useSelector(({ entities }: ReduxState) => {\n    return mapValues(entities.sampledMetricsByRunUuid[runInfo.runUuid ?? ''], (metricsByRange) => {\n      return compact(\n        values(metricsByRange)\n          .map(({ metricsHistory }) => metricsHistory)\n          .flat(),\n      );\n    });\n  });\n\n  const tooltipContextValue = useMemo(() => ({ runInfo, metricsForRun }), [runInfo, metricsForRun]);\n\n  const { imagesByRunUuid } = useSelector((state: ReduxState) => ({\n    imagesByRunUuid: state.entities.imagesByRunUuid,\n  }));\n\n  const [configuredCardConfig, setConfiguredCardConfig] = useState<RunsChartsCardConfig | null>(null);\n\n  const reorderCharts = useReorderRunsChartsFn();\n\n  const addNewChartCard = (metricSectionId: string) => (type: RunsChartType) =>\n    setConfiguredCardConfig(RunsChartsCardConfig.getEmptyChartCardByType(type, false, undefined, metricSectionId));\n\n  const insertCharts = useInsertRunsChartsFn();\n\n  const startEditChart = (chartCard: RunsChartsCardConfig) => setConfiguredCardConfig(chartCard);\n\n  const removeChart = useRemoveRunsChartFn();\n\n  const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n\n  const submitForm = (configuredCard: Partial<RunsChartsCardConfig>) => {\n    confirmChartCardConfiguration(configuredCard);\n\n    // Hide the modal\n    setConfiguredCardConfig(null);\n  };\n\n  // Create a single run data object to be used in charts\n  const chartData: RunsChartsRunData[] = useMemo(\n    () => [\n      {\n        displayName: runInfo.runName ?? '',\n        metrics: latestMetrics,\n        params,\n        tags,\n        images: imagesByRunUuid[runInfo.runUuid ?? ''] || {},\n        metricHistory: {},\n        uuid: runInfo.runUuid ?? '',\n        color: theme.colors.primary,\n        runInfo,\n      },\n    ],\n    [runInfo, latestMetrics, params, tags, imagesByRunUuid, theme],\n  );\n\n  useEffect(() => {\n    if ((!compareRunSections || !compareRunCharts) && chartData.length > 0) {\n      const { resultChartSet, resultSectionSet } = RunsChartsCardConfig.getBaseChartAndSectionConfigs({\n        runsData: chartData,\n        enabledSectionNames: [mode === 'model' ? MLFLOW_MODEL_METRIC_NAME : MLFLOW_SYSTEM_METRIC_NAME],\n        // Filter only model or system metrics\n        filterMetricNames: (name) => {\n          const isSystemMetric = name.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX);\n          return mode === 'model' ? !isSystemMetric : isSystemMetric;\n        },\n      });\n\n      updateChartsUIState((current) => ({\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      }));\n    }\n  }, [compareRunCharts, compareRunSections, chartData, mode, updateChartsUIState]);\n\n  /**\n   * Update charts with the latest metrics if new are found\n   */\n  useEffect(() => {\n    updateChartsUIState((current) => {\n      if (!current.compareRunCharts || !current.compareRunSections) {\n        return current;\n      }\n      const { resultChartSet, resultSectionSet, isResultUpdated } = RunsChartsCardConfig.updateChartAndSectionConfigs({\n        compareRunCharts: current.compareRunCharts,\n        compareRunSections: current.compareRunSections,\n        runsData: chartData,\n        isAccordionReordered: current.isAccordionReordered,\n        // Filter only model or system metrics\n        filterMetricNames: (name) => {\n          const isSystemMetric = name.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX);\n          return mode === 'model' ? !isSystemMetric : isSystemMetric;\n        },\n      });\n\n      if (!isResultUpdated) {\n        return current;\n      }\n      return {\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      };\n    });\n  }, [chartData, updateChartsUIState, mode]);\n\n  const isTabActive = useIsTabActive();\n  const autoRefreshEnabled = chartUIState.autoRefreshEnabled && shouldEnableRunDetailsPageAutoRefresh() && isTabActive;\n\n  // Determine if run contains images logged by `mlflow.log_image()`\n  const containsLoggedImages = Boolean(tags[LOG_IMAGE_TAG_INDICATOR]);\n\n  usePopulateImagesByRunUuid({\n    runUuids: [runInfo.runUuid ?? ''],\n    runUuidsIsActive: [runInfo.status === 'RUNNING'],\n    autoRefreshEnabled,\n    enabled: containsLoggedImages,\n  });\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        css={{\n          paddingBottom: theme.spacing.md,\n          display: 'flex',\n          gap: theme.spacing.sm,\n          flex: '0 0 auto',\n        }}\n      >\n        <RunsChartsFilterInput chartsSearchFilter={chartsSearchFilter} />\n        {shouldEnableRunDetailsPageAutoRefresh() && (\n          <ToggleButton\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewmetricchartsv2.tsx_244\"\n            pressed={chartUIState.autoRefreshEnabled}\n            onPressedChange={(pressed) => {\n              updateChartsUIState((current) => ({ ...current, autoRefreshEnabled: pressed }));\n            }}\n          >\n            {formatMessage({\n              defaultMessage: 'Auto-refresh',\n              description: 'Run page > Charts tab > Auto-refresh toggle button',\n            })}\n          </ToggleButton>\n        )}\n        <RunsChartsGlobalChartSettingsDropdown\n          metricKeyList={metricKeys}\n          globalLineChartConfig={chartUIState.globalLineChartConfig}\n          updateUIState={updateChartsUIState}\n        />\n      </div>\n      <div\n        css={{\n          flex: 1,\n          overflow: 'auto',\n        }}\n      >\n        <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={RunViewChartTooltipBody}>\n          <RunsChartsDraggableCardsGridContextProvider visibleChartCards={visibleChartCards}>\n            <RunsChartsSectionAccordion\n              compareRunSections={compareRunSections}\n              compareRunCharts={visibleChartCards}\n              reorderCharts={reorderCharts}\n              insertCharts={insertCharts}\n              chartData={chartData}\n              startEditChart={startEditChart}\n              removeChart={removeChart}\n              addNewChartCard={addNewChartCard}\n              search={chartsSearchFilter ?? ''}\n              supportedChartTypes={[RunsChartType.LINE, RunsChartType.BAR, RunsChartType.IMAGE]}\n              setFullScreenChart={setFullScreenChart}\n              autoRefreshEnabled={autoRefreshEnabled}\n              globalLineChartConfig={chartUIState.globalLineChartConfig}\n              groupBy={null}\n            />\n          </RunsChartsDraggableCardsGridContextProvider>\n        </RunsChartsTooltipWrapper>\n      </div>\n      {configuredCardConfig && (\n        <RunsChartsConfigureModal\n          chartRunData={chartData}\n          metricKeyList={metricKeys}\n          paramKeyList={[]}\n          config={configuredCardConfig}\n          onSubmit={submitForm}\n          onCancel={() => setConfiguredCardConfig(null)}\n          groupBy={null}\n          supportedChartTypes={[RunsChartType.LINE, RunsChartType.BAR, RunsChartType.IMAGE]}\n          globalLineChartConfig={chartUIState.globalLineChartConfig}\n        />\n      )}\n      <RunsChartsFullScreenModal\n        fullScreenChart={fullScreenChart}\n        onCancel={() => setFullScreenChart(undefined)}\n        chartData={chartData}\n        tooltipContextValue={tooltipContextValue}\n        tooltipComponent={RunViewChartTooltipBody}\n        autoRefreshEnabled={autoRefreshEnabled}\n        groupBy={null}\n      />\n    </div>\n  );\n};\n\nexport const RunViewMetricCharts = (props: RunViewMetricChartsProps) => {\n  const persistenceIdentifier = `${props.runInfo.runUuid}-${props.mode}`;\n\n  const localStore = useMemo(\n    () => LocalStorageUtils.getStoreForComponent('RunPage', persistenceIdentifier),\n    [persistenceIdentifier],\n  );\n\n  const [chartUIState, updateChartsUIState] = useState<ExperimentRunsChartsUIConfiguration>(() => {\n    const defaultChartState: ExperimentRunsChartsUIConfiguration = {\n      isAccordionReordered: false,\n      compareRunCharts: undefined,\n      compareRunSections: undefined,\n      // Auto-refresh is enabled by default only if the flag is set\n      autoRefreshEnabled: shouldEnableRunDetailsPageAutoRefresh(),\n      globalLineChartConfig: {\n        xAxisKey: RunsChartsLineChartXAxisType.STEP,\n        lineSmoothness: 0,\n        selectedXAxisMetricKey: '',\n      },\n    };\n    try {\n      const persistedChartState = localStore.getItem('chartUIState');\n\n      if (!persistedChartState) {\n        return defaultChartState;\n      }\n      return JSON.parse(persistedChartState);\n    } catch {\n      return defaultChartState;\n    }\n  });\n\n  useEffect(() => {\n    localStore.setItem('chartUIState', JSON.stringify(chartUIState));\n  }, [chartUIState, localStore]);\n\n  return (\n    <RunsChartsUIConfigurationContextProvider updateChartsUIState={updateChartsUIState}>\n      <RunViewMetricChartsImpl {...props} chartUIState={chartUIState} updateChartsUIState={updateChartsUIState} />\n    </RunsChartsUIConfigurationContextProvider>\n  );\n};\n\nconst RunViewMetricChartsSkeleton = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'grid',\n        gridTemplateColumns: '1fr 1fr 1fr',\n        gridTemplateRows: '200px',\n        gap: theme.spacing.md,\n      }}\n      className={className}\n    >\n      {new Array(6).fill(null).map((_, index) => (\n        <TableSkeleton key={index} lines={5} seed={index.toString()} />\n      ))}\n    </div>\n  );\n};\n","import type { KeyValueEntity } from '../../../common/types';\nimport { TracesView } from '../traces/TracesView';\nimport { useMemo } from 'react';\nimport { ExperimentViewTracesTableColumns } from '../traces/TracesView.utils';\n\nconst disabledColumns = [ExperimentViewTracesTableColumns.runName];\n\n/**\n * A run page tab containing the artifact browser\n */\nexport const RunViewTracesTab = ({\n  experimentId,\n  runUuid,\n}: {\n  runUuid: string;\n  experimentId: string;\n  runTags: Record<string, KeyValueEntity>;\n}) => {\n  const stableExperimentId = useMemo(() => [experimentId], [experimentId]);\n\n  return (\n    <div css={{ flex: 1, minWidth: 0 }}>\n      <TracesView experimentIds={stableExperimentId} runUuid={runUuid} disabledColumns={disabledColumns} />\n    </div>\n  );\n};\n","import { useMemo } from 'react';\nimport { useGetLoggedModelsQuery } from '../../../hooks/logged-models/useGetLoggedModelsQuery';\nimport { UseGetRunQueryResponseInputs, UseGetRunQueryResponseOutputs } from '../../run-page/hooks/useGetRunQuery';\nimport { compact, isEmpty, uniq } from 'lodash';\n\nexport const useLoggedModelsForExperimentRunV2 = ({\n  runInputs,\n  runOutputs,\n  enabled = true,\n}: {\n  runInputs?: UseGetRunQueryResponseInputs;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  enabled?: boolean;\n}) => {\n  const modelIds = useMemo(() => {\n    const inputs = runInputs?.modelInputs ?? [];\n    const outputs = runOutputs?.modelOutputs ?? [];\n    const allModels = [...inputs, ...outputs];\n    const modelIds = uniq(compact(allModels.map(({ modelId }) => modelId)));\n\n    if (isEmpty(modelIds)) {\n      return undefined;\n    }\n\n    return modelIds;\n  }, [runInputs, runOutputs]);\n\n  const isHookEnabled = enabled && !isEmpty(modelIds);\n\n  const {\n    data: loggedModelsData,\n    isLoading,\n    error,\n  } = useGetLoggedModelsQuery(\n    {\n      modelIds,\n    },\n    {\n      enabled: isHookEnabled,\n    },\n  );\n\n  return { models: loggedModelsData, isLoading: isHookEnabled && isLoading, error };\n};\n","import { DangerIcon, Empty, ParagraphSkeleton, TitleSkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport { useSelector } from 'react-redux';\nimport invariant from 'invariant';\nimport { useMemo, useState } from 'react';\n\nimport { PageContainer } from '../../../common/components/PageContainer';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { RunPageTabName } from '../../constants';\nimport { RenameRunModal } from '../modals/RenameRunModal';\nimport { RunViewArtifactTab } from './RunViewArtifactTab';\nimport { RunViewHeader } from './RunViewHeader';\nimport { RunViewOverview } from './RunViewOverview';\nimport { useRunDetailsPageData } from './hooks/useRunDetailsPageData';\nimport { useRunViewActiveTab } from './useRunViewActiveTab';\nimport { ReduxState } from '../../../redux-types';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport { RunNotFoundView } from '../RunNotFoundView';\nimport { ErrorCodes } from '../../../common/constants';\nimport NotFoundPage from '../NotFoundPage';\nimport { FormattedMessage } from 'react-intl';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport DeleteRunModal from '../modals/DeleteRunModal';\nimport Routes from '../../routes';\nimport { RunViewMetricCharts } from './RunViewMetricCharts';\nimport {\n  shouldEnableGraphQLRunDetailsPage,\n  shouldUseGetLoggedModelsBatchAPI,\n} from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { RunViewTracesTab } from './RunViewTracesTab';\nimport { getGraphQLErrorMessage } from '../../../graphql/get-graphql-error';\nimport { useLoggedModelsForExperimentRun } from '../experiment-page/hooks/useLoggedModelsForExperimentRun';\nimport { useLoggedModelsForExperimentRunV2 } from '../experiment-page/hooks/useLoggedModelsForExperimentRunV2';\n\nconst RunPageLoadingState = () => (\n  <PageContainer>\n    <TitleSkeleton\n      loading\n      label={<FormattedMessage defaultMessage=\"Run page loading\" description=\"Run page > Loading state\" />}\n    />\n    {[...Array(3).keys()].map((i) => (\n      <ParagraphSkeleton key={i} seed={`s-${i}`} />\n    ))}\n  </PageContainer>\n);\n\nexport const RunPage = () => {\n  const { runUuid, experimentId } = useParams<{\n    runUuid: string;\n    experimentId: string;\n  }>();\n  const navigate = useNavigate();\n  const { theme } = useDesignSystemTheme();\n  const [renameModalVisible, setRenameModalVisible] = useState(false);\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\n\n  invariant(runUuid, '[RunPage] Run UUID route param not provided');\n  invariant(experimentId, '[RunPage] Experiment ID route param not provided');\n\n  const {\n    experiment,\n    error,\n    latestMetrics,\n    loading,\n    params,\n    refetchRun,\n    runInfo,\n    tags,\n    experimentFetchError,\n    runFetchError,\n    apiError,\n    datasets,\n    runInputs,\n    runOutputs,\n    registeredModelVersionSummaries,\n  } = useRunDetailsPageData({\n    experimentId,\n    runUuid,\n  });\n\n  const [modelMetricKeys, systemMetricKeys] = useMemo<[string[], string[]]>(() => {\n    if (!latestMetrics) {\n      return [[], []];\n    }\n\n    return [\n      Object.keys(latestMetrics).filter((metricKey) => !isSystemMetricKey(metricKey)),\n      Object.keys(latestMetrics).filter((metricKey) => isSystemMetricKey(metricKey)),\n    ];\n  }, [latestMetrics]);\n\n  const { comparedExperimentIds = [], hasComparedExperimentsBefore = false } = useSelector(\n    (state: ReduxState) => state.comparedExperiments || {},\n  );\n\n  const activeTab = useRunViewActiveTab();\n\n  const isUsingGetLoggedModelsApi = shouldUseGetLoggedModelsBatchAPI();\n\n  const loggedModelsForRun = useLoggedModelsForExperimentRun(\n    experimentId,\n    runUuid,\n    runInputs,\n    runOutputs,\n    !isUsingGetLoggedModelsApi,\n  );\n  const loggedModelsForRunV2 = useLoggedModelsForExperimentRunV2({\n    runInputs,\n    runOutputs,\n    enabled: isUsingGetLoggedModelsApi,\n  });\n\n  const {\n    error: loggedModelsError,\n    isLoading: isLoadingLoggedModels,\n    models: loggedModelsV3,\n  } = isUsingGetLoggedModelsApi ? loggedModelsForRunV2 : loggedModelsForRun;\n\n  const renderActiveTab = () => {\n    if (!runInfo) {\n      return null;\n    }\n    switch (activeTab) {\n      case RunPageTabName.MODEL_METRIC_CHARTS:\n        return (\n          <RunViewMetricCharts\n            key=\"model\"\n            mode=\"model\"\n            metricKeys={modelMetricKeys}\n            runInfo={runInfo}\n            latestMetrics={latestMetrics}\n            tags={tags}\n            params={params}\n          />\n        );\n\n      case RunPageTabName.SYSTEM_METRIC_CHARTS:\n        return (\n          <RunViewMetricCharts\n            key=\"system\"\n            mode=\"system\"\n            metricKeys={systemMetricKeys}\n            runInfo={runInfo}\n            latestMetrics={latestMetrics}\n            tags={tags}\n            params={params}\n          />\n        );\n      case RunPageTabName.ARTIFACTS:\n        return (\n          <RunViewArtifactTab\n            runUuid={runUuid}\n            runTags={tags}\n            runOutputs={runOutputs}\n            experimentId={experimentId}\n            artifactUri={runInfo.artifactUri ?? undefined}\n          />\n        );\n      case RunPageTabName.TRACES:\n        return <RunViewTracesTab runUuid={runUuid} runTags={tags} experimentId={experimentId} />;\n    }\n\n    return (\n      <RunViewOverview\n        runInfo={runInfo}\n        tags={tags}\n        params={params}\n        latestMetrics={latestMetrics}\n        runUuid={runUuid}\n        onRunDataUpdated={refetchRun}\n        runInputs={runInputs}\n        runOutputs={runOutputs}\n        datasets={datasets}\n        registeredModelVersionSummaries={registeredModelVersionSummaries}\n        loggedModelsV3={loggedModelsV3}\n        isLoadingLoggedModels={isLoadingLoggedModels}\n        loggedModelsError={loggedModelsError ?? undefined}\n      />\n    );\n  };\n\n  // Use full height page with scrollable tab area only for non-xs screens\n  const useFullHeightPage = useMediaQuery(`(min-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  const initialLoading = loading && (!runInfo || !experiment);\n\n  // Handle \"run not found\" error\n  if (\n    // For REST API:\n    (runFetchError instanceof ErrorWrapper && runFetchError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST) ||\n    // For GraphQL:\n    apiError?.code === ErrorCodes.RESOURCE_DOES_NOT_EXIST ||\n    (error && getGraphQLErrorMessage(error).match(/not found$/))\n  ) {\n    return <RunNotFoundView runId={runUuid} />;\n  }\n\n  // Handle experiment not found error\n  if (\n    experimentFetchError instanceof ErrorWrapper &&\n    experimentFetchError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n  ) {\n    return <NotFoundPage />;\n  }\n\n  // Catch-all for legacy REST API errors\n  if (runFetchError || experimentFetchError) {\n    return null;\n  }\n\n  // Catch-all for GraphQL errors\n  if (shouldEnableGraphQLRunDetailsPage() && (error || apiError)) {\n    return (\n      <div css={{ marginTop: theme.spacing.lg }}>\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"Can't load run details\"\n              description=\"Run page > error loading page title\"\n            />\n          }\n          description={getGraphQLErrorMessage(apiError ?? error)}\n          image={<DangerIcon />}\n        />\n      </div>\n    );\n  }\n\n  // Display spinner/skeleton for the initial data load\n  if (initialLoading || !runInfo || !experiment) {\n    return <RunPageLoadingState />;\n  }\n\n  return (\n    <>\n      <PageContainer usesFullHeight={useFullHeightPage}>\n        {/* Header fixed on top */}\n        <RunViewHeader\n          comparedExperimentIds={comparedExperimentIds}\n          experiment={experiment}\n          handleRenameRunClick={() => setRenameModalVisible(true)}\n          handleDeleteRunClick={() => setDeleteModalVisible(true)}\n          hasComparedExperimentsBefore={hasComparedExperimentsBefore}\n          runDisplayName={Utils.getRunDisplayName(runInfo, runUuid)}\n          runTags={tags}\n          runParams={params}\n          runUuid={runUuid}\n          artifactRootUri={runInfo?.artifactUri ?? undefined}\n          registeredModelVersionSummaries={registeredModelVersionSummaries}\n          isLoading={loading || isLoadingLoggedModels}\n        />\n        {/* Scroll tab contents independently within own container */}\n        <div css={{ flex: 1, overflow: 'auto', marginBottom: theme.spacing.sm, display: 'flex' }}>\n          {renderActiveTab()}\n        </div>\n      </PageContainer>\n      <RenameRunModal\n        runUuid={runUuid}\n        onClose={() => setRenameModalVisible(false)}\n        runName={runInfo.runName ?? ''}\n        isOpen={renameModalVisible}\n        onSuccess={refetchRun}\n      />\n      <DeleteRunModal\n        selectedRunIds={[runUuid]}\n        onClose={() => setDeleteModalVisible(false)}\n        isOpen={deleteModalVisible}\n        onSuccess={() => {\n          navigate(Routes.getExperimentPageRoute(experimentId));\n        }}\n      />\n    </>\n  );\n};\n\nexport default RunPage;\n","import { useMemo } from 'react';\nimport { useSearchLoggedModelsQuery } from '../../../hooks/logged-models/useSearchLoggedModelsQuery';\nimport { UseGetRunQueryResponseInputs, UseGetRunQueryResponseOutputs } from '../../run-page/hooks/useGetRunQuery';\nimport { compact, isEmpty, uniq } from 'lodash';\n\nexport const useLoggedModelsForExperimentRun = (\n  experimentId: string,\n  runId: string,\n  runInputs?: UseGetRunQueryResponseInputs,\n  runOutputs?: UseGetRunQueryResponseOutputs,\n  enabled = true,\n) => {\n  const searchQuery = useMemo(() => {\n    const inputs = runInputs?.modelInputs ?? [];\n    const outputs = runOutputs?.modelOutputs ?? [];\n    const allModels = [...inputs, ...outputs];\n    const modelIds = uniq(compact(allModels.map(({ modelId }) => modelId)));\n\n    if (isEmpty(modelIds)) {\n      return undefined;\n    }\n\n    return `attributes.model_id IN (${modelIds.map((id) => `'${id}'`).join(',')})`;\n  }, [runInputs, runOutputs]);\n\n  const isHookEnabled = enabled && Boolean(searchQuery);\n\n  const {\n    data: loggedModelsData,\n    isLoading,\n    error,\n  } = useSearchLoggedModelsQuery(\n    { experimentIds: [experimentId], searchQuery },\n    {\n      enabled: isHookEnabled,\n    },\n  );\n\n  return {\n    // We explicitly check if the hook is supposed to be enabled before returning data,\n    // otherwise react-query might erroneously return data from the cache.\n    models: isHookEnabled ? loggedModelsData : undefined,\n    // Same goes for `isLoading` which sometimes returns `true` despite the hook being disabled.\n    isLoading: isHookEnabled && isLoading,\n    error,\n  };\n};\n","import { ApolloError } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\n\ninterface CommonGraphQLApiError {\n  code: string | null;\n  message: string | null;\n}\n\nexport const getGraphQLErrorMessage = (error?: CommonGraphQLApiError | ApolloError | Error | any) => {\n  if (!error) {\n    return undefined;\n  }\n  if (error instanceof ApolloError) {\n    if (error.graphQLErrors.length > 0) {\n      return error.graphQLErrors.map((e) => e.toString()).join(', ');\n    }\n  }\n\n  if ('message' in error) {\n    return error.message;\n  }\n\n  return error.toString();\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { PageWrapper, Spacer } from '@databricks/design-system';\n\ntype OwnProps = {\n  usesFullHeight?: boolean;\n  children?: React.ReactNode;\n};\n\n// @ts-expect-error TS(2565): Property 'defaultProps' is used before being assig... Remove this comment to see the full error message\ntype Props = OwnProps & typeof PageContainer.defaultProps;\n\nexport function PageContainer(props: Props) {\n  const { usesFullHeight, ...restProps } = props;\n  return (\n    // @ts-expect-error TS(2322): Type '{ height: string; display: string; flexDirec... Remove this comment to see the full error message\n    <PageWrapper css={usesFullHeight ? styles.useFullHeightLayout : styles.wrapper}>\n      {/* @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message */}\n      <Spacer css={styles.fixedSpacer} />\n      {usesFullHeight ? props.children : <div {...restProps} css={styles.container} />}\n    </PageWrapper>\n  );\n}\n\nPageContainer.defaultProps = {\n  usesFullHeight: false,\n};\n\nconst styles = {\n  useFullHeightLayout: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    '&:last-child': {\n      flexGrow: 1,\n    },\n  },\n  wrapper: { flex: 1 },\n  fixedSpacer: {\n    // Ensure spacer's fixed height regardless of flex\n    flexShrink: 0,\n  },\n  container: {\n    width: '100%',\n    flexGrow: 1,\n    paddingBottom: 24,\n  },\n};\n","import React, { Component } from 'react';\n\nclass NotFoundPage extends Component {\n  render() {\n    return <div>Resource not found.</div>;\n  }\n}\n\nexport default NotFoundPage;\n"],"names":["RunViewArtifactTab","runTags","experimentId","runOutputs","artifactUri","runUuid","theme","useDesignSystemTheme","useFullHeightPage","useMediaQuery","responsive","breakpoints","sm","_jsx","css","_css","flex","overflow","display","paddingBottom","spacing","md","position","children","ArtifactPage","useAutoHeight","artifactRootUri","useRunViewActiveTab","tabParam","useParams","RunPageTabName","MODEL_METRIC_CHARTS","SYSTEM_METRIC_CHARTS","TRACES","match","ARTIFACTS","OVERVIEW","TABS_WITHOUT_MARGIN","EVALUATIONS","RunViewModeSwitch","navigate","useNavigate","currentTab","removeTabMargin","setRemoveTabMargin","useState","includes","_jsxs","LegacyTabs","activeKey","onChange","newTabKey","Routes","getRunPageTabRoute","getRunPageRoute","tabBarStyle","margin","TabPane","tab","FormattedMessage","id","defaultMessage","_ref","name","styles","_ref2","LoggedModelsDropdownContent","models","onRegisterClick","renderSection","title","sectionModels","DropdownMenu","Group","Label","map","model","registeredModelSummary","first","registeredModelVersionSummaries","Item","componentId","onClick","marginRight","last","path","split","HintColumn","Link","target","to","Button","type","size","e","stopPropagation","endIcon","NewWindowIcon","absolutePath","status","displayedName","version","link","IconWrapper","RegisteredModelOkIcon","ModelVersionStatusIcons","Tag","registeredModels","filter","length","unregisteredModels","_Fragment","Separator","RunViewHeaderRegisterModelButton","loggedModelPaths","useMemo","Utils","getLoggedModelsFromTags","artifactPath","orderBy","source","_model$registeredMode","parseInt","selectedModelToRegister","setSelectedModelToRegister","modelsRegistered","RegisterModel","modelPath","modelRelativePath","disabled","showButton","modalVisible","onCloseModal","Root","modal","LegacyTooltip","placement","values","registeredCount","loggedCount","Trigger","asChild","ChevronDownIcon","Content","align","singleModel","registeredModelVersionSummary","marginLeft","buttonType","RunViewHeader","hasComparedExperimentsBefore","comparedExperimentIds","experiment","runDisplayName","runParams","handleRenameRunClick","handleDeleteRunClick","isLoading","breadcrumbs","_experiment$experimen","getCompareExperimentsPageRoute","numExperiments","getExperimentPageRoute","getExperimentPageLink","shouldEnableExperimentPageHeaderV2","push","getExperimentPageTabRoute","ExperimentPageTabName","Runs","PageHeader","OverflowMenu","menu","itemName","renderRegisterModelButton","_experiment$experimen2","RunViewStatusBox","backgroundColor","isDarkMode","colors","green800","green100","red800","red100","blue800","blue100","RunStatusIcon","Typography","Text","color","RunViewUserLinkBox","runInfo","tags","_runInfo$experimentId","user","getUser","searchRunsByUser","systemMetricsLabel","modelMetricsLabel","defineMessages","metricKeyMatchesFilter","key","toLowerCase","RunViewMetricsTableSection","metricsList","header","table","_otherColumns$find","_otherColumns$find2","column","keyColumn","otherColumns","getLeafHeaders","valueColumn","find","anyRowHasModels","some","loggedModels","isEmpty","modelColumn","TableRow","TableCell","backgroundSecondary","bold","value","_runInfo$runUuid","style","getCanResize","getSize","undefined","getMetricPageRoute","toString","Overflow","_model$info","_model$info$experimen","_model$info2","_model$info$model_id","_model$info3","_model$info4","rel","getExperimentLoggedModelDetailsPage","info","experiment_id","model_id","RunViewMetricsTable","latestMetrics","detailsPageTableStyles","detailsPageNoEntriesStyles","detailsPageNoResultsWrapperStyles","usingUnifiedDetailsLayout","useExperimentTrackingDetailsPageLayoutStyles","intl","useIntl","setFilter","loggedModelsByMetricKey","metricsWithModels","compact","flatMap","_model$data","_model$data$metrics","data","metrics","groupedMetrics","groupBy","mapValues","group","metricValues","metricList","metric","_loggedModelsByMetric","modelColumnDefs","formatMessage","accessorKey","enableResizing","columns","columnDefs","metricSegments","systemMetrics","isSystemMetricKey","modelMetrics","useReactTable","getCoreRowModel","getRowId","row","enableColumnResizing","columnResizeMode","flexDirection","Title","level","padding","border","borderDecorative","borderRadius","general","borderRadiusBase","renderTableContent","Empty","description","areAllResultsFiltered","sum","marginBottom","Input","prefix","SearchIcon","placeholder","allowClear","Table","scrollable","empty","isHeader","TableHeader","setColumnSizing","isResizing","getIsResizing","flexRender","columnDef","getContext","segment","index","DatasetEntry","dataset","role","ExperimentViewDatasetWithContext","datasetWithTags","displayTextAsLink","RunViewDatasetBox","datasets","selectedDatasetWithRun","setSelectedDatasetWithRun","isDrawerOpen","setIsDrawerOpen","firstDataset","remainingDatasets","slice","datasetClicked","_runInfo$runName","runData","runName","gap","alignItems","digest","ExperimentViewDatasetDrawer","isOpen","setIsOpen","RunViewParentRunBox","parentRunUuid","dispatch","useDispatch","parentRunInfoRedux","useSelector","entities","runInfosByUuid","parentRunInfoGraphql","useGetRunQuery","shouldEnableGraphQLRunDetailsPage","parentRunInfo","_parentRunInfoGraphql","useEffect","getRunApi","ParagraphSkeleton","loading","label","RunViewTagsBox","onTagsUpdated","shouldUseSharedTaggingUI","isSavingTags","setIsSavingTags","visibleTagKeys","visibleTagEntities","keys","isUserFacingTag","EditTagsModal","showEditTagsModal","useEditKeyValueTagsModal","valueRequired","allAvailableTags","saveTagsHandler","async","_","existingTags","newTags","setRunTagsBulkApi","then","showEditModal","editTagsLabel","paddingTop","xs","flexWrap","tag","KeyValueTag","enableFullViewModal","Tooltip","content","icon","PencilIcon","Spinner","RunViewDescriptionBox","onDescriptionChanged","_tags$NOTE_CONTENT_TA","noteContent","NOTE_CONTENT_TAG","showNoteEditor","setShowNoteEditor","Hint","EditableNote","defaultMarkdown","onSubmit","markdown","setTagApi","onCancel","handleCancelEditNote","showEditor","RunViewRegisteredModelsBox","modelSummary","queryFn","queryKey","RegisteredPromptsApi","getPromptVersionsForRun","RunViewRegisteredPromptsBox","error","usePromptVersionsForRunQuery","options","_queryResult$error","queryResult","useQuery","retry","refetch","promptVersions","model_versions","parseLinkedPromptsFromRunTags","promptVersion","getPromptDetailsPageRoute","encodeURIComponent","displayText","RunViewLoggedModelsBox","loggedModelsV3","getModelFlavorName","flavors","shouldDisplayArtifactPaths","Set","cursor","height","heightBase","heightSm","ModelsIcon","_model$info$model_id2","getExperimentLoggedModelDetailsPageRoute","_ref3","RunViewSourceBox","search","className","_tags$MLFLOW_RUN_GIT_","_tags$Utils$gitCommit","_tags$Utils$sourceTyp","branchName","MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG","commitHash","gitCommitTag","runSource","renderSource","ExperimentSourceTypeIcon","sourceType","sourceTypeTag","actionPrimaryBackgroundDefault","BranchIcon","Popover","whiteSpace","alignContent","GitCommitIcon","Arrow","CopyButton","showLabel","copyText","CopyIcon","supportedAttributeColumnKeys","ExperimentLoggedModelListPageKnownColumns","RelationshipType","Step","Name","Status","CreationTime","RegisteredModels","Dataset","RunViewLoggedModelsTable","inputs","outputs","isLoadingLoggedModels","loggedModelsError","useCombinedRunInputsOutputsModels","inputLoggedModels","_inputs$modelInputs","uniq","modelInputs","modelInput","modelId","direction","outputLoggedModels","_outputs$modelOutputs","modelOutputs","modelOutput","_outputs$modelOutputs2","_correspondingOutputE","correspondingOutputEntry","step","_uniqBy","uniqBy","loggedModel","_loggedModel$data","run_id","modelData","_modelData$info","columnVisibility","setColumnVisibility","useExperimentLoggedModelListPageTableColumns","disablePinnedColumns","disableOrderBy","ExperimentLoggedModelListPageColumnSelector","onUpdateColumns","customTrigger","ColumnsIcon","Spacer","shrinks","Error","message","Alert","closable","ExperimentLoggedModelOpenDatasetDetailsContextProvider","ExperimentLoggedModelListPageTable","isLoadingMore","moreResultsAvailable","disableLoadMore","getTableTheme","displayShowExampleButton","textPrimary","actionDefaultBackgroundHover","actionDefaultBackgroundPress","backgroundPrimary","overlayOverlay","borderTop","fontSize","typography","fontSizeBase","getShadowScrollStyles","orientation","RunViewDatasetBoxV2","textAlign","iconFontSize","RunDetailsPageMetadataSections","EmptyValue","RunViewOverview","onRunDataUpdated","params","runInputs","registeredModelVersionSummariesForRun","useLocation","loggedModelsFromTags","parentRunIdTag","EXPERIMENT_PARENT_ID_TAG","containsLoggedModelsFromInputsOutputs","shouldRenderLoggedModelsBox","isRunPageLoggedModelsTableEnabled","shouldDisplayContentsOfLoggedModelsBox","modelVersions","loggedModelsV3RegisteredModels","useExperimentLoggedModelRegisteredVersions","detailsSectionsV2","useRunDetailsPageOverviewSectionsV2","_runInfo$runUuid2","detailsContent","KeyValueProperty","keyValue","startTime","formatTimestamp","NoneCell","DetailsOverviewCopyableIdBox","element","getDuration","endTime","DETAILS","DATASETS","TAGS","REGISTERED_MODELS","usingSidebarLayout","DetailsPageLayout","secondarySections","renderDetails","DetailsOverviewMetadataTable","DetailsOverviewMetadataRow","minHeight","maxHeight","lg","DetailsOverviewParamsTable","RunNotFoundView","runId","ErrorView","statusCode","subMessage","fallbackHomePageReactRoute","rootRoute","RunViewChartTooltipBody","contextData","metricsForRun","hoverData","chartData","metricKey","isHovering","mode","_metricsForRun$metric","singleTraceHoverData","containsMultipleRunsTooltipData","hoveredDataPoint","RunsChartsTooltipMode","MultipleTracesWithScanline","RunsMultipleTracesTooltipBody","metricEntity","timestamp","metricContainsHistory","isSystemMetric","displayTimestamp","isUndefined","displayStep","valueField","textOverflow","RunViewMetricChartsImpl","metricKeys","chartUIState","updateChartsUIState","_runInfo$runUuid4","setSearch","compareRunCharts","compareRunSections","chartsSearchFilter","visibleChartCards","_compareRunCharts$fil","chart","deleted","fullScreenChart","setFullScreenChart","sampledMetricsByRunUuid","metricsByRange","metricsHistory","flat","tooltipContextValue","imagesByRunUuid","state","configuredCardConfig","setConfiguredCardConfig","reorderCharts","useReorderRunsChartsFn","insertCharts","useInsertRunsChartsFn","removeChart","useRemoveRunsChartFn","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","_runInfo$runUuid3","displayName","images","metricHistory","uuid","primary","resultChartSet","resultSectionSet","RunsChartsCardConfig","getBaseChartAndSectionConfigs","runsData","enabledSectionNames","MLFLOW_MODEL_METRIC_NAME","MLFLOW_SYSTEM_METRIC_NAME","filterMetricNames","startsWith","MLFLOW_SYSTEM_METRIC_PREFIX","current","isResultUpdated","updateChartAndSectionConfigs","isAccordionReordered","isTabActive","useIsTabActive","autoRefreshEnabled","shouldEnableRunDetailsPageAutoRefresh","containsLoggedImages","Boolean","LOG_IMAGE_TAG_INDICATOR","usePopulateImagesByRunUuid","runUuids","runUuidsIsActive","enabled","RunsChartsFilterInput","ToggleButton","pressed","onPressedChange","RunsChartsGlobalChartSettingsDropdown","metricKeyList","globalLineChartConfig","updateUIState","RunsChartsTooltipWrapper","component","RunsChartsDraggableCardsGridContextProvider","RunsChartsSectionAccordion","startEditChart","chartCard","addNewChartCard","metricSectionId","getEmptyChartCardByType","supportedChartTypes","RunsChartType","LINE","BAR","IMAGE","RunsChartsConfigureModal","chartRunData","paramKeyList","config","configuredCard","RunsChartsFullScreenModal","tooltipComponent","RunViewMetricCharts","props","persistenceIdentifier","localStore","LocalStorageUtils","getStoreForComponent","defaultChartState","xAxisKey","RunsChartsLineChartXAxisType","STEP","lineSmoothness","selectedXAxisMetricKey","persistedChartState","getItem","JSON","parse","setItem","stringify","RunsChartsUIConfigurationContextProvider","disabledColumns","ExperimentViewTracesTableColumns","RunViewTracesTab","stableExperimentId","TracesView","experimentIds","RunPageLoadingState","PageContainer","TitleSkeleton","Array","i","seed","RunPage","_runInfo$artifactUri2","renameModalVisible","setRenameModalVisible","deleteModalVisible","setDeleteModalVisible","invariant","refetchRun","experimentFetchError","runFetchError","apiError","useRunDetailsPageData","modelMetricKeys","systemMetricKeys","Object","comparedExperiments","activeTab","isUsingGetLoggedModelsApi","shouldUseGetLoggedModelsBatchAPI","loggedModelsForRun","useLoggedModelsForExperimentRun","searchQuery","_runInputs$modelInput","_runOutputs$modelOutp","allModels","modelIds","join","isHookEnabled","loggedModelsData","useSearchLoggedModelsQuery","loggedModelsForRunV2","useLoggedModelsForExperimentRunV2","useGetLoggedModelsQuery","initialLoading","ErrorWrapper","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","code","getGraphQLErrorMessage","NotFoundPage","marginTop","image","DangerIcon","usesFullHeight","getRunDisplayName","renderActiveTab","_runInfo$artifactUri","RenameRunModal","onClose","onSuccess","DeleteRunModal","selectedRunIds","ApolloError","graphQLErrors","restProps","PageWrapper","useFullHeightLayout","wrapper","fixedSpacer","container","defaultProps","flexGrow","flexShrink","width","Component","render"],"sourceRoot":""}