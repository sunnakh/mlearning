{"version":3,"file":"static/js/503.e69e0792.chunk.js","mappings":"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","sources":["experiment-tracking/components/ExperimentSourceTypeIcon.tsx","shared/web-shared/snippet/theme/databricks-duotone-dark.ts","experiment-tracking/components/EntitySearchAutoComplete.tsx","experiment-tracking/components/experiment-page/components/runs/cells/SourceCellRenderer.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentViewLocalStore.ts","common/utils/LocalStorageUtils.ts","shared/web-shared/hooks/useResizableMaxWidth.ts","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableResizer.tsx","shared/web-shared/snippet/theme/databricks-light.ts","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelListPageMode.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageAutoComplete.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageDatasetDropdown.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageOrderBySelector.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageGroupBySelector.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageControls.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelsChartsData.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelsChartsUIState.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListCharts.tsx","common/hooks/useMemoDeep.ts","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelAllMetricsByDataset.tsx","experiment-tracking/pages/experiment-logged-models/ExperimentLoggedModelListPage.tsx","experiment-tracking/hooks/useExperimentQuery.tsx","experiment-tracking/hooks/logged-models/useRelatedRunsDataForLoggedModels.tsx","common/hooks/useArrayMemo.ts","experiment-tracking/pages/experiment-logged-models/ExperimentLoggedModelPageWrapper.tsx","shared/web-shared/hooks/useMediaQuery.ts","shared/web-shared/hooks/useResizeObserver.tsx","experiment-tracking/components/EntitySearchAutoComplete.utils.tsx"],"sourcesContent":["import { FileCodeIcon, FolderBranchIcon, NotebookIcon, WorkflowsIcon } from '@databricks/design-system';\nimport { SourceType } from '../sdk/MlflowEnums';\n\n/**\n * Displays an icon corresponding to the source type of an experiment run.\n */\nexport const ExperimentSourceTypeIcon = ({\n  sourceType,\n  className,\n}: {\n  sourceType: SourceType | string;\n  className?: string;\n}) => {\n  if (sourceType === SourceType.NOTEBOOK) {\n    return <NotebookIcon className={className} />;\n  } else if (sourceType === SourceType.LOCAL) {\n    return <FileCodeIcon className={className} />;\n  } else if (sourceType === SourceType.PROJECT) {\n    return <FolderBranchIcon className={className} />;\n  } else if (sourceType === SourceType.JOB) {\n    return <WorkflowsIcon className={className} />;\n  }\n  return null;\n};\n","/**\n * Adapted from `duotone-dark`\n * Ref: https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/b2457268891948f7005ccf539a70c000f0695bde/src/styles/prism/duotone-dark.js\n */\n\nconst databricksDuotoneDarkTheme = {\n  'code[class*=\"language-\"]': {\n    fontFamily:\n      'Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace',\n    fontSize: '14px',\n    lineHeight: '1.375',\n    direction: 'ltr',\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    background: '#2a2734',\n    color: '#5DFAFC', // D\n  },\n  'pre[class*=\"language-\"]': {\n    fontFamily:\n      'Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace',\n    fontSize: '14px',\n    lineHeight: '1.375',\n    direction: 'ltr',\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    background: '#2a2734',\n    color: '#5DFAFC', // D\n    padding: '1em',\n    margin: '.5em 0',\n    overflow: 'auto',\n  },\n  'pre > code[class*=\"language-\"]': {\n    fontSize: '1em',\n  },\n  'pre[class*=\"language-\"]::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"] ::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"]::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"] ::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"]::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"] ::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"]::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"] ::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  ':not(pre) > code[class*=\"language-\"]': {\n    padding: '.1em',\n    borderRadius: '.3em',\n  },\n  comment: {\n    color: '#6c6783',\n  },\n  prolog: {\n    color: '#6c6783',\n  },\n  doctype: {\n    color: '#6c6783',\n  },\n  cdata: {\n    color: '#6c6783',\n  },\n  punctuation: {\n    color: '#6c6783',\n  },\n  namespace: {\n    Opacity: '.7',\n  },\n  tag: {\n    color: '#3AACE2', // D\n  },\n  operator: {\n    color: '#3AACE2', // D\n  },\n  number: {\n    color: '#3AACE2', // D\n  },\n  property: {\n    color: '#5DFAFC', // D\n  },\n  function: {\n    color: '#5DFAFC', // D\n  },\n  'tag-id': {\n    color: '#eeebff',\n  },\n  selector: {\n    color: '#eeebff',\n  },\n  'atrule-id': {\n    color: '#eeebff',\n  },\n  'code.language-javascript': {\n    color: '#c4b9fe',\n  },\n  'attr-name': {\n    color: '#c4b9fe',\n  },\n  'code.language-css': {\n    color: '#ffffff', // D\n  },\n  'code.language-scss': {\n    color: '#ffffff', // D\n  },\n  boolean: {\n    color: '#ffffff', // D\n  },\n  string: {\n    color: '#ffffff', // D\n  },\n  entity: {\n    color: '#ffffff', // D\n    cursor: 'help',\n  },\n  url: {\n    color: '#ffffff', // D\n  },\n  '.language-css .token.string': {\n    color: '#ffffff', // D\n  },\n  '.language-scss .token.string': {\n    color: '#ffffff', // D\n  },\n  '.style .token.string': {\n    color: '#ffffff', // D\n  },\n  'attr-value': {\n    color: '#ffffff', // D\n  },\n  keyword: {\n    color: '#ffffff', // D\n  },\n  control: {\n    color: '#ffffff', // D\n  },\n  directive: {\n    color: '#ffffff', // D\n  },\n  unit: {\n    color: '#ffffff', // D\n  },\n  statement: {\n    color: '#ffffff', // D\n  },\n  regex: {\n    color: '#ffffff', // D\n  },\n  atrule: {\n    color: '#ffffff', // D\n  },\n  placeholder: {\n    color: '#ffffff', // D\n  },\n  variable: {\n    color: '#ffffff', // D\n  },\n  deleted: {\n    textDecoration: 'line-through',\n  },\n  inserted: {\n    borderBottom: '1px dotted #eeebff',\n    textDecoration: 'none',\n  },\n  italic: {\n    fontStyle: 'italic',\n  },\n  important: {\n    fontWeight: 'bold',\n    color: '#c4b9fe',\n  },\n  bold: {\n    fontWeight: 'bold',\n  },\n  'pre > code.highlight': {\n    Outline: '.4em solid #8a75f5',\n    OutlineOffset: '.4em',\n  },\n  '.line-numbers.line-numbers .line-numbers-rows': {\n    borderRightColor: '#2c2937',\n  },\n  '.line-numbers .line-numbers-rows > span:before': {\n    color: '#3c3949',\n  },\n  '.line-highlight.line-highlight': {\n    background: 'linear-gradient(to right, rgba(224, 145, 66, 0.2) 70%, rgba(224, 145, 66, 0))',\n  },\n};\n\nexport default databricksDuotoneDarkTheme;\n","import {\n  AutoComplete,\n  Button,\n  CloseIcon,\n  InfoFillIcon,\n  InfoIcon,\n  Input,\n  LegacyTooltip,\n  SearchIcon,\n  Tooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { ErrorWrapper } from '../../common/utils/ErrorWrapper';\nimport {\n  EntitySearchAutoCompleteEntity,\n  EntitySearchAutoCompleteOptionGroup,\n  getEntitySearchEntitiesAndIndices,\n  getFilteredOptionsFromEntityName,\n} from './EntitySearchAutoComplete.utils';\nimport { shouldEnableMinMaxMetricsOnExperimentPage } from '../../common/utils/FeatureUtils';\nimport {\n  createQuickRegexpSearchFilter,\n  detectSqlSyntaxInSearchQuery,\n} from './experiment-page/utils/experimentPage.fetch-utils';\nimport { FormattedMessage } from 'react-intl';\nimport { isEqual } from 'lodash';\nimport { useExperimentViewLocalStore } from './experiment-page/hooks/useExperimentViewLocalStore';\n\nconst TOOLTIP_COOKIE_KEY = 'tooltipLastPopup';\nconst WEEK_IN_SECONDS = 604800;\n\nexport type EntitySearchAutoCompleteCompleteProps = {\n  baseOptions: EntitySearchAutoCompleteOptionGroup[];\n  searchFilter: string;\n  onSearchFilterChange: (newValue: string) => void;\n  onClear: () => void;\n  requestError?: ErrorWrapper | Error | null;\n  tooltipContent?: React.ReactNode;\n  placeholder?: string;\n  useQuickFilter?: boolean;\n  defaultActiveFirstOption?: boolean;\n  className?: string;\n};\n\n/**\n * Autocomplete component that provides suggestions for MLflow search entity names.\n */\nexport const EntitySearchAutoComplete = ({\n  baseOptions,\n  searchFilter,\n  requestError = null,\n  onSearchFilterChange,\n  onClear,\n  tooltipContent,\n  placeholder,\n  useQuickFilter,\n  defaultActiveFirstOption = true,\n  className,\n}: EntitySearchAutoCompleteCompleteProps) => {\n  const { theme, getPrefixedClassName } = useDesignSystemTheme();\n\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const intl = useIntl();\n\n  const [text, setText] = useState<string>('');\n  const [autocompleteEnabled, setAutocompleteEnabled] = useState<boolean | undefined>(undefined);\n  const [focused, setFocused] = useState(false);\n  const onFocus = () => setFocused(true);\n  const onBlur = () => setFocused(false);\n  // Determines whether the text was changed by making a selection in the autocomplete\n  // dialog, as opposed to by typing.\n  const [lastSetBySelection, setLastSetBySelection] = useState(false);\n\n  // How many suggestions should be shown per entity group before the group is ellipsized.\n  const [suggestionLimits, setSuggestionLimits] = useState({\n    Metrics: 10,\n    Parameters: 10,\n    Tags: 10,\n  });\n  // List of entities parsed from `text`.\n  const currentEntitiesRef = useRef<EntitySearchAutoCompleteEntity[]>([]);\n  const [entityBeingEdited, setEntityBeingEdited] = useState<EntitySearchAutoCompleteEntity | undefined>(undefined);\n\n  // Each time we're setting search filter externally, update it here as well\n  useEffect(() => {\n    setText(searchFilter);\n  }, [searchFilter]);\n\n  useEffect(() => {\n    const previousEntities = currentEntitiesRef.current;\n    const newEntities = getEntitySearchEntitiesAndIndices(text);\n    currentEntitiesRef.current = newEntities;\n\n    if (lastSetBySelection) {\n      setLastSetBySelection(false);\n      return;\n    }\n    const currentEntitiesNames = newEntities.map((e) => e.name);\n    const previousEntitiesNames = previousEntities.map((e) => e.name);\n    if (!isEqual(currentEntitiesNames, previousEntitiesNames) && newEntities.length >= previousEntities.length) {\n      let i = 0;\n      while (i < newEntities.length) {\n        if (i >= previousEntities.length || newEntities[i].name.trim() !== previousEntities[i].name.trim()) {\n          setAutocompleteEnabled(true);\n          setEntityBeingEdited(newEntities[i]);\n          return;\n        }\n        i++;\n      }\n    }\n    // If here, no entity is being edited\n    setAutocompleteEnabled(false);\n    // currentEntitiesRef is not used anywhere else and state setters are safe to\n    // omit from hook dependencies as per react docs\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [text]);\n\n  const filteredOptions = useMemo(() => {\n    if (!entityBeingEdited) {\n      return [];\n    }\n    return getFilteredOptionsFromEntityName(baseOptions, entityBeingEdited, suggestionLimits);\n  }, [baseOptions, entityBeingEdited, suggestionLimits]);\n\n  /**\n   * Called when an option is picked from the autocomplete dropdown, either by hitting enter\n   * when selected, or clicking on it\n   * @param value\n   */\n  const onSelect = useCallback(\n    (value: string, option: any) => {\n      if (!entityBeingEdited) {\n        return;\n      }\n      if (value.startsWith('...')) {\n        // Keep the dialog open as this is not a real selection\n        setAutocompleteEnabled(true);\n        const groupName = option.value.split('_')[1];\n        setSuggestionLimits((prevSuggestionLimits) => ({\n          ...prevSuggestionLimits,\n          [groupName]: (prevSuggestionLimits as any)[groupName] + 10,\n        }));\n      } else {\n        const prefix = text.substring(0, entityBeingEdited.startIndex);\n        const suffix = text.substring(entityBeingEdited.endIndex);\n        setText(prefix + value + ' ' + suffix);\n        setLastSetBySelection(true);\n        setAutocompleteEnabled(false);\n      }\n    },\n    [text, setText, entityBeingEdited, setAutocompleteEnabled],\n  );\n\n  const localStorageInstance = useExperimentViewLocalStore(TOOLTIP_COOKIE_KEY);\n\n  const [showTooltipOnError, setShowTooltipOnError] = useState(() => {\n    const currentTimeSecs = Math.floor(Date.now() / 1000);\n    const storedItem = localStorageInstance.getItem(TOOLTIP_COOKIE_KEY);\n    // Show tooltip again if it was last shown 1 week ago or older\n    return !storedItem || parseInt(storedItem, 10) < currentTimeSecs - WEEK_IN_SECONDS;\n  });\n  const tooltipIcon = React.useRef<HTMLButtonElement>(null);\n\n  const quickRegexpFilter = useMemo(() => {\n    if (useQuickFilter && text.length > 0 && !detectSqlSyntaxInSearchQuery(text)) {\n      return createQuickRegexpSearchFilter(text);\n    }\n    return undefined;\n  }, [text, useQuickFilter]);\n\n  // If requestError has changed and there is an error, pop up the tooltip\n  useEffect(() => {\n    if (requestError && showTooltipOnError) {\n      const currentTimeSecs = Math.floor(Date.now() / 1000);\n      localStorageInstance.setItem(TOOLTIP_COOKIE_KEY, currentTimeSecs);\n      setShowTooltipOnError(false);\n      tooltipIcon.current?.click();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [requestError]);\n\n  const noMatches = filteredOptions.flatMap((o) => o.options).length === 0;\n  const open = autocompleteEnabled && focused && !noMatches;\n\n  // Callback fired when key is pressed on the input\n  const triggerSearch: React.KeyboardEventHandler<HTMLInputElement> = useCallback(\n    (e) => {\n      // Get the class name for the active item in the dropdown\n      const activeItemClass = getPrefixedClassName('select-item-option-active');\n      const dropdownContainsActiveItem = Boolean(dropdownRef.current?.querySelector(`.${activeItemClass}`));\n\n      if (e.key === 'Enter') {\n        // If the autocomplete dialog is open, close it\n        if (open) {\n          setAutocompleteEnabled(false);\n        }\n        // If the autocomplete dialog is closed or user didn't select any item, trigger search\n        if (!open || !dropdownContainsActiveItem) {\n          onSearchFilterChange(text);\n        }\n      }\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        if (open) {\n          setAutocompleteEnabled(false);\n        }\n      }\n    },\n    [open, text, onSearchFilterChange, getPrefixedClassName],\n  );\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        gap: theme.spacing.sm,\n        width: 430,\n        [theme.responsive.mediaQueries.xs]: {\n          width: 'auto',\n        },\n      }}\n      className={className}\n    >\n      <AutoComplete\n        dropdownMatchSelectWidth={560}\n        css={{\n          width: 560,\n          [theme.responsive.mediaQueries.xs]: {\n            width: 'auto',\n          },\n        }}\n        defaultOpen={false}\n        defaultActiveFirstOption={defaultActiveFirstOption && !useQuickFilter}\n        open={open}\n        options={filteredOptions}\n        onSelect={onSelect}\n        value={text}\n        data-test-id=\"runs-search-autocomplete\"\n        dropdownRender={(menu) => (\n          <div\n            css={{\n              '.du-bois-light-select-item-option-active:not(.du-bois-light-select-item-option-disabled)': {\n                // TODO: ask the design team about the color existing in the palette\n                backgroundColor: '#e6f1f5',\n              },\n            }}\n            ref={dropdownRef}\n          >\n            {menu}\n          </div>\n        )}\n      >\n        <Input\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_runssearchautocomplete.tsx_236\"\n          value={text}\n          prefix={\n            <SearchIcon\n              css={{\n                svg: {\n                  width: theme.general.iconFontSize,\n                  height: theme.general.iconFontSize,\n                  color: theme.colors.textSecondary,\n                },\n              }}\n            />\n          }\n          onKeyDown={triggerSearch}\n          onClick={onFocus}\n          onBlur={onBlur}\n          onChange={(e) => setText(e.target.value)}\n          placeholder={placeholder}\n          data-test-id=\"search-box\"\n          suffix={\n            <div css={{ display: 'flex', gap: 4, alignItems: 'center' }}>\n              {text && (\n                <Button\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_runssearchautocomplete.tsx_212\"\n                  onClick={() => {\n                    onClear();\n                    setText('');\n                  }}\n                  type=\"link\"\n                  data-test-id=\"clear-button\"\n                >\n                  <CloseIcon />\n                </Button>\n              )}\n              {quickRegexpFilter ? (\n                <Tooltip\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_runssearchautocomplete.tsx_310\"\n                  content={\n                    <FormattedMessage\n                      defaultMessage=\"Using regular expression quick filter. The following query will be used: {filterSample}\"\n                      description=\"Experiment page > control bar > search filter > a label displayed when user has entered a simple query that will be automatically transformed into RLIKE SQL query before being sent to the API\"\n                      values={{\n                        filterSample: (\n                          <div>\n                            <code>{quickRegexpFilter}</code>\n                          </div>\n                        ),\n                      }}\n                    />\n                  }\n                  delayDuration={0}\n                >\n                  <InfoFillIcon\n                    aria-label={intl.formatMessage(\n                      {\n                        defaultMessage:\n                          'Using regular expression quick filter. The following query will be used: {filterSample}',\n                        description:\n                          'Experiment page > control bar > search filter > a label displayed when user has entered a simple query that will be automatically transformed into RLIKE SQL query before being sent to the API',\n                      },\n                      {\n                        filterSample: quickRegexpFilter,\n                      },\n                    )}\n                    css={{\n                      svg: {\n                        width: theme.general.iconFontSize,\n                        height: theme.general.iconFontSize,\n                        color: theme.colors.actionPrimaryBackgroundDefault,\n                      },\n                    }}\n                  />\n                </Tooltip>\n              ) : (\n                <LegacyTooltip\n                  title={tooltipContent}\n                  placement=\"right\"\n                  dangerouslySetAntdProps={{\n                    overlayInnerStyle: { width: '150%' },\n                    trigger: ['focus', 'click'],\n                  }}\n                >\n                  <Button\n                    size=\"small\"\n                    ref={tooltipIcon}\n                    componentId=\"mlflow.experiment_page.search_filter.tooltip\"\n                    type=\"link\"\n                    css={{ marginLeft: -theme.spacing.xs, marginRight: -theme.spacing.xs }}\n                    icon={\n                      <InfoIcon\n                        css={{\n                          svg: {\n                            width: theme.general.iconFontSize,\n                            height: theme.general.iconFontSize,\n                            color: theme.colors.textSecondary,\n                          },\n                        }}\n                      />\n                    }\n                  />\n                </LegacyTooltip>\n              )}\n            </div>\n          }\n        />\n      </AutoComplete>\n    </div>\n  );\n};\n","import React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentSourceTypeIcon } from '../../../../ExperimentSourceTypeIcon';\n\nexport const SourceCellRenderer = React.memo(({ value: tags }: { value: RunRowType['tags'] }) => {\n  const { theme } = useDesignSystemTheme();\n  if (!tags) {\n    return <>-</>;\n  }\n  const sourceType = tags[Utils.sourceTypeTag]?.value || '';\n\n  const sourceLink = Utils.renderSource(tags || {}, undefined, undefined);\n  return sourceLink ? (\n    <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n      <ExperimentSourceTypeIcon sourceType={sourceType} css={{ color: theme.colors.textSecondary }} />\n      <span css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>{sourceLink}</span>\n    </div>\n  ) : (\n    <>-</>\n  );\n});\n","import { useMemo } from 'react';\nimport LocalStorageUtils from '../../../../common/utils/LocalStorageUtils';\n\n/**\n * This hook returns a memoized version of persistable store namespaced for the ExperimentView.\n * It can serve as a store for persisting state for a particular experiment - in this case,\n * the experiment id should be provided as a `identifier` parameter. It can also serve as a store for some\n * general purpose - e.g. you can provide \"onboarding\" as a identifier to get a store specific\n * for the onboarding section of the experiment view.\n *\n * @param storeIdentifier a unique identifier of created store - can be an experiment id or a general purpose name\n */\nexport const useExperimentViewLocalStore = (storeIdentifier: string) =>\n  useMemo(() => LocalStorageUtils.getStoreForComponent('ExperimentView', storeIdentifier), [storeIdentifier]);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\n/**\n * Utils for working with local storage.\n */\nexport default class LocalStorageUtils {\n  /**\n   * Protocol version of MLflow's local storage. Should be incremented on any breaking change in how\n   * data persisted in local storage is used, to prevent old (invalid) cached data from being loaded\n   * and breaking the application.\n   */\n  static version = '1.1';\n\n  /**\n   * Return a LocalStorageStore corresponding to the specified component and ID, where the ID\n   * can be used to disambiguate between multiple instances of cached data for the same component\n   * (e.g. cached data for multiple experiments).\n   */\n  static getStoreForComponent(componentName: any, id: any) {\n    return new LocalStorageStore([componentName, id].join('-'), 'localStorage');\n  }\n\n  static getSessionScopedStoreForComponent(componentName: any, id: any) {\n    return new LocalStorageStore([componentName, id].join('-'), 'sessionStorage');\n  }\n}\n\n/**\n * Interface to browser local storage that allows for setting key-value pairs under the specified\n * \"scope\".\n */\nclass LocalStorageStore {\n  constructor(scope: any, type: any) {\n    this.scope = scope;\n    if (type === 'localStorage') {\n      this.storageObj = window.localStorage;\n    } else {\n      this.storageObj = window.sessionStorage;\n    }\n  }\n  static reactComponentStateKey = 'ReactComponentState';\n\n  scope: any;\n  storageObj: any;\n\n  /**\n   * Loads React component state cached in local storage into a vanilla JS object.\n   */\n  loadComponentState() {\n    const storedVal = this.getItem(LocalStorageStore.reactComponentStateKey);\n    if (storedVal) {\n      return JSON.parse(storedVal);\n    }\n    return {};\n  }\n\n  /**\n   * Save React component state in local storage.\n   * @param stateRecord: Immutable.Record instance or plain object containing component state.\n   */\n  saveComponentState(stateRecord: any) {\n    const targetValue = typeof stateRecord.toJSON === 'function' ? stateRecord.toJSON() : stateRecord;\n    this.setItem(LocalStorageStore.reactComponentStateKey, JSON.stringify(targetValue));\n  }\n\n  /**\n   * Helper method for constructing a scoped key to use for setting/getting values in\n   * local storage.\n   */\n  withScopePrefix(key: any) {\n    return ['MLflowLocalStorage', LocalStorageUtils.version, this.scope, key].join('-');\n  }\n\n  /** Save the specified key-value pair in local storage. */\n  setItem(key: any, value: any) {\n    this.storageObj.setItem(this.withScopePrefix(key), value);\n  }\n\n  /** Fetch the value corresponding to the passed-in key from local storage. */\n  getItem(key: any) {\n    return this.storageObj.getItem(this.withScopePrefix(key));\n  }\n}\n","import { MutableRefObject, useCallback, useLayoutEffect, useRef, useState } from 'react';\n\nexport function useResizableMaxWidth(minWidth: number) {\n  const ref: MutableRefObject<HTMLDivElement | null> = useRef<HTMLDivElement>(null);\n  const [containerWidth, setContainerWidth] = useState<number | undefined>(undefined);\n\n  const updateWidth = useCallback(() => {\n    if (ref.current) {\n      setContainerWidth(ref.current.clientWidth);\n    }\n  }, []);\n\n  useLayoutEffect(() => {\n    updateWidth();\n    window.addEventListener('resize', updateWidth);\n    return () => window.removeEventListener('resize', updateWidth);\n  }, [updateWidth]);\n\n  const refCallback = useCallback(\n    (node: HTMLDivElement) => {\n      ref.current = node;\n      updateWidth();\n    },\n    [updateWidth],\n  );\n\n  const resizableMaxWidth = containerWidth === undefined ? undefined : containerWidth - minWidth;\n  return { resizableMaxWidth, ref: refCallback };\n}\n","import { Button, ChevronLeftIcon, ChevronRightIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { useState } from 'react';\nimport { ResizableBox } from 'react-resizable';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\nimport { Global } from '@emotion/react';\n\nconst RESIZE_BAR_WIDTH = 3;\n\n/**\n * A component wrapping experiment runs table and providing a resizer\n * to adjust its width when displayed in a split view.\n */\nexport const ExperimentViewRunsTableResizer = ({\n  runListHidden,\n  width,\n  onResize,\n  children,\n  onHiddenChange,\n  maxWidth,\n}: React.PropsWithChildren<{\n  runListHidden: boolean;\n  width: number;\n  onResize: React.Dispatch<React.SetStateAction<number>>;\n  onHiddenChange?: (isHidden: boolean) => void;\n  maxWidth: number | undefined;\n}>) => {\n  const updateUIState = useUpdateExperimentViewUIState();\n  const [dragging, setDragging] = useState(false);\n\n  return (\n    <>\n      <ResizableBox\n        css={{ display: 'flex', position: 'relative' }}\n        style={{ flex: `0 0 ${runListHidden ? 0 : width}px` }}\n        width={width}\n        axis=\"x\"\n        resizeHandles={['e']}\n        minConstraints={[250, 0]}\n        maxConstraints={maxWidth === undefined ? undefined : [maxWidth, 0]}\n        handle={\n          <ExperimentViewRunsTableResizerHandle\n            runListHidden={runListHidden}\n            updateRunListHidden={(value) => {\n              if (onHiddenChange) {\n                onHiddenChange(value);\n                return;\n              }\n              updateUIState((state) => ({ ...state, runListHidden: value }));\n            }}\n          />\n        }\n        onResize={(event, { size }) => {\n          if (runListHidden) {\n            return;\n          }\n          onResize(size.width);\n        }}\n        onResizeStart={() => !runListHidden && setDragging(true)}\n        onResizeStop={() => setDragging(false)}\n      >\n        {children}\n      </ResizableBox>\n      {dragging && (\n        <Global\n          styles={{\n            'body, :host': {\n              userSelect: 'none',\n            },\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport const ExperimentViewRunsTableResizerHandle = React.forwardRef<\n  HTMLDivElement,\n  {\n    updateRunListHidden: (newValue: boolean) => void;\n    runListHidden: boolean;\n  }\n>(({ updateRunListHidden, runListHidden, ...props }, ref) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      ref={ref}\n      {...props}\n      css={{\n        transition: 'opacity 0.2s',\n        width: 0,\n        overflow: 'visible',\n        height: '100%',\n        position: 'relative',\n        zIndex: 10,\n        display: 'flex',\n        opacity: runListHidden ? 1 : 0,\n        '&:hover': {\n          opacity: 1,\n          '.bar': { opacity: 1 },\n          '.button': {\n            border: `2px solid ${theme.colors.actionDefaultBorderHover}`,\n          },\n        },\n      }}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          // For the resizing area, use the icon size which is\n          // the same as \"collapse\" button\n          left: -theme.general.iconSize / 2,\n          width: theme.general.iconSize,\n          cursor: runListHidden ? undefined : 'ew-resize',\n          height: '100%',\n          top: 0,\n          bottom: 0,\n        }}\n      >\n        <div\n          className=\"button\"\n          css={{\n            top: '50%',\n            transition: 'border-color 0.2s',\n            position: 'absolute',\n            width: theme.general.iconSize,\n            height: theme.general.iconSize,\n            backgroundColor: theme.colors.backgroundPrimary,\n            borderRadius: theme.general.iconSize,\n            overflow: 'hidden',\n            border: `1px solid ${theme.colors.border}`,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            zIndex: 11,\n          }}\n        >\n          <Button\n            componentId=\"mlflow.experiment_page.table_resizer.collapse\"\n            onClick={() => updateRunListHidden(!runListHidden)}\n            icon={runListHidden ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n            size=\"small\"\n          />\n        </div>\n      </div>\n      <div\n        className=\"bar\"\n        css={{\n          position: 'absolute',\n          opacity: 0,\n          left: -RESIZE_BAR_WIDTH / 2,\n          width: RESIZE_BAR_WIDTH,\n          height: '100%',\n          top: 0,\n          bottom: 0,\n          backgroundColor: theme.colors.actionPrimaryBackgroundDefault,\n        }}\n      ></div>\n    </div>\n  );\n});\n","/**\n * Adapted from `material-light`\n * Ref: https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/b2457268891948f7005ccf539a70c000f0695bde/src/styles/prism/material-light.js#L1\n *\n * This theme overwrites colors to be similiar to the `@databricks/editor` theme.\n */\n\nconst databricksLightTheme = {\n  'code[class*=\"language-\"]': {\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    color: 'rgb(77, 77, 76)', // D\n    background: '#fafafa',\n    fontFamily: 'Monaco, Menlo, Ubuntu Mono, Consolas, source-code-pro, monospace',\n    fontSize: '12px', // D\n    lineHeight: '1.5em',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n  },\n  'pre[class*=\"language-\"]': {\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    color: 'rgb(77, 77, 76)', // D\n    background: '#fafafa',\n    fontFamily: 'Monaco, Menlo, Ubuntu Mono, Consolas, source-code-pro, monospace',\n    fontSize: '12px', // D\n    lineHeight: '1.5em',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    overflow: 'auto',\n    position: 'relative',\n    margin: '0.5em 0',\n    padding: '1.25em 1em',\n  },\n  'code[class*=\"language-\"]::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"]::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"] ::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"] ::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"]::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"]::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"] ::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"] ::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  ':not(pre) > code[class*=\"language-\"]': {\n    whiteSpace: 'normal',\n    borderRadius: '0.2em',\n    padding: '0.1em',\n  },\n  '.language-css > code': {\n    color: '#f5871f', // D\n  },\n  '.language-sass > code': {\n    color: '#f5871f', // D\n  },\n  '.language-scss > code': {\n    color: '#f5871f', // D\n  },\n  '[class*=\"language-\"] .namespace': {\n    Opacity: '0.7',\n  },\n  atrule: {\n    color: '#7c4dff',\n  },\n  'attr-name': {\n    color: '#39adb5',\n  },\n  'attr-value': {\n    color: '#f6a434',\n  },\n  attribute: {\n    color: '#f6a434',\n  },\n  boolean: {\n    color: '#7c4dff', // D\n  },\n  builtin: {\n    color: '#39adb5',\n  },\n  cdata: {\n    color: '#39adb5',\n  },\n  char: {\n    color: '#39adb5',\n  },\n  class: {\n    color: '#39adb5',\n  },\n  'class-name': {\n    color: '#6182b8',\n  },\n  comment: {\n    color: '#8e908c', // D\n  },\n  constant: {\n    color: '#7c4dff', // D\n  },\n  deleted: {\n    color: '#e53935',\n  },\n  doctype: {\n    color: '#aabfc9',\n  },\n  entity: {\n    color: '#e53935',\n  },\n  function: {\n    color: '#4271ae', // D\n  },\n  hexcode: {\n    color: '#f5871f', // D\n  },\n  id: {\n    color: '#7c4dff',\n    fontWeight: 'bold',\n  },\n  important: {\n    color: '#7c4dff',\n    fontWeight: 'bold',\n  },\n  inserted: {\n    color: '#39adb5',\n  },\n  keyword: {\n    color: '#8959a8', // D\n  },\n  number: {\n    color: '#f5871f', // D\n  },\n  operator: {\n    color: '#3e999f', // D\n  },\n  prolog: {\n    color: '#aabfc9',\n  },\n  property: {\n    color: '#39adb5',\n  },\n  'pseudo-class': {\n    color: '#f6a434',\n  },\n  'pseudo-element': {\n    color: '#f6a434',\n  },\n  punctuation: {\n    color: 'rgb(77, 77, 76)', // D\n  },\n  regex: {\n    color: '#6182b8',\n  },\n  selector: {\n    color: '#e53935',\n  },\n  string: {\n    color: '#3ba85f', // D\n  },\n  symbol: {\n    color: '#7c4dff',\n  },\n  tag: {\n    color: '#e53935',\n  },\n  unit: {\n    color: '#f5871f', // D\n  },\n  url: {\n    color: '#e53935',\n  },\n  variable: {\n    color: '#c72d4c', // D\n  },\n};\n\nexport default databricksLightTheme;\n","import { coerceToEnum } from '@databricks/web-shared/utils';\nimport { useSearchParams } from '../../../../common/utils/RoutingUtils';\n\nexport enum ExperimentLoggedModelListPageMode {\n  TABLE = 'TABLE',\n  CHART = 'CHART',\n}\n\nconst VIEW_MODE_QUERY_PARAM = 'viewMode';\n\nexport const useExperimentLoggedModelListPageMode = () => {\n  const [params, setParams] = useSearchParams();\n  const viewMode = coerceToEnum(\n    ExperimentLoggedModelListPageMode,\n    params.get(VIEW_MODE_QUERY_PARAM),\n    ExperimentLoggedModelListPageMode.TABLE,\n  );\n  const setViewMode = (mode: ExperimentLoggedModelListPageMode) => {\n    setParams({ [VIEW_MODE_QUERY_PARAM]: mode });\n  };\n  return { viewMode, setViewMode } as const;\n};\n","import { FormattedMessage } from 'react-intl';\nimport { EntitySearchAutoComplete } from '../EntitySearchAutoComplete';\nimport { LoggedModelProto } from '../../types';\nimport { useMemo } from 'react';\nimport {\n  EntitySearchAutoCompleteEntityNameGroup,\n  getEntitySearchOptionsFromEntityNames,\n} from '../EntitySearchAutoComplete.utils';\nimport { isUserFacingTag } from '../../../common/utils/TagUtils';\n\nconst getEntityNamesFromLoggedModelsData = (\n  loggedModels: LoggedModelProto[],\n): EntitySearchAutoCompleteEntityNameGroup => {\n  const metricNames = new Set<string>();\n  const paramNames = new Set<string>();\n  const tagNames = new Set<string>();\n\n  for (const loggedModel of loggedModels) {\n    loggedModel.data?.metrics?.forEach((metric) => metric.key && metricNames.add(metric.key));\n    loggedModel.data?.params?.forEach((param) => param.key && paramNames.add(param.key));\n    loggedModel.info?.tags?.forEach((tag) => tag.key && tagNames.add(tag.key));\n  }\n\n  return {\n    metricNames: Array.from(metricNames),\n    paramNames: Array.from(paramNames),\n    tagNames: Array.from(tagNames).filter(isUserFacingTag),\n  };\n};\n\nconst VALID_FILTER_ATTRIBUTES = [\n  'model_id',\n  'model_name',\n  'status',\n  'artifact_uri',\n  'creation_time',\n  'last_updated_time',\n];\n\nexport const ExperimentLoggedModelListPageAutoComplete = ({\n  searchQuery,\n  onChangeSearchQuery,\n  loggedModelsData,\n}: {\n  searchQuery?: string;\n  onChangeSearchQuery: (searchFilter: string) => void;\n  loggedModelsData: LoggedModelProto[];\n}) => {\n  const options = useMemo(() => {\n    const entityNames = getEntityNamesFromLoggedModelsData(loggedModelsData);\n    const validAttributeOptions = VALID_FILTER_ATTRIBUTES.map((attribute) => ({\n      value: `attributes.${attribute}`,\n    }));\n    return getEntitySearchOptionsFromEntityNames(entityNames, validAttributeOptions);\n  }, [loggedModelsData]);\n\n  return (\n    <EntitySearchAutoComplete\n      searchFilter={searchQuery ?? ''}\n      onSearchFilterChange={onChangeSearchQuery}\n      defaultActiveFirstOption={false}\n      baseOptions={options}\n      onClear={() => onChangeSearchQuery('')}\n      placeholder=\"metrics.rmse >= 0.8\"\n      tooltipContent={\n        <div>\n          <FormattedMessage\n            defaultMessage=\"Search logged models using a simplified version of the SQL {whereBold} clause.\"\n            description=\"Tooltip string to explain how to search logged models from the listing page\"\n            values={{ whereBold: <b>WHERE</b> }}\n          />{' '}\n          <br />\n          <FormattedMessage\n            defaultMessage=\"Examples:\"\n            description=\"Text header for examples of logged models search syntax\"\n          />\n          <br />\n          {'• metrics.rmse >= 0.8'}\n          <br />\n          {'• metrics.`f1 score` < 1'}\n          <br />\n          • params.type = 'tree'\n          <br />\n          • tags.my_tag = 'foobar'\n          <br />\n          • attributes.name = 'elasticnet'\n          <br />\n        </div>\n      }\n    />\n  );\n};\n","import {\n  Button,\n  ChevronDownIcon,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxCountBadge,\n  DialogComboboxCustomButtonTriggerWrapper,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListCheckboxItem,\n  TableIcon,\n  useDesignSystemTheme,\n  XCircleFillIcon,\n} from '@databricks/design-system';\nimport { useMemo, useRef } from 'react';\nimport type { LoggedModelMetricDataset, LoggedModelProto } from '../../types';\nimport { useIntl } from 'react-intl';\n\nconst getDatasetHash = (dataset: LoggedModelMetricDataset) =>\n  JSON.stringify([dataset.dataset_name, dataset.dataset_digest]);\n\nexport const ExperimentLoggedModelListPageDatasetDropdown = ({\n  loggedModelsData,\n  selectedFilterDatasets,\n  onToggleDataset,\n  onClearSelectedDatasets,\n}: {\n  loggedModelsData: LoggedModelProto[];\n  selectedFilterDatasets?: LoggedModelMetricDataset[];\n  onToggleDataset?: (dataset: LoggedModelMetricDataset) => void;\n  onClearSelectedDatasets?: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const cachedDatasets = useRef<Map<string, { hash: string } & LoggedModelMetricDataset>>(new Map());\n\n  // Get all datasets with their hashes, also store them in an aggregated map.\n  // The hash is used as a unique key and also being fed to DialogCombobox since it exclusively uses string values.\n  // The map is used to aggregate all datasets encountered in the logged models data during the session.\n  const allDatasets = useMemo(() => {\n    for (const model of loggedModelsData) {\n      for (const metric of model.data?.metrics || []) {\n        if (!metric.dataset_name || !metric.dataset_digest) {\n          continue;\n        }\n        const datasetHash = getDatasetHash(metric);\n        if (!cachedDatasets.current.has(datasetHash)) {\n          // We're purposely using mutable hashmap in the memo hook\n          cachedDatasets.current.set(datasetHash, {\n            hash: datasetHash,\n            dataset_name: metric.dataset_name,\n            dataset_digest: metric.dataset_digest,\n          });\n        }\n      }\n    }\n    return Array.from(cachedDatasets.current.values());\n  }, [loggedModelsData]);\n\n  // Serialize the selected datasets to a string format for the DialogCombobox.\n  const serializedSelectedDatasets = useMemo(\n    () => selectedFilterDatasets?.map(getDatasetHash) || [],\n    [selectedFilterDatasets],\n  );\n\n  return (\n    <DialogCombobox\n      componentId=\"mlflow.logged_model.list_page.datasets_filter\"\n      id=\"mlflow.logged_model.list_page.datasets_filter\"\n      value={serializedSelectedDatasets}\n      label={intl.formatMessage({\n        defaultMessage: 'Datasets',\n        description: 'Label for the datasets filter dropdown in the logged model list page',\n      })}\n      stayOpenOnSelection\n    >\n      <DialogComboboxCustomButtonTriggerWrapper>\n        <Button\n          endIcon={<ChevronDownIcon />}\n          componentId=\"mlflow.logged_model.list_page.datasets_filter.toggle\"\n          icon={<TableIcon />}\n        >\n          Datasets\n          {serializedSelectedDatasets.length > 0 ? (\n            <>\n              <DialogComboboxCountBadge css={{ marginLeft: 4 }}>\n                {serializedSelectedDatasets.length}\n              </DialogComboboxCountBadge>\n              <XCircleFillIcon\n                aria-hidden=\"false\"\n                role=\"button\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  e.preventDefault();\n                  onClearSelectedDatasets?.();\n                }}\n                css={{\n                  color: theme.colors.textPlaceholder,\n                  fontSize: theme.typography.fontSizeSm,\n                  marginLeft: theme.spacing.xs,\n\n                  ':hover': {\n                    color: theme.colors.actionTertiaryTextHover,\n                  },\n                }}\n              />\n            </>\n          ) : null}\n        </Button>\n      </DialogComboboxCustomButtonTriggerWrapper>\n      <DialogComboboxContent>\n        <DialogComboboxOptionList>\n          {allDatasets.map(({ hash: serializedDataset, dataset_digest, dataset_name }) => (\n            <DialogComboboxOptionListCheckboxItem\n              value={serializedDataset}\n              checked={serializedSelectedDatasets.includes(serializedDataset)}\n              key={serializedDataset}\n              onChange={() => onToggleDataset?.({ dataset_digest, dataset_name })}\n            >\n              {dataset_name} (#{dataset_digest})\n            </DialogComboboxOptionListCheckboxItem>\n          ))}\n        </DialogComboboxOptionList>\n      </DialogComboboxContent>\n    </DialogCombobox>\n  );\n};\n","import {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  Button,\n  DropdownMenu,\n  Input,\n  SearchIcon,\n  SortAscendingIcon,\n  SortDescendingIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useMemo, useState } from 'react';\n\nimport { defineMessage, FormattedMessage, IntlShape, MessageDescriptor, useIntl } from 'react-intl';\nimport { ToggleIconButton } from '../../../common/components/ToggleIconButton';\nimport {\n  ExperimentLoggedModelListPageKnownColumns,\n  LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX,\n  parseLoggedModelMetricOrderByColumnId,\n} from './hooks/useExperimentLoggedModelListPageTableColumns';\n\ninterface BasicColumnDef {\n  colId?: string;\n  groupId?: string;\n  headerName?: string;\n  children?: BasicColumnDef[];\n}\n\nconst getSortableColumnLabel = (colId: string | ExperimentLoggedModelListPageKnownColumns, intl: IntlShape) => {\n  const labels: Partial<Record<ExperimentLoggedModelListPageKnownColumns | string, MessageDescriptor>> = {\n    [ExperimentLoggedModelListPageKnownColumns.CreationTime]: defineMessage({\n      defaultMessage: 'Creation time',\n      description: 'Label for the creation time column in the logged model list page',\n    }),\n  };\n\n  const descriptor = labels[colId];\n\n  if (descriptor) {\n    return intl.formatMessage(descriptor);\n  }\n\n  const parsedColumn = parseLoggedModelMetricOrderByColumnId(colId);\n\n  if (parsedColumn) {\n    return parsedColumn.metricKey;\n  }\n\n  return colId;\n};\n\nexport const ExperimentLoggedModelListPageOrderBySelector = ({\n  orderByColumn,\n  orderByAsc,\n  onChangeOrderBy,\n  columnDefs = [],\n}: {\n  orderByColumn: string;\n  orderByAsc?: boolean;\n  onChangeOrderBy: (orderByColumn: string, orderByAsc: boolean) => void;\n  columnDefs: BasicColumnDef[] | undefined;\n}) => {\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n  const { theme } = useDesignSystemTheme();\n\n  const groupedOrderByOptions = useMemo<BasicColumnDef[]>(() => {\n    const lowerCaseFilter = filter.toLowerCase();\n    const attributeColumnGroup = {\n      groupId: 'attributes',\n      headerName: intl.formatMessage({\n        defaultMessage: 'Attributes',\n        description: 'Label for the attributes column group in the logged model column selector',\n      }),\n      children: [\n        {\n          colId: ExperimentLoggedModelListPageKnownColumns.CreationTime,\n          headerName: getSortableColumnLabel(ExperimentLoggedModelListPageKnownColumns.CreationTime, intl),\n        },\n      ].filter(({ headerName }) => headerName?.toLowerCase().includes(lowerCaseFilter)),\n    };\n\n    // Next, get all the dataset-grouped metric column groups\n    const metricColumnGroups = columnDefs\n      .filter((col) => col.groupId?.startsWith(LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX))\n      .map((col) => ({\n        ...col,\n        children: col.children?.filter(({ colId }) => colId?.includes(lowerCaseFilter)),\n        headerName: col.headerName\n          ? `Metrics (${col.headerName})`\n          : intl.formatMessage({\n              defaultMessage: 'Metrics',\n              description: 'Label for the ungrouped metrics column group in the logged model column selector',\n            }),\n      }));\n\n    const sortableColumnGroups = [attributeColumnGroup, ...metricColumnGroups].filter(\n      (col) => col.children && col.children.length > 0,\n    );\n\n    // If the currently used sorting field is not found, this probably means that\n    // user has filtered out results containing this column. Let's add it to the list\n    // of sortable columns so that user won't be confused.\n    if (\n      !sortableColumnGroups.some((group) => group.children && group.children.some((col) => col.colId === orderByColumn))\n    ) {\n      const { metricKey } = parseLoggedModelMetricOrderByColumnId(orderByColumn);\n\n      if (metricKey) {\n        sortableColumnGroups.push({\n          groupId: 'current',\n          headerName: intl.formatMessage({\n            defaultMessage: 'Currently sorted by',\n            description: 'Label for the custom column group in the logged model column selector',\n          }),\n          children: [{ colId: orderByColumn, headerName: metricKey }],\n        });\n      }\n    }\n    return sortableColumnGroups;\n  }, [columnDefs, intl, filter, orderByColumn]);\n\n  return (\n    <DropdownMenu.Root modal={false}>\n      <DropdownMenu.Trigger asChild>\n        <Button\n          componentId=\"mlflow.logged_model.list.order_by\"\n          icon={orderByAsc ? <SortAscendingIcon /> : <SortDescendingIcon />}\n        >\n          <FormattedMessage\n            defaultMessage=\"Sort: {sortBy}\"\n            description=\"Label for the filter button in the logged model list page. sortBy is the name of the column by which the table is currently sorted.\"\n            values={{ sortBy: getSortableColumnLabel(orderByColumn, intl) }}\n          />\n        </Button>\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content css={{ maxHeight: 300, overflow: 'auto' }}>\n        <div\n          css={{\n            padding: `${theme.spacing.sm}px ${theme.spacing.lg / 2}px ${theme.spacing.sm}px`,\n            width: '100%',\n            display: 'flex',\n            gap: theme.spacing.xs,\n          }}\n        >\n          <Input\n            componentId=\"mlflow.logged_model.list.order_by.filter\"\n            prefix={<SearchIcon />}\n            value={filter}\n            type=\"search\"\n            onChange={(e) => setFilter(e.target.value)}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search',\n              description: 'Placeholder for the search input in the logged model list page sort column selector',\n            })}\n            autoFocus\n            allowClear\n          />\n          <div\n            css={{\n              display: 'flex',\n              gap: theme.spacing.xs,\n            }}\n          >\n            <ToggleIconButton\n              pressed={!orderByAsc}\n              icon={<ArrowDownIcon />}\n              componentId=\"mlflow.logged_model.list.order_by.button_desc\"\n              onClick={() => onChangeOrderBy(orderByColumn, false)}\n              aria-label={intl.formatMessage({\n                defaultMessage: 'Sort descending',\n                description: 'Label for the sort descending button in the logged model list page',\n              })}\n            />\n            <ToggleIconButton\n              pressed={orderByAsc}\n              icon={<ArrowUpIcon />}\n              componentId=\"mlflow.logged_model.list.order_by.button_asc\"\n              onClick={() => onChangeOrderBy(orderByColumn, true)}\n              aria-label={intl.formatMessage({\n                defaultMessage: 'Sort ascending',\n                description: 'Label for the sort ascending button in the logged model list page',\n              })}\n            />\n          </div>\n        </div>\n\n        {groupedOrderByOptions.map(({ headerName, children, groupId }) => (\n          <DropdownMenu.Group key={groupId} aria-label={headerName}>\n            <DropdownMenu.Label>{headerName}</DropdownMenu.Label>\n            {children?.map(({ headerName: columnHeaderName, colId }) => (\n              <DropdownMenu.CheckboxItem\n                key={colId}\n                componentId=\"mlflow.logged_model.list.order_by.column_toggle\"\n                checked={orderByColumn === colId}\n                onClick={() => {\n                  if (!colId) {\n                    return;\n                  }\n                  onChangeOrderBy(colId, Boolean(orderByAsc));\n                }}\n              >\n                <DropdownMenu.ItemIndicator />\n                {columnHeaderName}\n              </DropdownMenu.CheckboxItem>\n            ))}\n          </DropdownMenu.Group>\n        ))}\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { Button, ChevronDownIcon, DropdownMenu, ListBorderIcon } from '@databricks/design-system';\nimport { defineMessage, FormattedMessage, type MessageDescriptor } from 'react-intl';\n\nimport { LoggedModelsTableGroupByMode } from './ExperimentLoggedModelListPageTable.utils';\n\nconst GroupByLabels: Record<LoggedModelsTableGroupByMode, MessageDescriptor> = {\n  [LoggedModelsTableGroupByMode.RUNS]: defineMessage({\n    defaultMessage: 'Source run',\n    description: 'Label for the group by runs option in the logged model list page',\n  }),\n};\n\nexport const ExperimentLoggedModelListPageGroupBySelector = ({\n  groupBy,\n  onChangeGroupBy,\n}: {\n  groupBy: LoggedModelsTableGroupByMode | undefined;\n  onChangeGroupBy?: (groupBy: LoggedModelsTableGroupByMode | undefined) => void;\n}) => {\n  const currentSelectedLabel = groupBy ? GroupByLabels[groupBy] : null;\n\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild>\n        <Button componentId=\"mlflow.logged_model.list.group_by\" icon={<ListBorderIcon />} endIcon={<ChevronDownIcon />}>\n          {currentSelectedLabel ? (\n            <FormattedMessage\n              defaultMessage=\"Group by: {currentModeSelected}\"\n              description=\"Label for the grouping selector button in the logged model list page when groupin mode is selected\"\n              values={{ currentModeSelected: <FormattedMessage {...currentSelectedLabel} /> }}\n            />\n          ) : (\n            <FormattedMessage\n              defaultMessage=\"Group by\"\n              description=\"Label for the grouping selector button in the logged model list page when no grouping is selected\"\n            />\n          )}\n        </Button>\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content>\n        <DropdownMenu.CheckboxItem\n          checked={!groupBy}\n          componentId=\"mlflow.logged_model.list.group_by.none\"\n          onClick={() => onChangeGroupBy?.(undefined)}\n        >\n          <DropdownMenu.ItemIndicator />\n          <FormattedMessage\n            defaultMessage=\"None\"\n            description=\"Label for the button disabling grouping in the logged model list page\"\n          />\n        </DropdownMenu.CheckboxItem>\n        <DropdownMenu.CheckboxItem\n          checked={groupBy === LoggedModelsTableGroupByMode.RUNS}\n          componentId=\"mlflow.logged_model.list.group_by.runs\"\n          onClick={() => onChangeGroupBy?.(LoggedModelsTableGroupByMode.RUNS)}\n        >\n          <DropdownMenu.ItemIndicator />\n          <FormattedMessage {...GroupByLabels[LoggedModelsTableGroupByMode.RUNS]} />\n        </DropdownMenu.CheckboxItem>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import {\n  Button,\n  ChartLineIcon,\n  Checkbox,\n  ListIcon,\n  SegmentedControlButton,\n  SegmentedControlGroup,\n  SortAscendingIcon,\n  SortDescendingIcon,\n  Tooltip,\n  Typography,\n  useDesignSystemTheme,\n  visuallyHidden,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { FormattedMessage } from 'react-intl';\nimport type { ColDef, ColGroupDef } from '@ag-grid-community/core';\nimport { ExperimentLoggedModelListPageColumnSelector } from './ExperimentLoggedModelListPageColumnSelector';\nimport { coerceToEnum } from '@databricks/web-shared/utils';\nimport { ExperimentLoggedModelListPageMode } from './hooks/useExperimentLoggedModelListPageMode';\nimport { ExperimentLoggedModelListPageAutoComplete } from './ExperimentLoggedModelListPageAutoComplete';\nimport { LoggedModelMetricDataset, LoggedModelProto } from '../../types';\nimport { ExperimentLoggedModelListPageDatasetDropdown } from './ExperimentLoggedModelListPageDatasetDropdown';\nimport { ExperimentLoggedModelListPageOrderBySelector } from './ExperimentLoggedModelListPageOrderBySelector';\nimport { LoggedModelsTableGroupByMode } from './ExperimentLoggedModelListPageTable.utils';\nimport { ExperimentLoggedModelListPageGroupBySelector } from './ExperimentLoggedModelListPageGroupBySelector';\nimport { shouldEnableLoggedModelsGrouping } from '../../../common/utils/FeatureUtils';\n\nexport const ExperimentLoggedModelListPageControls = ({\n  orderByColumn,\n  orderByAsc,\n  sortingAndFilteringEnabled,\n  onChangeOrderBy,\n  onUpdateColumns,\n  columnDefs,\n  columnVisibility = {},\n  viewMode,\n  setViewMode,\n  searchQuery = '',\n  onChangeSearchQuery,\n  loggedModelsData,\n  selectedFilterDatasets,\n  onToggleDataset,\n  onClearSelectedDatasets,\n  groupBy,\n  onChangeGroupBy,\n}: {\n  orderByColumn?: string;\n  orderByAsc?: boolean;\n  groupBy?: LoggedModelsTableGroupByMode;\n  onChangeGroupBy?: (groupBy: LoggedModelsTableGroupByMode | undefined) => void;\n  sortingAndFilteringEnabled?: boolean;\n  onChangeOrderBy: (orderByColumn: string, orderByAsc: boolean) => void;\n  onUpdateColumns: (columnVisibility: Record<string, boolean>) => void;\n  columnDefs?: (ColDef | ColGroupDef)[];\n  columnVisibility?: Record<string, boolean>;\n  viewMode: ExperimentLoggedModelListPageMode;\n  setViewMode: (mode: ExperimentLoggedModelListPageMode) => void;\n  searchQuery?: string;\n  onChangeSearchQuery: (searchFilter: string) => void;\n  loggedModelsData: LoggedModelProto[];\n  selectedFilterDatasets?: LoggedModelMetricDataset[];\n  onToggleDataset?: (dataset: LoggedModelMetricDataset) => void;\n  onClearSelectedDatasets?: () => void;\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ display: 'flex', flexWrap: 'wrap', gap: theme.spacing.sm }}>\n      <SegmentedControlGroup\n        componentId=\"mlflow.logged_model.list.view-mode\"\n        name=\"view-mode\"\n        value={viewMode}\n        onChange={(e) => {\n          setViewMode(\n            coerceToEnum(ExperimentLoggedModelListPageMode, e.target.value, ExperimentLoggedModelListPageMode.TABLE),\n          );\n        }}\n      >\n        <SegmentedControlButton value=\"TABLE\">\n          <Tooltip\n            componentId=\"mlflow.logged_model.list.view-mode-table-tooltip\"\n            content={intl.formatMessage({\n              defaultMessage: 'Table view',\n              description: 'Label for the table view toggle button in the logged model list page',\n            })}\n          >\n            <ListIcon />\n          </Tooltip>\n          <span css={visuallyHidden}>\n            {intl.formatMessage({\n              defaultMessage: 'Table view',\n              description: 'Label for the table view toggle button in the logged model list page',\n            })}\n          </span>\n        </SegmentedControlButton>\n        <SegmentedControlButton value=\"CHART\">\n          <Tooltip\n            componentId=\"mlflow.logged_model.list.view-mode-chart-tooltip\"\n            content={intl.formatMessage({\n              defaultMessage: 'Chart view',\n              description: 'Label for the table view toggle button in the logged model list page',\n            })}\n          >\n            <ChartLineIcon />\n          </Tooltip>\n          <span css={visuallyHidden}>\n            {intl.formatMessage({\n              defaultMessage: 'Chart view',\n              description: 'Label for the table view toggle button in the logged model list page',\n            })}\n          </span>\n        </SegmentedControlButton>\n      </SegmentedControlGroup>\n      {sortingAndFilteringEnabled ? (\n        <>\n          <ExperimentLoggedModelListPageAutoComplete\n            searchQuery={searchQuery}\n            onChangeSearchQuery={onChangeSearchQuery}\n            loggedModelsData={loggedModelsData}\n          />\n          <ExperimentLoggedModelListPageDatasetDropdown\n            loggedModelsData={loggedModelsData}\n            onToggleDataset={onToggleDataset}\n            onClearSelectedDatasets={onClearSelectedDatasets}\n            selectedFilterDatasets={selectedFilterDatasets}\n          />\n          <ExperimentLoggedModelListPageOrderBySelector\n            orderByColumn={orderByColumn ?? ''}\n            orderByAsc={orderByAsc}\n            onChangeOrderBy={onChangeOrderBy}\n            columnDefs={columnDefs}\n          />\n        </>\n      ) : (\n        <Button\n          componentId=\"mlflow.logged_model.list.sort\"\n          icon={orderByAsc ? <SortAscendingIcon /> : <SortDescendingIcon />}\n          onClick={() => {\n            orderByColumn && onChangeOrderBy(orderByColumn, !orderByAsc);\n          }}\n        >\n          <FormattedMessage\n            defaultMessage=\"Sort: Created\"\n            description=\"Label for the sort button in the logged model list page\"\n          />\n        </Button>\n      )}\n      <ExperimentLoggedModelListPageColumnSelector\n        columnDefs={columnDefs}\n        columnVisibility={columnVisibility}\n        onUpdateColumns={onUpdateColumns}\n        disabled={viewMode === ExperimentLoggedModelListPageMode.CHART}\n      />\n      {shouldEnableLoggedModelsGrouping() && (\n        <ExperimentLoggedModelListPageGroupBySelector groupBy={groupBy} onChangeGroupBy={onChangeGroupBy} />\n      )}\n    </div>\n  );\n};\n","import { compact, keyBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { LoggedModelProto } from '../../../types';\nimport { getStableColorForRun } from '../../../utils/RunNameUtils';\nimport type { RunsChartsRunData } from '../../runs-charts/components/RunsCharts.common';\nimport { useExperimentLoggedModelListPageRowVisibilityContext } from './useExperimentLoggedModelListPageRowVisibility';\n\nexport const getMetricByDatasetChartDataKey = (metricKey?: string, datasetName?: string) =>\n  datasetName ? JSON.stringify([datasetName, metricKey]) : metricKey ?? '';\n\n/**\n * Creates chart-consumable data based on logged models, including metrics and parameters.\n * TODO: optimize, add unit tests\n */\nexport const useExperimentLoggedModelsChartsData = (loggedModels: LoggedModelProto[]) => {\n  const { isRowHidden } = useExperimentLoggedModelListPageRowVisibilityContext();\n  return useMemo<RunsChartsRunData[]>(\n    () =>\n      compact(\n        loggedModels.map<RunsChartsRunData | null>((model, index) =>\n          model.info?.model_id\n            ? {\n                displayName: model.info?.name ?? model.info?.model_id ?? 'Unknown',\n                images: {},\n\n                metrics: keyBy(\n                  model.data?.metrics?.map(({ dataset_name, key, value, timestamp, step }) => ({\n                    // Instead of using plain metric key, we will use specific data access key generated based on metric key and dataset\n                    dataKey: getMetricByDatasetChartDataKey(key, dataset_name),\n                    key: key ?? '',\n                    value: value ?? 0,\n                    timestamp: timestamp ?? 0,\n                    step: step ?? 0,\n                  })),\n                  'dataKey',\n                ),\n                params: keyBy(\n                  model.data?.params\n                    ?.map(({ key, value }) => ({ key: key ?? '', value: value ?? '' }))\n                    .filter(({ key }) => key) ?? [],\n                  'key',\n                ),\n                tags: {},\n                uuid: model.info.model_id,\n                hidden: isRowHidden(model.info.model_id, index),\n                color: getStableColorForRun(model.info.model_id),\n              }\n            : null,\n        ),\n      ),\n    [loggedModels, isRowHidden],\n  );\n};\n","import { useCallback, useEffect, useReducer, useState } from 'react';\nimport type { ExperimentRunsChartsUIConfiguration } from '../../experiment-page/models/ExperimentPageUIState';\nimport { ChartSectionConfig } from '../../../types';\nimport {\n  RunsChartsBarCardConfig,\n  RunsChartsCardConfig,\n  RunsChartsMetricByDatasetEntry,\n  RunsChartType,\n} from '../../runs-charts/runs-charts.types';\nimport { isEmpty, uniq } from 'lodash';\nimport { RunsChartsUIConfigurationSetter } from '../../runs-charts/hooks/useRunsChartsUIConfiguration';\n\ntype UpdateChartStateAction = { type: 'UPDATE'; stateSetter: RunsChartsUIConfigurationSetter };\ntype InitializeChartStateAction = { type: 'INITIALIZE'; initialConfig?: LoggedModelsChartsUIConfiguration };\ntype NewLoggedModelsStateAction = { type: 'METRICS_UPDATED'; metricsByDatasets: RunsChartsMetricByDatasetEntry[] };\n\ntype ChartsReducerAction = UpdateChartStateAction | NewLoggedModelsStateAction | InitializeChartStateAction;\n\ninterface LoggedModelsChartsUIConfiguration extends ExperimentRunsChartsUIConfiguration {\n  isDirty: boolean;\n}\n\nconst createLocalStorageKey = (storeIdentifier: string, version = 1) =>\n  `experiment-logged-models-charts-ui-state-v${version}-${storeIdentifier}`;\n\n/**\n * Generates a list of chart tiles based on logged models metrics and datasets.\n */\nconst getExperimentLoggedModelsPageChartSetup = (metricsByDatasets: RunsChartsMetricByDatasetEntry[]) => {\n  const compareRunCharts: RunsChartsBarCardConfig[] = metricsByDatasets.map(\n    ({ dataAccessKey, metricKey, datasetName }) => ({\n      deleted: false,\n      type: RunsChartType.BAR,\n      uuid: `autogen-${dataAccessKey}`,\n      metricSectionId: datasetName ? `autogen-${datasetName}` : 'default',\n      isGenerated: true,\n      metricKey,\n      dataAccessKey,\n      datasetName,\n      displayName: datasetName ? `(${datasetName}) ${metricKey}` : undefined,\n    }),\n  );\n\n  const compareRunSections: ChartSectionConfig[] = uniq(metricsByDatasets.map(({ datasetName }) => datasetName)).map(\n    (datasetName) => ({\n      display: true,\n      name: datasetName ?? 'Metrics',\n      uuid: datasetName ? `autogen-${datasetName}` : 'default',\n      isReordered: false,\n    }),\n  );\n\n  if (isEmpty(compareRunSections)) {\n    compareRunSections.push({\n      display: true,\n      name: 'Metrics',\n      uuid: 'default',\n      isReordered: false,\n    });\n  }\n\n  return {\n    compareRunCharts,\n    compareRunSections,\n  };\n};\n\n// Internal utility function  used to merge the current charts state with potentially incoming new charts and sections\nconst reconcileChartsAndSections = (\n  currentState: LoggedModelsChartsUIConfiguration,\n  newCharts: { compareRunCharts: RunsChartsCardConfig[]; compareRunSections: ChartSectionConfig[] },\n) => {\n  // If there are no charts / sections, or if the state is in pristine state, just set the new charts if they're not empty\n  if (!currentState.compareRunCharts || !currentState.compareRunSections || !currentState.isDirty) {\n    if (newCharts.compareRunCharts.length > 0 || newCharts.compareRunSections.length > 0) {\n      return {\n        ...currentState,\n        compareRunCharts: newCharts.compareRunCharts ?? [],\n        compareRunSections: newCharts.compareRunSections ?? [],\n      };\n    }\n  }\n\n  // Otherwise, detect new sections and charts and add them to the list\n  const newChartsToAdd = newCharts.compareRunCharts.filter(\n    (newChart) => !currentState.compareRunCharts?.find((chart) => chart.uuid === newChart.uuid),\n  );\n  const newSectionsToAdd = newCharts.compareRunSections.filter(\n    (newSection) =>\n      newChartsToAdd.find((newChart) => newChart.metricSectionId === newSection.uuid) &&\n      !currentState.compareRunSections?.find((section) => section.uuid === newSection.uuid),\n  );\n\n  if (newSectionsToAdd.length > 0 || newChartsToAdd.length > 0) {\n    return {\n      ...currentState,\n      compareRunCharts: currentState.compareRunCharts\n        ? [...currentState.compareRunCharts, ...newChartsToAdd]\n        : newCharts.compareRunCharts,\n      compareRunSections: currentState.compareRunSections\n        ? [...currentState.compareRunSections, ...newSectionsToAdd]\n        : newCharts.compareRunSections,\n    };\n  }\n  return currentState;\n};\n\nconst chartsUIStateInitializer = (): LoggedModelsChartsUIConfiguration => ({\n  compareRunCharts: undefined,\n  compareRunSections: undefined,\n  autoRefreshEnabled: false,\n  isAccordionReordered: false,\n  chartsSearchFilter: '',\n  globalLineChartConfig: undefined,\n  isDirty: false,\n});\n\n// Reducer to manage the state of the charts UI\nconst chartsUIStateReducer = (state: LoggedModelsChartsUIConfiguration, action: ChartsReducerAction) => {\n  // 'UPDATE' is sent by controls that updates the UI state directly\n  if (action.type === 'UPDATE') {\n    return { ...action.stateSetter(state), isDirty: true };\n  }\n  // 'METRICS_UPDATED' is sent when new logged models data is available and potentially new charts need to be added\n  if (action.type === 'METRICS_UPDATED') {\n    const { compareRunCharts, compareRunSections } = getExperimentLoggedModelsPageChartSetup(action.metricsByDatasets);\n    const newState = reconcileChartsAndSections(state, { compareRunCharts, compareRunSections });\n    return newState;\n  }\n  if (action.type === 'INITIALIZE') {\n    if (action.initialConfig) {\n      return action.initialConfig;\n    }\n  }\n  return state;\n};\n\nconst loadPersistedDataFromStorage = async (storeIdentifier: string) => {\n  // This function is async on purpose to accommodate potential asynchoronous storage mechanisms (e.g. IndexedDB) in the future\n  const serializedData = localStorage.getItem(createLocalStorageKey(storeIdentifier));\n  if (!serializedData) {\n    return undefined;\n  }\n  try {\n    return JSON.parse(serializedData);\n  } catch {\n    return undefined;\n  }\n};\n\nconst saveDataToStorage = async (storeIdentifier: string, dataToPersist: LoggedModelsChartsUIConfiguration) => {\n  localStorage.setItem(createLocalStorageKey(storeIdentifier), JSON.stringify(dataToPersist));\n};\n\nexport const useExperimentLoggedModelsChartsUIState = (\n  metricsByDatasets: RunsChartsMetricByDatasetEntry[],\n  storeIdentifier: string,\n) => {\n  const [chartUIState, dispatchChartUIState] = useReducer(chartsUIStateReducer, undefined, chartsUIStateInitializer);\n  const [loading, setLoading] = useState(true);\n\n  // Attempt to load the persisted data when the component mounts\n  useEffect(() => {\n    setLoading(true);\n    loadPersistedDataFromStorage(storeIdentifier).then((data) => {\n      dispatchChartUIState({ type: 'INITIALIZE', initialConfig: data });\n      setLoading(false);\n    });\n  }, [storeIdentifier]);\n\n  // Attempt to update the charts state when the logged models change\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    dispatchChartUIState({ type: 'METRICS_UPDATED', metricsByDatasets });\n  }, [metricsByDatasets, loading]);\n\n  // Attempt persist the data when the state changes\n  useEffect(() => {\n    if (chartUIState.isDirty) {\n      saveDataToStorage(storeIdentifier, chartUIState);\n    }\n  }, [storeIdentifier, chartUIState]);\n\n  // Create an updater function to pass it to chart controls\n  const updateUIState = useCallback(\n    (stateSetter: RunsChartsUIConfigurationSetter) =>\n      dispatchChartUIState({\n        type: 'UPDATE',\n        stateSetter,\n      }),\n    [],\n  );\n\n  return { chartUIState, updateUIState, loading };\n};\n","import { Empty, Input, SearchIcon, Spinner, useDesignSystemTheme } from '@databricks/design-system';\nimport { noop, uniq } from 'lodash';\nimport { memo, ReactNode, useMemo, useCallback, useState } from 'react';\nimport { LoggedModelProto } from '../../types';\nimport { ExperimentRunsChartsUIConfiguration } from '../experiment-page/models/ExperimentPageUIState';\nimport { RunsChartsRunData } from '../runs-charts/components/RunsCharts.common';\nimport { RunsChartsDraggableCardsGridContextProvider } from '../runs-charts/components/RunsChartsDraggableCardsGridContext';\nimport { RunsChartsFullScreenModal } from '../runs-charts/components/RunsChartsFullScreenModal';\nimport { RunsChartsTooltipBody } from '../runs-charts/components/RunsChartsTooltipBody';\nimport { RunsChartsSectionAccordion } from '../runs-charts/components/sections/RunsChartsSectionAccordion';\nimport { RunsChartsTooltipWrapper } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport {\n  RunsChartsUIConfigurationContextProvider,\n  useConfirmChartCardConfigurationFn,\n  useRemoveRunsChartFn,\n  useUpdateRunsChartsUIConfiguration,\n} from '../runs-charts/hooks/useRunsChartsUIConfiguration';\nimport { RunsChartsCardConfig, RunsChartsMetricByDatasetEntry, RunsChartType } from '../runs-charts/runs-charts.types';\nimport { useExperimentLoggedModelsChartsData } from './hooks/useExperimentLoggedModelsChartsData';\nimport { useExperimentLoggedModelsChartsUIState } from './hooks/useExperimentLoggedModelsChartsUIState';\nimport { useExperimentLoggedModelAllMetricsByDataset } from './hooks/useExperimentLoggedModelAllMetricsByDataset';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useMemoDeep } from '../../../common/hooks/useMemoDeep';\nimport { RunsChartsConfigureModal } from '../runs-charts/components/RunsChartsConfigureModal';\nimport Routes from '../../routes';\n\nconst ExperimentLoggedModelListChartsImpl = memo(\n  ({\n    chartData,\n    uiState,\n    metricKeysByDataset,\n    minWidth,\n  }: {\n    chartData: RunsChartsRunData[];\n    uiState: ExperimentRunsChartsUIConfiguration;\n    metricKeysByDataset: RunsChartsMetricByDatasetEntry[];\n    minWidth: number;\n  }) => {\n    const { theme } = useDesignSystemTheme();\n    const { formatMessage } = useIntl();\n\n    const availableMetricKeys = useMemo(() => uniq(chartData.flatMap((run) => Object.keys(run.metrics))), [chartData]);\n    const availableParamKeys = useMemo(() => uniq(chartData.flatMap((run) => Object.keys(run.params))), [chartData]);\n\n    const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n\n    const setSearch = useCallback(\n      (search: string) => {\n        updateChartsUIState((state) => ({ ...state, chartsSearchFilter: search }));\n      },\n      [updateChartsUIState],\n    );\n\n    const [configuredCardConfig, setConfiguredCardConfig] = useState<RunsChartsCardConfig | null>(null);\n\n    const addNewChartCard = useCallback(\n      (metricSectionId: string) => (type: RunsChartType) =>\n        setConfiguredCardConfig(RunsChartsCardConfig.getEmptyChartCardByType(type, false, undefined, metricSectionId)),\n      [],\n    );\n\n    const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n    const removeChart = useRemoveRunsChartFn();\n\n    const [fullScreenChart, setFullScreenChart] = useState<\n      | {\n          config: RunsChartsCardConfig;\n          title: string | ReactNode;\n          subtitle: ReactNode;\n        }\n      | undefined\n    >(undefined);\n\n    const fullscreenTooltipContextValue = useMemo(() => ({ runs: chartData }), [chartData]);\n\n    const tooltipContextValue = useMemo(\n      () => ({ runs: chartData, getDataTraceLink: Routes.getExperimentLoggedModelDetailsPageRoute }),\n      [chartData],\n    );\n\n    const emptyState = (\n      <div css={{ marginTop: theme.spacing.lg }}>\n        <Empty\n          description={\n            <FormattedMessage\n              defaultMessage=\"No models found in experiment or all models are hidden. Select at least one model to view charts.\"\n              description=\"Label displayed in logged models chart view when no models are visible or selected\"\n            />\n          }\n        />\n      </div>\n    );\n\n    return (\n      <div\n        css={{\n          backgroundColor: theme.colors.backgroundPrimary,\n          paddingLeft: theme.spacing.md,\n          paddingRight: theme.spacing.md,\n          paddingBottom: theme.spacing.md,\n\n          borderTop: `1px solid ${theme.colors.border}`,\n          borderLeft: `1px solid ${theme.colors.border}`,\n\n          flex: 1,\n          overflow: 'hidden',\n          display: 'flex',\n          minWidth: minWidth,\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.sm,\n            paddingTop: theme.spacing.sm,\n            overflow: 'hidden',\n            flex: 1,\n          }}\n        >\n          <Input\n            componentId=\"mlflow.logged_model.list.charts.search\"\n            role=\"searchbox\"\n            prefix={<SearchIcon />}\n            value={uiState.chartsSearchFilter ?? ''}\n            allowClear\n            onChange={({ target }) => setSearch(target.value)}\n            placeholder={formatMessage({\n              defaultMessage: 'Search metric charts',\n              description: 'Placeholder for chart search input on the logged model chart view',\n            })}\n          />\n          <div css={{ overflow: 'auto' }}>\n            <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={RunsChartsTooltipBody}>\n              <RunsChartsDraggableCardsGridContextProvider visibleChartCards={uiState.compareRunCharts}>\n                <RunsChartsSectionAccordion\n                  compareRunSections={uiState.compareRunSections}\n                  compareRunCharts={uiState.compareRunCharts}\n                  reorderCharts={noop}\n                  insertCharts={noop}\n                  chartData={chartData}\n                  startEditChart={setConfiguredCardConfig}\n                  removeChart={removeChart}\n                  addNewChartCard={addNewChartCard}\n                  search={uiState.chartsSearchFilter ?? ''}\n                  groupBy={null}\n                  setFullScreenChart={setFullScreenChart}\n                  autoRefreshEnabled={false}\n                  hideEmptyCharts={false}\n                  globalLineChartConfig={undefined}\n                  supportedChartTypes={[RunsChartType.BAR, RunsChartType.SCATTER]}\n                  noRunsSelectedEmptyState={emptyState}\n                />\n              </RunsChartsDraggableCardsGridContextProvider>\n            </RunsChartsTooltipWrapper>\n            <RunsChartsFullScreenModal\n              fullScreenChart={fullScreenChart}\n              onCancel={() => setFullScreenChart(undefined)}\n              chartData={chartData}\n              groupBy={null}\n              tooltipContextValue={fullscreenTooltipContextValue}\n              tooltipComponent={RunsChartsTooltipBody}\n              autoRefreshEnabled={false}\n              globalLineChartConfig={undefined}\n            />\n            {configuredCardConfig && (\n              <RunsChartsConfigureModal\n                chartRunData={chartData}\n                metricKeyList={availableMetricKeys}\n                metricKeysByDataset={metricKeysByDataset}\n                paramKeyList={availableParamKeys}\n                config={configuredCardConfig}\n                onSubmit={(configuredCardConfig) => {\n                  confirmChartCardConfiguration({ ...configuredCardConfig, displayName: undefined });\n                  setConfiguredCardConfig(null);\n                }}\n                onCancel={() => setConfiguredCardConfig(null)}\n                groupBy={null}\n                supportedChartTypes={[RunsChartType.BAR, RunsChartType.SCATTER]}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\n\nexport const ExperimentLoggedModelListCharts = memo(\n  ({\n    loggedModels,\n    experimentId,\n    minWidth,\n  }: {\n    loggedModels: LoggedModelProto[];\n    experimentId: string;\n    minWidth: number;\n  }) => {\n    const { theme } = useDesignSystemTheme();\n\n    // Perform deep comparison on the logged models to avoid re-rendering the charts when the logged models change.\n    // Deep comparison should still be cheaper than rerendering all charts.\n    const cachedLoggedModels = useMemoDeep(() => loggedModels, [loggedModels]);\n\n    const metricsByDataset = useExperimentLoggedModelAllMetricsByDataset(cachedLoggedModels);\n\n    const {\n      chartUIState,\n      updateUIState,\n      loading: loadingState,\n    } = useExperimentLoggedModelsChartsUIState(metricsByDataset, experimentId);\n    const chartData = useExperimentLoggedModelsChartsData(cachedLoggedModels);\n\n    if (loadingState) {\n      return (\n        <div\n          css={{\n            backgroundColor: theme.colors.backgroundPrimary,\n            paddingTop: theme.spacing.lg,\n            borderTop: `1px solid ${theme.colors.border}`,\n            borderLeft: `1px solid ${theme.colors.border}`,\n            flex: 1,\n            justifyContent: 'center',\n            alignItems: 'center',\n            display: 'flex',\n          }}\n        >\n          <Spinner />\n        </div>\n      );\n    }\n    return (\n      <RunsChartsUIConfigurationContextProvider updateChartsUIState={updateUIState}>\n        <ExperimentLoggedModelListChartsImpl\n          chartData={chartData}\n          uiState={chartUIState}\n          metricKeysByDataset={metricsByDataset}\n          minWidth={minWidth}\n        />\n      </RunsChartsUIConfigurationContextProvider>\n    );\n  },\n);\n","import { isEqual } from 'lodash';\nimport { useRef } from 'react';\n\n/**\n * Utility hook that memoizes value based on deep comparison.\n * Dedicated to a few limited use cases where deep comparison is still cheaper than resulting re-renders.\n */\nexport const useMemoDeep = <T>(factory: () => T, deps: unknown[]): T => {\n  const ref = useRef<{ deps: unknown[]; value: T }>();\n\n  if (!ref.current || !isEqual(deps, ref.current.deps)) {\n    ref.current = { deps, value: factory() };\n  }\n\n  return ref.current.value;\n};\n","import { orderBy } from 'lodash';\nimport type { LoggedModelProto } from '../../../types';\nimport { useMemo } from 'react';\nimport type { RunsChartsMetricByDatasetEntry } from '../../runs-charts/runs-charts.types';\nimport { getMetricByDatasetChartDataKey } from './useExperimentLoggedModelsChartsData';\n\nexport const useExperimentLoggedModelAllMetricsByDataset = (loggedModels: LoggedModelProto[]) =>\n  useMemo(() => {\n    const metricsByDataset: RunsChartsMetricByDatasetEntry[] = [];\n    loggedModels.forEach((model) => {\n      model.data?.metrics?.forEach(({ key: metricKey, dataset_name: datasetName }) => {\n        if (metricKey && !metricsByDataset.find((e) => e.metricKey === metricKey && e.datasetName === datasetName)) {\n          const dataAccessKey = getMetricByDatasetChartDataKey(metricKey, datasetName);\n          metricsByDataset.push({ metricKey, datasetName, dataAccessKey });\n        }\n      });\n    });\n    return orderBy(metricsByDataset, ({ datasetName }) => !datasetName);\n  }, [loggedModels]);\n","import { Alert, Spacer, useDesignSystemTheme } from '@databricks/design-system';\nimport invariant from 'invariant';\nimport { useParams } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { ExperimentLoggedModelPageWrapper } from './ExperimentLoggedModelPageWrapper';\n\nimport { isLoggedModelsFilteringAndSortingEnabled } from '../../../common/utils/FeatureUtils';\nimport { useEffect, useState } from 'react';\nimport { ExperimentLoggedModelListPageTable } from '../../components/experiment-logged-models/ExperimentLoggedModelListPageTable';\nimport { useSearchLoggedModelsQuery } from '../../hooks/logged-models/useSearchLoggedModelsQuery';\nimport { ExperimentLoggedModelListPageControls } from '../../components/experiment-logged-models/ExperimentLoggedModelListPageControls';\nimport {\n  parseLoggedModelMetricOrderByColumnId,\n  useExperimentLoggedModelListPageTableColumns,\n} from '../../components/experiment-logged-models/hooks/useExperimentLoggedModelListPageTableColumns';\nimport { ExperimentLoggedModelOpenDatasetDetailsContextProvider } from '../../components/experiment-logged-models/hooks/useExperimentLoggedModelOpenDatasetDetails';\nimport { useLoggedModelsListPageState } from '../../components/experiment-logged-models/hooks/useLoggedModelsListPagePageState';\nimport { useRelatedRunsDataForLoggedModels } from '../../hooks/logged-models/useRelatedRunsDataForLoggedModels';\nimport {\n  ExperimentLoggedModelListPageMode,\n  useExperimentLoggedModelListPageMode,\n} from '../../components/experiment-logged-models/hooks/useExperimentLoggedModelListPageMode';\nimport { ExperimentViewRunsTableResizer } from '../../components/experiment-page/components/runs/ExperimentViewRunsTableResizer';\nimport { ExperimentLoggedModelListCharts } from '../../components/experiment-logged-models/ExperimentLoggedModelListCharts';\nimport { ExperimentLoggedModelListPageRowVisibilityContextProvider } from '../../components/experiment-logged-models/hooks/useExperimentLoggedModelListPageRowVisibility';\nimport { RunsChartsSetHighlightContextProvider } from '../../components/runs-charts/hooks/useRunsChartTraceHighlight';\nimport { BadRequestError } from '@databricks/web-shared/errors';\nimport { useResizableMaxWidth } from '@mlflow/mlflow/src/shared/web-shared/hooks';\n\nconst INITIAL_RUN_COLUMN_SIZE = 295;\nconst CHARTS_MIN_WIDTH = 350;\n\nconst ExperimentLoggedModelListPageImpl = () => {\n  const { experimentId } = useParams();\n  const { theme } = useDesignSystemTheme();\n  const sortingAndFilteringEnabled = isLoggedModelsFilteringAndSortingEnabled();\n\n  const {\n    state: {\n      orderByColumn,\n      orderByAsc,\n      columnVisibility,\n      rowVisibilityMap,\n      rowVisibilityMode,\n      selectedFilterDatasets,\n      groupBy,\n    },\n    searchQuery,\n    isFilteringActive,\n    setOrderBy,\n    setColumnVisibility,\n    setRowVisibilityMode,\n    toggleRowVisibility,\n    updateSearchQuery,\n    toggleDataset,\n    clearSelectedDatasets,\n    setGroupBy,\n  } = useLoggedModelsListPageState();\n\n  invariant(experimentId, 'Experiment ID must be defined');\n\n  const { viewMode, setViewMode } = useExperimentLoggedModelListPageMode();\n\n  // Translate currently sorting column to the format accepted by the API query.\n  // If the column is a metric, we need to parse and pass the dataset name and digest if found.\n  const getOrderByRequestData = () => {\n    if (!orderByColumn) {\n      return { orderByField: undefined };\n    }\n    const parsedMetricOrderByColumn = parseLoggedModelMetricOrderByColumnId(orderByColumn);\n    if (parsedMetricOrderByColumn.datasetDigest && parsedMetricOrderByColumn.datasetName) {\n      return {\n        orderByField: `metrics.${parsedMetricOrderByColumn.metricKey}`,\n        orderByDatasetName: parsedMetricOrderByColumn.datasetName,\n        orderByDatasetDigest: parsedMetricOrderByColumn.datasetDigest,\n      };\n    }\n    return { orderByField: orderByColumn };\n  };\n\n  const {\n    data: loggedModels,\n    isFetching: isFetchingLoggedModels,\n    isLoading: isLoadingLoggedModels,\n    error: loggedModelsError,\n    nextPageToken,\n    loadMoreResults,\n  } = useSearchLoggedModelsQuery({\n    experimentIds: [experimentId],\n    orderByAsc,\n    searchQuery,\n    selectedFilterDatasets,\n    ...getOrderByRequestData(),\n  });\n\n  // Find and extract 400 error from the logged models error\n  const badRequestError = loggedModelsError instanceof BadRequestError ? loggedModelsError : undefined;\n\n  const { data: relatedRunsData } = useRelatedRunsDataForLoggedModels({ loggedModels });\n\n  const { columnDefs, compactColumnDefs } = useExperimentLoggedModelListPageTableColumns({\n    loggedModels,\n    columnVisibility,\n    isLoading: isLoadingLoggedModels,\n    orderByColumn,\n    orderByAsc,\n    enableSortingByMetrics: sortingAndFilteringEnabled,\n  });\n\n  const [tableAreaWidth, setTableAreaWidth] = useState<number>(INITIAL_RUN_COLUMN_SIZE);\n  const [tableHidden, setTableHidden] = useState(false);\n\n  const isCompactTableMode = viewMode !== ExperimentLoggedModelListPageMode.TABLE;\n\n  const tableElement =\n    isCompactTableMode && tableHidden ? (\n      <div css={{ width: theme.spacing.md }} />\n    ) : (\n      <ExperimentLoggedModelListPageTable\n        columnDefs={isCompactTableMode ? compactColumnDefs : columnDefs}\n        loggedModels={loggedModels ?? []}\n        isLoading={isLoadingLoggedModels}\n        isLoadingMore={isFetchingLoggedModels}\n        badRequestError={badRequestError}\n        moreResultsAvailable={Boolean(nextPageToken)}\n        onLoadMore={loadMoreResults}\n        onOrderByChange={setOrderBy}\n        orderByAsc={orderByAsc}\n        orderByColumn={orderByColumn}\n        columnVisibility={columnVisibility}\n        relatedRunsData={relatedRunsData}\n        isFilteringActive={isFilteringActive}\n        groupModelsBy={groupBy}\n      />\n    );\n\n  const { resizableMaxWidth, ref } = useResizableMaxWidth(CHARTS_MIN_WIDTH);\n\n  return (\n    <ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n      <ExperimentLoggedModelListPageRowVisibilityContextProvider\n        visibilityMap={rowVisibilityMap}\n        visibilityMode={rowVisibilityMode}\n        setRowVisibilityMode={setRowVisibilityMode}\n        toggleRowVisibility={toggleRowVisibility}\n      >\n        <ExperimentLoggedModelListPageControls\n          columnDefs={columnDefs}\n          columnVisibility={columnVisibility}\n          onChangeOrderBy={setOrderBy}\n          onUpdateColumns={setColumnVisibility}\n          orderByColumn={orderByColumn}\n          orderByAsc={orderByAsc}\n          viewMode={viewMode}\n          setViewMode={setViewMode}\n          searchQuery={searchQuery}\n          onChangeSearchQuery={updateSearchQuery}\n          loggedModelsData={loggedModels ?? []}\n          sortingAndFilteringEnabled={sortingAndFilteringEnabled}\n          selectedFilterDatasets={selectedFilterDatasets}\n          onToggleDataset={toggleDataset}\n          onClearSelectedDatasets={clearSelectedDatasets}\n          groupBy={groupBy}\n          onChangeGroupBy={setGroupBy}\n        />\n        <Spacer size=\"sm\" shrinks={false} />\n        {/* Display error message, but not if it's 400 - in that case, the error message is displayed in the table */}\n        {loggedModelsError?.message && !badRequestError && (\n          <>\n            <Alert\n              componentId=\"mlflow.logged_models.list.error\"\n              message={loggedModelsError.message}\n              type=\"error\"\n              closable={false}\n            />\n            <Spacer size=\"sm\" shrinks={false} />\n          </>\n        )}\n        {isCompactTableMode ? (\n          <RunsChartsSetHighlightContextProvider>\n            <div ref={ref} css={{ display: 'flex', flex: 1, overflow: 'hidden', position: 'relative' }}>\n              <ExperimentViewRunsTableResizer\n                onResize={setTableAreaWidth}\n                runListHidden={tableHidden}\n                width={tableAreaWidth}\n                onHiddenChange={setTableHidden}\n                maxWidth={resizableMaxWidth}\n              >\n                {tableElement}\n              </ExperimentViewRunsTableResizer>\n              {viewMode === ExperimentLoggedModelListPageMode.CHART && (\n                <ExperimentLoggedModelListCharts\n                  loggedModels={loggedModels ?? []}\n                  experimentId={experimentId}\n                  minWidth={CHARTS_MIN_WIDTH}\n                />\n              )}\n            </div>\n          </RunsChartsSetHighlightContextProvider>\n        ) : (\n          tableElement\n        )}\n      </ExperimentLoggedModelListPageRowVisibilityContextProvider>\n    </ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n  );\n};\n\nconst ExperimentLoggedModelListPage = () => (\n  <ExperimentLoggedModelPageWrapper>\n    <ExperimentLoggedModelListPageImpl />\n  </ExperimentLoggedModelPageWrapper>\n);\n\nexport default ExperimentLoggedModelListPage;\n","import { gql, QueryHookOptions } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { useQuery } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables } from '../../graphql/__generated__/graphql';\nimport { isArray } from 'lodash';\nimport { NotFoundError } from '@databricks/web-shared/errors';\n\nconst GET_EXPERIMENT_QUERY = gql`\n  query MlflowGetExperimentQuery($input: MlflowGetExperimentInput!) @component(name: \"MLflow.ExperimentRunTracking\") {\n    mlflowGetExperiment(input: $input) {\n      apiError {\n        code\n        message\n      }\n      experiment {\n        artifactLocation\n        creationTime\n        experimentId\n        lastUpdateTime\n        lifecycleStage\n        name\n        tags {\n          key\n          value\n        }\n      }\n    }\n  }\n`;\n\nexport type UseGetExperimentQueryResultExperiment = NonNullable<\n  MlflowGetExperimentQuery['mlflowGetExperiment']\n>['experiment'];\n\n/* eslint-disable react-hooks/rules-of-hooks */\nexport const useGetExperimentQuery = ({\n  experimentId,\n  options = {},\n}: {\n  experimentId?: string;\n  options?: QueryHookOptions<MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables>;\n}) => {\n  const {\n    data,\n    loading,\n    error: apolloError,\n    refetch,\n  } = useQuery<MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables>(GET_EXPERIMENT_QUERY, {\n    variables: {\n      input: {\n        experimentId,\n      },\n    },\n    skip: !experimentId,\n    ...options,\n  });\n\n  // Extract the single experiment entity from the response\n  const experimentEntity: UseGetExperimentQueryResultExperiment | undefined = data?.mlflowGetExperiment?.experiment;\n\n  const getApiError = () => {\n    return data?.mlflowGetExperiment?.apiError;\n  };\n\n  return {\n    loading,\n    data: experimentEntity,\n    refetch,\n    apolloError: apolloError,\n    apiError: getApiError(),\n  } as const;\n};\n","import type { LoggedModelProto, RunEntity } from '../../types';\nimport { useEffect, useMemo } from 'react';\nimport { compact, sortBy, uniq } from 'lodash';\nimport { QueryFunctionContext, useQueries } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { MlflowService } from '../../sdk/MlflowService';\nimport { useArrayMemo } from '../../../common/hooks/useArrayMemo';\n\ntype UseRegisteredModelRelatedRunNamesQueryKey = ['USE_RELATED_RUNS_DATA_FOR_LOGGED_MODELS', { runUuid: string }];\n\nconst getQueryKey = (runUuid: string): UseRegisteredModelRelatedRunNamesQueryKey => [\n  'USE_RELATED_RUNS_DATA_FOR_LOGGED_MODELS',\n  { runUuid },\n];\n\nconst queryFn = async ({\n  queryKey: [, { runUuid }],\n}: QueryFunctionContext<UseRegisteredModelRelatedRunNamesQueryKey>): Promise<RunEntity | null> => {\n  try {\n    const data = await MlflowService.getRun({ run_id: runUuid });\n    return data?.run;\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * Hook used to fetch necessary run data based on metadata found in logged models\n */\nexport const useRelatedRunsDataForLoggedModels = ({ loggedModels = [] }: { loggedModels?: LoggedModelProto[] }) => {\n  const runUuids = useMemo(() => {\n    // Extract all run ids found in metrics and source run ids\n    const allMetricRunUuids = compact(\n      loggedModels?.flatMap((loggedModel) => loggedModel?.data?.metrics?.map((metric) => metric.run_id)),\n    );\n    const allSourceRunUuids = compact(loggedModels?.map((loggedModel) => loggedModel?.info?.source_run_id));\n    const distinctRunUuids = sortBy(uniq([...allMetricRunUuids, ...allSourceRunUuids]));\n\n    return distinctRunUuids;\n  }, [loggedModels]);\n\n  const queryResults = useQueries({\n    queries: runUuids.map((runUuid) => ({\n      queryKey: getQueryKey(runUuid),\n      queryFn,\n      cacheTime: Infinity,\n      staleTime: Infinity,\n      refetchOnWindowFocus: false,\n      retry: false,\n    })),\n  });\n\n  const loading = queryResults.some(({ isLoading }) => isLoading);\n  const error = queryResults.find(({ error }) => error)?.error as Error | undefined;\n\n  const memoizedQueryResults = useArrayMemo(queryResults.map(({ data }) => data));\n\n  const data = useMemo(\n    () => memoizedQueryResults.map((data) => data).filter(Boolean) as RunEntity[],\n    [memoizedQueryResults],\n  );\n\n  return {\n    data,\n    loading,\n    error,\n  };\n};\n","import { useRef } from 'react';\n\n/**\n * A custom hook that memoizes an array based on the reference of its elements, not the array itself.\n */\nexport function useArrayMemo<T>(array: T[]) {\n  // This holds reference to previous value\n  const ref = useRef<T[]>();\n  // Check if each element of the old and new array match\n  const areArraysConsideredTheSame =\n    ref.current && array.length === ref.current.length\n      ? array.every((element, i) => {\n          return element === ref.current?.[i];\n        })\n      : // Initially there's no old array defined/stored, so set to false\n        false;\n\n  if (!areArraysConsideredTheSame) {\n    ref.current = array;\n  }\n\n  return areArraysConsideredTheSame && ref.current ? ref.current : array;\n}\n","import { UserActionErrorHandler } from '@databricks/web-shared/metrics';\nimport { QueryClient, QueryClientProvider } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { DangerIcon, Empty, PageWrapper } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nconst PageFallback = ({ error }: { error?: Error }) => {\n  return (\n    <PageWrapper css={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        data-testid=\"fallback\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Error\"\n            description=\"Title for error fallback component in prompts management UI\"\n          />\n        }\n        description={\n          error?.message ?? (\n            <FormattedMessage\n              defaultMessage=\"An error occurred while rendering this component.\"\n              description=\"Description for default error message in prompts management UI\"\n            />\n          )\n        }\n        image={<DangerIcon />}\n      />\n    </PageWrapper>\n  );\n};\n\n/**\n * Wrapper for all experiment logged model pages.\n * Provides error boundaries and user action error handling.\n */\nexport const ExperimentLoggedModelPageWrapper = ({\n  children,\n  resetKey,\n}: {\n  children: React.ReactNode;\n  resetKey?: unknown;\n}) => {\n  return (\n    <ErrorBoundary FallbackComponent={PageFallback} resetKeys={[resetKey]}>\n      <UserActionErrorHandler>{children}</UserActionErrorHandler>\n    </ErrorBoundary>\n  );\n};\n","import React from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nfunction useMatchesMediaQuery(queryList: MediaQueryList) {\n  return useSyncExternalStore(\n    React.useCallback(\n      (callback) => {\n        queryList.addEventListener('change', callback);\n        return () => {\n          queryList.removeEventListener('change', callback);\n        };\n      },\n      [queryList],\n    ),\n    () => queryList.matches,\n  );\n}\n\n/**\n * React hook that listens for changes to a [media query][media-query]. Uses\n * [`window.matchMedia()`][match-media] under-the-hood.\n *\n * [media-query]: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries\n * [match-media]: https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\n *\n * @usage\n *\n * ```tsx\n * function FancyButton() {\n *   const prefersReducedMotion = useMediaQuery('(prefers-reduced-motion)');\n *   return prefersReducedMotion ? <Button /> : <DancingButton />;\n * }\n * ```\n *\n * > **Note**\n * > The vast majority of use-cases can (and should) use vanilla CSS media\n * > queries instead of this hook — which will cause a re-render when the match\n * > state changes. Usage of this hook should be reserved for use-cases where\n * > CSS cannot be used instead.\n * >\n * > ```tsx\n * > <Button css={{ 'not (prefers-reduced-motion)': { animation: … } }} />\n * > ```\n */\nexport function useMediaQuery(query: string) {\n  // Note: a new MediaQueryList is created with every _usage_ of this hook.\n  // It's probably cheap to create many instances of MediaQueryList, and\n  // garbage collection will still clean up as expected, but consider using a\n  // [weak cache](https://github.com/tc39/proposal-weakrefs#weak-caches) to\n  // reuse MediaQueryLists where possible if performance is impacted.\n  const queryList = React.useMemo(() => window.matchMedia(query), [query]);\n  return useMatchesMediaQuery(queryList);\n}\n","import { type RefObject, useRef, useCallback, useEffect, useState } from 'react';\n\ntype ResizeObserverOptions<ElementType extends Element> = {\n  /**\n   * The element to watch for size changes. Can either pass a ref object or a function that when called will return the element to be watched\n   */\n  ref: RefObject<ElementType | null> | (() => ElementType | null);\n  /**\n   * Optionally debounces state updates, to prevent rerendering on every single resize\n   */\n  debounceTimeMs?: number;\n};\n\nexport function useResizeObserver<ElementType extends Element>({\n  ref: rootRef,\n  debounceTimeMs,\n}: ResizeObserverOptions<ElementType>): { width: number; height: number } | null {\n  const prevSize = useRef<{ width: number; height: number }>({ width: -1, height: -1 });\n  const debounceRef = useRef<ReturnType<typeof setTimeout>>();\n  const [size, setSize] = useState<{ width: number; height: number } | null>(null);\n\n  const onResize = useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      if (entries.length === 0) {\n        return;\n      }\n\n      const rect = entries[0].contentRect;\n      if (prevSize.current.width === -1) {\n        // First update, just set size immediately\n        prevSize.current = { width: rect.width, height: rect.height };\n        setSize(prevSize.current);\n        return;\n      }\n\n      if (rect.width !== prevSize.current.width || rect.height !== prevSize.current.height) {\n        prevSize.current.width = rect.width;\n        prevSize.current.height = rect.height;\n\n        if (!debounceTimeMs) {\n          setSize({ ...prevSize.current });\n          return;\n        }\n        clearTimeout(debounceRef.current);\n        debounceRef.current = setTimeout(() => {\n          setSize({ ...prevSize.current });\n        }, debounceTimeMs);\n      }\n    },\n    [debounceTimeMs],\n  );\n\n  const observerRef = useRef<ResizeObserver>();\n  if (!observerRef.current) {\n    observerRef.current = new ResizeObserver(onResize);\n  }\n\n  useEffect(() => {\n    const rootElement = typeof rootRef === 'function' ? rootRef() : rootRef.current;\n    if (rootElement) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- TODO(FEINF-3982)\n      const observer = observerRef.current!;\n      observer.observe(rootElement);\n      return () => observer.unobserve(rootElement);\n    }\n    return;\n  });\n\n  return size;\n}\n","import React from 'react';\nimport { shouldEnableMinMaxMetricsOnExperimentPage } from '../../common/utils/FeatureUtils';\nimport { MLFLOW_INTERNAL_PREFIX } from '../../common/utils/TagUtils';\n\nexport type EntitySearchAutoCompleteOption = {\n  label?: string | React.ReactNode;\n  value: string;\n};\n\nexport type EntitySearchAutoCompleteOptionGroup = {\n  label: string;\n  options: EntitySearchAutoCompleteOption[];\n};\n\nexport type EntitySearchAutoCompleteEntity = {\n  name: string;\n  startIndex: number;\n  endIndex: number;\n};\n\ntype EntitySearchAutoCompleteClause = {\n  clause: string;\n  startIndex: number;\n};\n\nexport type EntitySearchAutoCompleteEntityNameGroup = {\n  metricNames: string[];\n  paramNames: string[];\n  tagNames: string[];\n};\n\n/**\n * Given an input string, returns a list of Clause objects\n * containing the clauses in the input and the indices of their\n * starting positions in the overall string.\n */\nconst getClausesAndStartIndex = (str: string) => {\n  const re = /and[\\s]+/gi;\n  const results: EntitySearchAutoCompleteClause[] = [];\n  let match, position;\n  while (((position = re.lastIndex), (match = re.exec(str)))) {\n    results.push({ clause: str.substring(position, match.index), startIndex: position });\n  }\n  results.push({ clause: str.substring(position), startIndex: position });\n  return results;\n};\n\n/**\n * Filters out internal tag names and wrap names that include control characters in backticks.\n */\nexport const cleanEntitySearchTagNames = (tagNames: string[]) =>\n  tagNames\n    .filter((tag: string) => !tag.startsWith(MLFLOW_INTERNAL_PREFIX))\n    .map((tag: string) => {\n      if (tag.includes('\"') || tag.includes(' ') || tag.includes('.')) {\n        return `\\`${tag}\\``;\n      } else if (tag.includes('`')) {\n        return `\"${tag}\"`;\n      } else return tag;\n    });\n\nexport const getEntitySearchOptionsFromEntityNames = (\n  entityNames: EntitySearchAutoCompleteEntityNameGroup,\n  attributeOptions: EntitySearchAutoCompleteOption[],\n): EntitySearchAutoCompleteOptionGroup[] => [\n  {\n    label: 'Metrics',\n    options: entityNames.metricNames.map((m) => ({ value: `metrics.${m}` })),\n  },\n  {\n    label: 'Parameters',\n    options: entityNames.paramNames.map((p) => ({ value: `params.${p}` })),\n  },\n  {\n    label: 'Tags',\n    options: entityNames.tagNames.map((t) => ({ value: `tags.${t}` })),\n  },\n  {\n    label: 'Attributes',\n    options: attributeOptions,\n  },\n];\n\n// Bolds a specified segment of `wholeText`.\nconst boldedText = (wholeText: string, shouldBeBold: string) => {\n  const textArray = wholeText.split(RegExp(shouldBeBold.replace('.', '\\\\.'), 'ig'));\n  const match = wholeText.match(RegExp(shouldBeBold.replace('.', '\\\\.'), 'ig'));\n\n  return (\n    // Autocomplete sets font weight to 600 on full match resulting in double bolding.\n    // Override this here\n    <span css={{ fontWeight: 'normal' }} data-test-id={wholeText}>\n      {textArray.map((item, index) => (\n        <React.Fragment key={index}>\n          {item}\n          {index !== textArray.length - 1 && match && <b>{match[index]}</b>}\n        </React.Fragment>\n      ))}\n    </span>\n  );\n};\n\n/**\n * Given an input string, returns a list of Entity objects\n * containing the search entities in the input and their\n * start and end indices in the whole string.\n */\nexport const getEntitySearchEntitiesAndIndices = (str: string) => {\n  const re = />|<|>=|<=|=|!=|like|ilike/gi;\n  const clauses = getClausesAndStartIndex(str);\n  const results: EntitySearchAutoCompleteEntity[] = [];\n  clauses.forEach((clauseObj) => {\n    const clauseText = clauseObj.clause;\n    const entity = clauseText.split(re)[0];\n    const { startIndex } = clauseObj;\n    results.push({\n      name: entity,\n      startIndex: 0 + startIndex,\n      endIndex: entity.length + startIndex,\n    });\n  });\n  return results;\n};\n\nexport const getFilteredOptionsFromEntityName = (\n  baseOptions: EntitySearchAutoCompleteOptionGroup[],\n  entityBeingEdited: EntitySearchAutoCompleteEntity,\n  suggestionLimits: Record<string, number>,\n): EntitySearchAutoCompleteOptionGroup[] => {\n  return baseOptions\n    .map((group) => {\n      const newOptions = group.options\n        .filter((option) => option.value.toLowerCase().includes(entityBeingEdited.name.toLowerCase().trim()))\n        .map((match) => ({\n          value: match.value,\n          label: boldedText(match.value, entityBeingEdited.name.trim()),\n        }));\n      const limitForGroup = suggestionLimits[group.label];\n      const ellipsized = [\n        ...newOptions.slice(0, limitForGroup),\n        ...(newOptions.length > limitForGroup ? [{ label: '...', value: `..._${group.label}` }] : []),\n      ];\n      return {\n        label: group.label,\n        options: ellipsized,\n      };\n    })\n    .filter((group) => group.options.length > 0);\n};\n"],"names":["ExperimentSourceTypeIcon","sourceType","className","SourceType","NOTEBOOK","_jsx","NotebookIcon","LOCAL","FileCodeIcon","PROJECT","FolderBranchIcon","JOB","WorkflowsIcon","fontFamily","fontSize","lineHeight","direction","textAlign","whiteSpace","wordSpacing","wordBreak","MozTabSize","OTabSize","tabSize","WebkitHyphens","MozHyphens","msHyphens","hyphens","background","color","padding","margin","overflow","textShadow","borderRadius","comment","prolog","doctype","cdata","punctuation","namespace","Opacity","tag","operator","number","property","function","selector","boolean","string","entity","cursor","url","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable","deleted","textDecoration","inserted","borderBottom","italic","fontStyle","important","fontWeight","bold","Outline","OutlineOffset","borderRightColor","TOOLTIP_COOKIE_KEY","_ref","name","styles","_ref2","EntitySearchAutoComplete","baseOptions","searchFilter","requestError","onSearchFilterChange","onClear","tooltipContent","useQuickFilter","defaultActiveFirstOption","theme","getPrefixedClassName","useDesignSystemTheme","dropdownRef","useRef","intl","useIntl","text","setText","useState","autocompleteEnabled","setAutocompleteEnabled","undefined","focused","setFocused","lastSetBySelection","setLastSetBySelection","suggestionLimits","setSuggestionLimits","Metrics","Parameters","Tags","currentEntitiesRef","entityBeingEdited","setEntityBeingEdited","useEffect","previousEntities","current","newEntities","getEntitySearchEntitiesAndIndices","currentEntitiesNames","map","e","previousEntitiesNames","isEqual","length","i","trim","filteredOptions","useMemo","getFilteredOptionsFromEntityName","onSelect","useCallback","value","option","startsWith","groupName","split","prevSuggestionLimits","prefix","substring","startIndex","suffix","endIndex","localStorageInstance","useExperimentViewLocalStore","showTooltipOnError","setShowTooltipOnError","currentTimeSecs","Math","floor","Date","now","storedItem","getItem","parseInt","tooltipIcon","React","quickRegexpFilter","detectSqlSyntaxInSearchQuery","createQuickRegexpSearchFilter","_tooltipIcon$current","setItem","click","noMatches","flatMap","o","options","open","triggerSearch","_dropdownRef$current","activeItemClass","dropdownContainsActiveItem","Boolean","querySelector","key","preventDefault","css","_css","display","gap","spacing","sm","width","responsive","mediaQueries","xs","children","AutoComplete","dropdownMatchSelectWidth","defaultOpen","dropdownRender","menu","ref","Input","componentId","SearchIcon","svg","general","iconFontSize","height","colors","textSecondary","onKeyDown","onClick","onFocus","onBlur","onChange","target","_jsxs","Button","type","CloseIcon","Tooltip","content","FormattedMessage","id","defaultMessage","values","filterSample","delayDuration","InfoFillIcon","formatMessage","actionPrimaryBackgroundDefault","LegacyTooltip","title","placement","dangerouslySetAntdProps","overlayInnerStyle","trigger","size","marginLeft","marginRight","icon","InfoIcon","SourceCellRenderer","tags","_tags$Utils$sourceTyp","_Fragment","Utils","sourceTypeTag","sourceLink","renderSource","alignItems","storeIdentifier","LocalStorageUtils","getStoreForComponent","componentName","LocalStorageStore","join","getSessionScopedStoreForComponent","version","constructor","scope","storageObj","this","window","localStorage","sessionStorage","loadComponentState","storedVal","reactComponentStateKey","JSON","parse","saveComponentState","stateRecord","targetValue","toJSON","stringify","withScopePrefix","useResizableMaxWidth","minWidth","containerWidth","setContainerWidth","updateWidth","clientWidth","useLayoutEffect","addEventListener","removeEventListener","resizableMaxWidth","node","ExperimentViewRunsTableResizer","runListHidden","onResize","onHiddenChange","maxWidth","updateUIState","useUpdateExperimentViewUIState","dragging","setDragging","ResizableBox","style","flex","axis","resizeHandles","minConstraints","maxConstraints","handle","ExperimentViewRunsTableResizerHandle","updateRunListHidden","state","event","onResizeStart","onResizeStop","Global","props","transition","position","zIndex","opacity","border","actionDefaultBorderHover","left","iconSize","top","bottom","backgroundColor","backgroundPrimary","justifyContent","ChevronRightIcon","ChevronLeftIcon","wordWrap","attribute","builtin","char","class","constant","hexcode","symbol","ExperimentLoggedModelListPageMode","VIEW_MODE_QUERY_PARAM","VALID_FILTER_ATTRIBUTES","ExperimentLoggedModelListPageAutoComplete","searchQuery","onChangeSearchQuery","loggedModelsData","entityNames","loggedModels","metricNames","Set","paramNames","tagNames","loggedModel","_loggedModel$data","_loggedModel$data$met","_loggedModel$data2","_loggedModel$data2$pa","_loggedModel$info","_loggedModel$info$tag","data","metrics","forEach","metric","add","params","param","info","Array","from","filter","isUserFacingTag","getEntityNamesFromLoggedModelsData","validAttributeOptions","getEntitySearchOptionsFromEntityNames","whereBold","getDatasetHash","dataset","dataset_name","dataset_digest","ExperimentLoggedModelListPageDatasetDropdown","selectedFilterDatasets","onToggleDataset","onClearSelectedDatasets","cachedDatasets","Map","allDatasets","model","_model$data","datasetHash","has","set","hash","serializedSelectedDatasets","DialogCombobox","label","stayOpenOnSelection","DialogComboboxCustomButtonTriggerWrapper","endIcon","ChevronDownIcon","TableIcon","DialogComboboxCountBadge","XCircleFillIcon","role","stopPropagation","textPlaceholder","typography","fontSizeSm","actionTertiaryTextHover","DialogComboboxContent","DialogComboboxOptionList","serializedDataset","DialogComboboxOptionListCheckboxItem","checked","includes","getSortableColumnLabel","colId","descriptor","ExperimentLoggedModelListPageKnownColumns","CreationTime","defineMessage","parsedColumn","parseLoggedModelMetricOrderByColumnId","metricKey","ExperimentLoggedModelListPageOrderBySelector","orderByColumn","orderByAsc","onChangeOrderBy","columnDefs","setFilter","groupedOrderByOptions","lowerCaseFilter","toLowerCase","sortableColumnGroups","groupId","headerName","col","_col$groupId","LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX","_col$children","some","group","push","DropdownMenu","Root","modal","Trigger","asChild","SortAscendingIcon","SortDescendingIcon","sortBy","Content","lg","autoFocus","allowClear","ToggleIconButton","pressed","ArrowDownIcon","ArrowUpIcon","Group","Label","columnHeaderName","CheckboxItem","ItemIndicator","GroupByLabels","LoggedModelsTableGroupByMode","RUNS","ExperimentLoggedModelListPageGroupBySelector","groupBy","onChangeGroupBy","currentSelectedLabel","ListBorderIcon","currentModeSelected","ExperimentLoggedModelListPageControls","sortingAndFilteringEnabled","onUpdateColumns","columnVisibility","viewMode","setViewMode","flexWrap","SegmentedControlGroup","coerceToEnum","TABLE","SegmentedControlButton","ListIcon","visuallyHidden","ChartLineIcon","ExperimentLoggedModelListPageColumnSelector","disabled","CHART","shouldEnableLoggedModelsGrouping","getMetricByDatasetChartDataKey","datasetName","createLocalStorageKey","chartsUIStateInitializer","compareRunCharts","compareRunSections","autoRefreshEnabled","isAccordionReordered","chartsSearchFilter","globalLineChartConfig","isDirty","chartsUIStateReducer","action","stateSetter","metricsByDatasets","dataAccessKey","RunsChartType","BAR","uuid","metricSectionId","isGenerated","displayName","uniq","isReordered","isEmpty","getExperimentLoggedModelsPageChartSetup","reconcileChartsAndSections","currentState","newCharts","_newCharts$compareRun","_newCharts$compareRun2","newChartsToAdd","newChart","_currentState$compare","find","chart","newSectionsToAdd","newSection","_currentState$compare2","section","initialConfig","useExperimentLoggedModelsChartsUIState","chartUIState","dispatchChartUIState","useReducer","loading","setLoading","async","serializedData","loadPersistedDataFromStorage","then","dataToPersist","saveDataToStorage","ExperimentLoggedModelListChartsImpl","memo","chartData","uiState","metricKeysByDataset","_uiState$chartsSearch","_uiState$chartsSearch2","availableMetricKeys","run","Object","keys","availableParamKeys","updateChartsUIState","useUpdateRunsChartsUIConfiguration","setSearch","search","configuredCardConfig","setConfiguredCardConfig","addNewChartCard","RunsChartsCardConfig","getEmptyChartCardByType","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","removeChart","useRemoveRunsChartFn","fullScreenChart","setFullScreenChart","fullscreenTooltipContextValue","runs","tooltipContextValue","getDataTraceLink","Routes","getExperimentLoggedModelDetailsPageRoute","emptyState","marginTop","Empty","description","paddingLeft","md","paddingRight","paddingBottom","borderTop","borderLeft","flexDirection","paddingTop","RunsChartsTooltipWrapper","contextData","component","RunsChartsTooltipBody","RunsChartsDraggableCardsGridContextProvider","visibleChartCards","RunsChartsSectionAccordion","reorderCharts","noop","insertCharts","startEditChart","hideEmptyCharts","supportedChartTypes","SCATTER","noRunsSelectedEmptyState","RunsChartsFullScreenModal","onCancel","tooltipComponent","RunsChartsConfigureModal","chartRunData","metricKeyList","paramKeyList","config","onSubmit","ExperimentLoggedModelListCharts","experimentId","cachedLoggedModels","useMemoDeep","factory","deps","metricsByDataset","_model$data$metrics","orderBy","useExperimentLoggedModelAllMetricsByDataset","loadingState","isRowHidden","useExperimentLoggedModelListPageRowVisibilityContext","compact","index","_model$info","_model$info$name","_model$info2","_model$info3","_model$data$params$ma","_model$data2","_model$data2$params","model_id","images","keyBy","timestamp","step","dataKey","hidden","getStableColorForRun","useExperimentLoggedModelsChartsData","Spinner","RunsChartsUIConfigurationContextProvider","ExperimentLoggedModelListPageImpl","useParams","isLoggedModelsFilteringAndSortingEnabled","rowVisibilityMap","rowVisibilityMode","isFilteringActive","setOrderBy","setColumnVisibility","setRowVisibilityMode","toggleRowVisibility","updateSearchQuery","toggleDataset","clearSelectedDatasets","setGroupBy","useLoggedModelsListPageState","invariant","useExperimentLoggedModelListPageMode","setParams","useSearchParams","get","mode","isFetching","isFetchingLoggedModels","isLoading","isLoadingLoggedModels","error","loggedModelsError","nextPageToken","loadMoreResults","useSearchLoggedModelsQuery","experimentIds","getOrderByRequestData","orderByField","parsedMetricOrderByColumn","datasetDigest","orderByDatasetName","orderByDatasetDigest","badRequestError","BadRequestError","relatedRunsData","useRelatedRunsDataForLoggedModels","compactColumnDefs","useExperimentLoggedModelListPageTableColumns","enableSortingByMetrics","tableAreaWidth","setTableAreaWidth","tableHidden","setTableHidden","isCompactTableMode","tableElement","ExperimentLoggedModelListPageTable","isLoadingMore","moreResultsAvailable","onLoadMore","onOrderByChange","groupModelsBy","ExperimentLoggedModelOpenDatasetDetailsContextProvider","ExperimentLoggedModelListPageRowVisibilityContextProvider","visibilityMap","visibilityMode","Spacer","shrinks","message","Alert","closable","RunsChartsSetHighlightContextProvider","ExperimentLoggedModelListPage","ExperimentLoggedModelPageWrapper","GET_EXPERIMENT_QUERY","gql","useGetExperimentQuery","_data$mlflowGetExperi","apolloError","refetch","useQuery","variables","input","skip","mlflowGetExperiment","experiment","apiError","getApiError","_data$mlflowGetExperi2","getQueryKey","runUuid","queryFn","queryKey","MlflowService","getRun","run_id","_queryResults$find","runUuids","allMetricRunUuids","allSourceRunUuids","source_run_id","queryResults","useQueries","queries","cacheTime","Infinity","staleTime","refetchOnWindowFocus","retry","memoizedQueryResults","array","areArraysConsideredTheSame","every","element","_ref$current","useArrayMemo","PageFallback","_error$message","PageWrapper","image","DangerIcon","resetKey","ErrorBoundary","FallbackComponent","resetKeys","UserActionErrorHandler","useMediaQuery","query","queryList","useSyncExternalStore","callback","matches","useMatchesMediaQuery","matchMedia","useResizeObserver","rootRef","debounceTimeMs","prevSize","debounceRef","setSize","entries","rect","contentRect","clearTimeout","setTimeout","observerRef","ResizeObserver","rootElement","observer","observe","unobserve","cleanEntitySearchTagNames","MLFLOW_INTERNAL_PREFIX","attributeOptions","m","p","t","boldedText","wholeText","shouldBeBold","textArray","RegExp","replace","match","item","str","re","clauses","results","lastIndex","exec","clause","getClausesAndStartIndex","clauseObj","newOptions","limitForGroup","ellipsized","slice"],"sourceRoot":""}