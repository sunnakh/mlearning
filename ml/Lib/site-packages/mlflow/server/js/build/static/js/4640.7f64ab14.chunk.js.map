{"version":3,"file":"static/js/4640.7f64ab14.chunk.js","mappings":"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","sources":["shared/web-shared/snippet/actions/SnippetActionButton.tsx","shared/web-shared/snippet/actions/SnippetCopyAction.tsx","shared/web-shared/snippet/hooks/useCopyController.tsx","shared/web-shared/snippet/index.tsx","common/components/error-boundaries/SectionErrorBoundary.tsx","shared/building_blocks/Image.tsx","experiment-tracking/components/runs-charts/components/charts/ImageGridPlot.common.tsx","shared/building_blocks/CopyButton.tsx","common/components/RequestStateWrapper.tsx","common/components/Spinner.tsx"],"sourcesContent":["import { css } from '@emotion/react';\nimport type { ReactNode } from 'react';\nimport React from 'react';\n\nimport type { ButtonProps } from '@databricks/design-system';\nimport { Button, LegacyTooltip } from '@databricks/design-system';\n\ntype SnippetActionButtonProps = Pick<ButtonProps, 'icon' | 'onClick' | 'href' | 'rel' | 'target'> & {\n  tooltipMessage: NonNullable<ReactNode>;\n};\n\nexport default function SnippetActionButton({ tooltipMessage, ...buttonProps }: SnippetActionButtonProps) {\n  const style = css({\n    zIndex: 1, // required for action buttons to be visible and float\n  });\n  return (\n    <LegacyTooltip title={tooltipMessage}>\n      <Button\n        componentId=\"codegen_web-shared_src_snippet_actions_snippetactionbutton.tsx_33\"\n        {...buttonProps}\n        css={style}\n      />\n    </LegacyTooltip>\n  );\n}\n","import React from 'react';\n\nimport type { ButtonProps } from '@databricks/design-system';\n\nimport SnippetActionButton from './SnippetActionButton';\nimport { useCopyController } from '../hooks/useCopyController';\n\nexport interface SnippetCopyActionProps extends ButtonProps {\n  /**\n   * The text to be copied into clipboard when action button is clicked.\n   */\n  copyText: string;\n  onClick?: (e: React.MouseEvent) => void;\n}\n\nexport function SnippetCopyAction({ copyText, onClick, ...props }: SnippetCopyActionProps) {\n  const { actionIcon, tooltipMessage, copy } = useCopyController(copyText);\n\n  return (\n    <SnippetActionButton\n      tooltipMessage={tooltipMessage}\n      icon={actionIcon}\n      onClick={(e) => {\n        copy();\n        onClick?.(e);\n      }}\n      {...props}\n    />\n  );\n}\n","import type { ReactElement } from 'react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useClipboard } from 'use-clipboard-copy';\n\nimport { CheckIcon, CopyIcon } from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nexport interface CopyController {\n  actionIcon: ReactElement;\n  tooltipMessage: string;\n  copy: () => void;\n  copied: boolean;\n  ariaLabel: string;\n  tooltipOpen: boolean;\n  handleTooltipOpenChange: (open: boolean) => void;\n}\n\n/**\n * Utility hook that is internal to web-shared, use: `Copyable` or `CopyActionButton`\n *  or if it's a `CodeSnippet`, `SnippetCopyAction`\n */\nexport function useCopyController(text: string, copyTooltip?: string, onCopy?: () => void): CopyController {\n  const intl = useIntl();\n\n  const copyMessage = copyTooltip\n    ? copyTooltip\n    : intl.formatMessage({\n        defaultMessage: 'Copy',\n        description: 'Tooltip message displayed on copy action',\n      });\n\n  const copiedMessage = intl.formatMessage({\n    defaultMessage: 'Copied',\n    description: 'Tooltip message displayed on copy action after it has been clicked',\n  });\n\n  const clipboard = useClipboard();\n  const copiedTimerIdRef = useRef<number>();\n  const [copied, setCopied] = useState(false);\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(copiedTimerIdRef.current);\n    };\n  }, []);\n\n  const copy = () => {\n    clipboard.copy(text);\n    window.clearTimeout(copiedTimerIdRef.current);\n    setCopied(true);\n    onCopy?.();\n    copiedTimerIdRef.current = window.setTimeout(() => {\n      setCopied(false);\n    }, 3000);\n  };\n\n  return {\n    actionIcon: copied ? <CheckIcon /> : <CopyIcon />,\n    tooltipMessage: copied ? copiedMessage : copyMessage,\n    copy,\n    copied,\n    ariaLabel: copyMessage,\n    tooltipOpen: open || copied,\n    handleTooltipOpenChange: setOpen,\n  };\n}\n","import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport go from 'react-syntax-highlighter/dist/cjs/languages/prism/go';\nimport java from 'react-syntax-highlighter/dist/cjs/languages/prism/java';\nimport javascript from 'react-syntax-highlighter/dist/cjs/languages/prism/javascript';\nimport json from 'react-syntax-highlighter/dist/cjs/languages/prism/json';\nimport python from 'react-syntax-highlighter/dist/cjs/languages/prism/python';\nimport yaml from 'react-syntax-highlighter/dist/cjs/languages/prism/yaml';\nimport sql from 'react-syntax-highlighter/dist/cjs/languages/prism/sql';\n\nSyntaxHighlighter.registerLanguage('sql', sql);\nSyntaxHighlighter.registerLanguage('java', java);\nSyntaxHighlighter.registerLanguage('python', python);\nSyntaxHighlighter.registerLanguage('go', go);\nSyntaxHighlighter.registerLanguage('javascript', javascript);\nSyntaxHighlighter.registerLanguage('yaml', yaml);\nSyntaxHighlighter.registerLanguage('json', json);\n\nimport duotoneDarkStyle from './theme/databricks-duotone-dark';\nimport lightStyle from './theme/databricks-light';\nimport { CSSProperties, ReactNode } from 'react';\nimport { pick } from 'lodash';\nexport type CodeSnippetTheme = 'duotoneDark' | 'light';\nexport const buttonBackgroundColorDark = 'rgba(140, 203, 255, 0)';\nexport const buttonColorDark = 'rgba(255, 255, 255, 0.84)';\nexport const buttonHoverColorDark = '#8ccbffcc';\nexport const buttonHoverBackgroundColorDark = 'rgba(140, 203, 255, 0.08)';\nexport const duboisAlertBackgroundColor = '#fff0f0';\nexport const snippetPadding = '24px';\nconst themesStyles: Record<CodeSnippetTheme, any> = {\n  light: lightStyle,\n  duotoneDark: duotoneDarkStyle,\n};\n\nexport type CodeSnippetLanguage = 'sql' | 'java' | 'python' | 'javascript' | 'go' | 'yaml' | 'text' | 'json';\n\nexport interface CodeSnippetProps {\n  /**\n   * The code string\n   */\n  children: string;\n  /**\n   * The actions that are displayed on the right top corner of the component\n   *  see `./actions` for built-in actions\n   */\n  actions?: NonNullable<ReactNode> | NonNullable<ReactNode>[];\n  /**\n   * The theme, default theme is `light`\n   */\n  theme?: CodeSnippetTheme;\n  /**\n   * Language of the code (`children`)\n   */\n  language: CodeSnippetLanguage;\n  /**\n   * Custom styles (passed to the internal `<pre>`)\n   */\n  style?: CSSProperties;\n  /**\n   * Whether to show line numbers on the left or not\n   */\n  showLineNumbers?: boolean;\n  /**\n   * Custom styles for line numbers\n   */\n  lineNumberStyle?: CSSProperties;\n  /**\n   * Boolean to specify whether to style the <code> block with white-space: pre-wrap or white-space: pre\n   */\n  wrapLongLines?: boolean;\n  /**\n   * Boolean that determines whether or not each line of code should be wrapped in a parent element\n   */\n  wrapLines?: boolean;\n  /**\n   * Props to pass to the line elements\n   */\n  lineProps?: React.HTMLProps<HTMLElement> | undefined;\n  /**\n   * Custom tag to use for the `<pre>` element\n   */\n  PreTag?: keyof JSX.IntrinsicElements | React.ComponentType<any> | undefined;\n}\n\n/**\n * `CodeSnippet` is used for highlighting code, use this instead of\n */\nexport function CodeSnippet({\n  theme = 'light',\n  language,\n  actions,\n  style,\n  children,\n  showLineNumbers,\n  lineNumberStyle,\n  wrapLongLines,\n  wrapLines,\n  PreTag,\n}: CodeSnippetProps) {\n  const customStyle = {\n    border: 'none',\n    borderRadius: 0,\n    margin: 0,\n    padding: snippetPadding,\n    ...style,\n  };\n  return (\n    <SyntaxHighlighter\n      showLineNumbers={showLineNumbers}\n      lineNumberStyle={lineNumberStyle}\n      language={language}\n      style={themesStyles[theme]}\n      customStyle={customStyle}\n      codeTagProps={{\n        style: pick(style, 'backgroundColor'),\n      }}\n      wrapLongLines={wrapLongLines}\n      wrapLines={wrapLines}\n      PreTag={PreTag}\n    >\n      {children}\n    </SyntaxHighlighter>\n  );\n}\n\nexport * from './actions/SnippetCopyAction';\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport Utils from '../../utils/Utils';\n\ntype Props = {\n  showServerError?: boolean;\n};\n\ntype State = any;\n\nexport class SectionErrorBoundary extends React.Component<Props, State> {\n  state = { error: null };\n\n  componentDidCatch(error: any, errorInfo: any) {\n    this.setState({ error });\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    console.error(error, errorInfo);\n  }\n\n  renderErrorMessage(error: any) {\n    return this.props.showServerError ? <div>Error message: {error.message}</div> : '';\n  }\n\n  render() {\n    const { children } = this.props;\n    const { error } = this.state;\n    if (error) {\n      return (\n        <div>\n          <p>\n            <i\n              data-testid=\"icon-fail\"\n              className=\"fa fa-exclamation-triangle mlflow-icon-fail\"\n              css={classNames.wrapper}\n            />\n            <span> Something went wrong with this section. </span>\n            <span>If this error persists, please report an issue </span>\n            {/* Reported during ESLint upgrade */}\n            {/* eslint-disable-next-line react/jsx-no-target-blank */}\n            <a href={Utils.getSupportPageUrl()} target=\"_blank\">\n              here\n            </a>\n            .{this.renderErrorMessage(error)}\n          </p>\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n\nconst classNames = {\n  wrapper: {\n    marginLeft: -2, // to align the failure icon with the collapsable section caret toggle\n  },\n};\n","import {\n  ArrowLeftIcon,\n  ArrowRightIcon,\n  CloseIcon,\n  DesignSystemContext,\n  RedoIcon,\n  UndoIcon,\n  ZoomInIcon,\n  ZoomOutIcon,\n} from '@databricks/design-system';\nimport { useContext } from 'react';\nimport RcImage from 'rc-image';\nimport './Image.css';\n\nconst icons = {\n  rotateLeft: <UndoIcon />,\n  rotateRight: <RedoIcon />,\n  zoomIn: <ZoomInIcon />,\n  zoomOut: <ZoomOutIcon />,\n  close: <CloseIcon />,\n  left: <ArrowLeftIcon />,\n  right: <ArrowRightIcon />,\n};\n\nexport const ImagePreviewGroup = ({\n  children,\n  visible,\n  onVisibleChange,\n}: {\n  children: React.ReactNode;\n  visible: boolean;\n  onVisibleChange: (v: boolean) => void;\n}) => {\n  const { getPopupContainer } = useContext(DesignSystemContext);\n\n  return (\n    <RcImage.PreviewGroup\n      icons={icons}\n      preview={{\n        visible: visible,\n        getContainer: getPopupContainer,\n        onVisibleChange: (v) => onVisibleChange(v),\n      }}\n    >\n      {children}\n    </RcImage.PreviewGroup>\n  );\n};\n\nexport { RcImage as Image };\n","import { ImageIcon, Spinner } from '@databricks/design-system';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { getArtifactLocationUrl } from '@mlflow/mlflow/src/common/utils/ArtifactUtils';\nimport { ImageEntity } from '@mlflow/mlflow/src/experiment-tracking/types';\nimport { useState, useEffect } from 'react';\nimport { Typography } from '@databricks/design-system';\nimport { ImagePreviewGroup, Image } from '../../../../../shared/building_blocks/Image';\n\n/**\n * Despite image size being dynamic, we want to set a minimum size for the grid images.\n */\nexport const MIN_GRID_IMAGE_SIZE = 200;\n\ntype ImagePlotProps = {\n  imageUrl: string;\n  compressedImageUrl: string;\n  imageSize?: number;\n  maxImageSize?: number;\n};\n\nexport const ImagePlot = ({ imageUrl, compressedImageUrl, imageSize, maxImageSize }: ImagePlotProps) => {\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  const [imageLoading, setImageLoading] = useState(true);\n\n  useEffect(() => {\n    // Load the image in the memory (should reuse the same request) in order to get the loading state\n    setImageLoading(true);\n    const img = new window.Image();\n    img.onload = () => setImageLoading(false);\n    img.onerror = () => setImageLoading(false);\n    img.src = compressedImageUrl;\n    return () => {\n      img.src = '';\n    };\n  }, [compressedImageUrl]);\n\n  return (\n    <div css={{ width: imageSize || '100%', height: imageSize || '100%' }}>\n      <div css={{ display: 'contents' }}>\n        {compressedImageUrl === undefined || imageLoading ? (\n          <div\n            css={{\n              width: '100%',\n              backgroundColor: theme.colors.backgroundSecondary,\n              display: 'flex',\n              aspectRatio: '1',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <Spinner />\n          </div>\n        ) : (\n          <div\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              width: imageSize || '100%',\n              aspectRatio: '1',\n              maxWidth: maxImageSize,\n              maxHeight: maxImageSize,\n              backgroundColor: theme.colors.backgroundSecondary,\n              '.rc-image': {\n                cursor: 'pointer',\n              },\n            }}\n          >\n            <ImagePreviewGroup visible={previewVisible} onVisibleChange={setPreviewVisible}>\n              <Image\n                src={compressedImageUrl}\n                preview={{ src: imageUrl }}\n                style={{ maxWidth: maxImageSize || '100%', maxHeight: maxImageSize || '100%' }}\n              />\n            </ImagePreviewGroup>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const ImagePlotWithHistory = ({\n  metadataByStep,\n  imageSize,\n  step,\n  runUuid,\n}: {\n  metadataByStep: Record<number, ImageEntity>;\n  imageSize?: number;\n  step: number;\n  runUuid: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  if (metadataByStep[step] === undefined) {\n    return (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          textAlign: 'center',\n          width: imageSize,\n          backgroundColor: theme.colors.backgroundSecondary,\n          padding: theme.spacing.md,\n          aspectRatio: '1',\n        }}\n      >\n        <ImageIcon />\n        <FormattedMessage\n          defaultMessage=\"No image logged at this step\"\n          description=\"Experiment tracking > runs charts > charts > image plot with history > no image text\"\n        />\n      </div>\n    );\n  }\n  return (\n    <ImagePlot\n      imageUrl={getArtifactLocationUrl(metadataByStep[step].filepath, runUuid)}\n      compressedImageUrl={getArtifactLocationUrl(metadataByStep[step].compressed_filepath, runUuid)}\n      imageSize={imageSize}\n    />\n  );\n};\n\nexport const EmptyImageGridPlot = () => {\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n        width: '100%',\n        fontSize: 16,\n      }}\n    >\n      <Typography.Title css={{ marginTop: 16 }} color=\"secondary\" level={3}>\n        Compare logged images\n      </Typography.Title>\n      <Typography.Text css={{ marginBottom: 16 }} color=\"secondary\">\n        Use the image grid chart to compare logged images across runs.\n      </Typography.Text>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, type ButtonProps, LegacyTooltip } from '@databricks/design-system';\n\ninterface CopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n  componentId?: string;\n}\n\nexport const CopyButton = ({ copyText, showLabel = true, componentId, ...buttonProps }: CopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <LegacyTooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId={componentId ?? 'mlflow.shared.copy_button'}\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </LegacyTooltip>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getApis } from '../../experiment-tracking/reducers/Reducers';\nimport { Spinner } from './Spinner';\nimport { ErrorCodes } from '../constants';\nimport { ErrorWrapper } from '../utils/ErrorWrapper';\nimport { ReduxState } from '../../redux-types';\n\nexport const DEFAULT_ERROR_MESSAGE = 'A request error occurred.';\n\ntype RequestStateWrapperProps = {\n  children?: React.ReactNode;\n  customSpinner?: React.ReactNode;\n  shouldOptimisticallyRender?: boolean;\n  requests: any[];\n  requestIds?: string[];\n  requestIdsWith404sToIgnore?: string[];\n  description?: any; // TODO: PropTypes.oneOf(Object.values(LoadingDescription))\n  permissionDeniedView?: React.ReactNode;\n  suppressErrorThrow?: boolean;\n  customRequestErrorHandlerFn?: (\n    failedRequests: {\n      id: string;\n      active?: boolean;\n      error: Error | ErrorWrapper;\n    }[],\n  ) => void;\n};\n\ntype RequestStateWrapperState = any;\n\nexport class RequestStateWrapper extends Component<RequestStateWrapperProps, RequestStateWrapperState> {\n  static defaultProps = {\n    requests: [],\n    requestIdsWith404sToIgnore: [],\n    shouldOptimisticallyRender: false,\n  };\n\n  state = {\n    shouldRender: false,\n    shouldRenderError: false,\n  };\n\n  static getErrorRequests(requests: any, requestIdsWith404sToIgnore: any) {\n    return requests.filter((r: any) => {\n      if (r.error !== undefined) {\n        return !(\n          requestIdsWith404sToIgnore &&\n          requestIdsWith404sToIgnore.includes(r.id) &&\n          r.error.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n        );\n      }\n      return false;\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps: any) {\n    const shouldRender = nextProps.requests.length\n      ? nextProps.requests.every((r: any) => r && r.active === false)\n      : false;\n\n    const requestErrors = RequestStateWrapper.getErrorRequests(\n      nextProps.requests,\n      nextProps.requestIdsWith404sToIgnore,\n    );\n\n    return {\n      shouldRender,\n      shouldRenderError: requestErrors.length > 0,\n      requestErrors,\n    };\n  }\n\n  getRenderedContent() {\n    const { children, requests, customSpinner, permissionDeniedView, suppressErrorThrow, customRequestErrorHandlerFn } =\n      this.props;\n    // @ts-expect-error TS(2339): Property 'requestErrors' does not exist on type '{... Remove this comment to see the full error message\n    const { shouldRender, shouldRenderError, requestErrors } = this.state;\n    const permissionDeniedErrors = requestErrors.filter((failedRequest: any) => {\n      return failedRequest.error.getErrorCode() === ErrorCodes.PERMISSION_DENIED;\n    });\n\n    if (typeof children === 'function') {\n      return children(!shouldRender, shouldRenderError, requests, requestErrors);\n    } else if (shouldRender || shouldRenderError || this.props.shouldOptimisticallyRender) {\n      if (permissionDeniedErrors.length > 0 && permissionDeniedView) {\n        return permissionDeniedView;\n      }\n      if (shouldRenderError && !suppressErrorThrow) {\n        customRequestErrorHandlerFn ? customRequestErrorHandlerFn(requestErrors) : triggerError(requestErrors);\n      }\n\n      return children;\n    }\n\n    return customSpinner || <Spinner />;\n  }\n\n  render() {\n    return this.getRenderedContent();\n  }\n}\n\nexport const triggerError = (requests: any) => {\n  // This triggers the OOPS error boundary.\n  // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n  console.error('ERROR', requests);\n  throw Error(`${DEFAULT_ERROR_MESSAGE}: ${requests.error}`);\n};\n\nconst mapStateToProps = (state: ReduxState, ownProps: Omit<RequestStateWrapperProps, 'requests'>) => ({\n  requests: getApis(ownProps.requestIds, state),\n});\n\nexport default connect(mapStateToProps)(RequestStateWrapper);\n","import spinner from '../static/mlflow-spinner.png';\nimport { Interpolation, keyframes, Theme } from '@emotion/react';\n\ntype Props = {\n  showImmediately?: boolean;\n};\n\nexport function Spinner({ showImmediately }: Props) {\n  return (\n    <div css={(theme) => styles.spinner(theme, showImmediately)}>\n      <img alt=\"Page loading...\" src={spinner} />\n    </div>\n  );\n}\n\nconst styles = {\n  spinner: (theme: Theme, immediate?: boolean): Interpolation<Theme> => ({\n    width: 100,\n    marginTop: 100,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n\n    img: {\n      position: 'absolute',\n      opacity: 0,\n      top: '50%',\n      left: '50%',\n      width: theme.general.heightBase * 2,\n      height: theme.general.heightBase * 2,\n      marginTop: -theme.general.heightBase,\n      marginLeft: -theme.general.heightBase,\n      animation: `${keyframes`\n          0% {\n            opacity: 1;\n          }\n          100% {\n            opacity: 1;\n            -webkit-transform: rotate(360deg);\n                transform: rotate(360deg);\n            }\n          `} 3s linear infinite`,\n      animationDelay: immediate ? '0s' : '0.5s',\n    },\n  }),\n};\n"],"names":["_ref","name","styles","SnippetActionButton","tooltipMessage","buttonProps","style","_jsx","LegacyTooltip","title","children","Button","componentId","css","SnippetCopyAction","copyText","onClick","props","actionIcon","copy","text","copyTooltip","onCopy","intl","useIntl","copyMessage","formatMessage","id","defaultMessage","copiedMessage","clipboard","useClipboard","copiedTimerIdRef","useRef","copied","setCopied","useState","open","setOpen","useEffect","window","clearTimeout","current","CheckIcon","CopyIcon","setTimeout","ariaLabel","tooltipOpen","handleTooltipOpenChange","useCopyController","icon","e","SyntaxHighlighter","registerLanguage","sql","java","python","go","javascript","yaml","json","snippetPadding","themesStyles","light","lightStyle","duotoneDark","duotoneDarkStyle","CodeSnippet","theme","language","actions","showLineNumbers","lineNumberStyle","wrapLongLines","wrapLines","PreTag","customStyle","border","borderRadius","margin","padding","codeTagProps","pick","SectionErrorBoundary","React","constructor","args","state","error","componentDidCatch","errorInfo","this","setState","console","renderErrorMessage","showServerError","_jsxs","message","render","className","classNames","wrapper","href","Utils","getSupportPageUrl","target","marginLeft","icons","rotateLeft","UndoIcon","rotateRight","RedoIcon","zoomIn","ZoomInIcon","zoomOut","ZoomOutIcon","close","CloseIcon","left","ArrowLeftIcon","right","ArrowRightIcon","ImagePreviewGroup","visible","onVisibleChange","getPopupContainer","useContext","DesignSystemContext","RcImage","PreviewGroup","preview","getContainer","v","MIN_GRID_IMAGE_SIZE","ImagePlot","imageUrl","compressedImageUrl","imageSize","maxImageSize","previewVisible","setPreviewVisible","useDesignSystemTheme","imageLoading","setImageLoading","img","Image","onload","onerror","src","_css","width","height","undefined","backgroundColor","colors","backgroundSecondary","display","aspectRatio","justifyContent","alignItems","Spinner","maxWidth","maxHeight","cursor","ImagePlotWithHistory","metadataByStep","step","runUuid","flexDirection","textAlign","spacing","md","ImageIcon","FormattedMessage","getArtifactLocationUrl","filepath","compressed_filepath","_ref2","_ref3","_ref4","EmptyImageGridPlot","Typography","Title","color","level","Text","CopyButton","showLabel","showTooltip","setShowTooltip","dangerouslySetAntdProps","type","handleClick","navigator","writeText","onMouseLeave","handleMouseLeave","RequestStateWrapper","Component","shouldRender","shouldRenderError","getErrorRequests","requests","requestIdsWith404sToIgnore","filter","r","includes","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","getDerivedStateFromProps","nextProps","length","every","active","requestErrors","getRenderedContent","customSpinner","permissionDeniedView","suppressErrorThrow","customRequestErrorHandlerFn","permissionDeniedErrors","failedRequest","PERMISSION_DENIED","shouldOptimisticallyRender","triggerError","defaultProps","Error","connect","mapStateToProps","ownProps","getApis","requestIds","showImmediately","spinner","alt","immediate","marginTop","marginRight","position","opacity","top","general","heightBase","animation","keyframes","animationDelay"],"sourceRoot":""}