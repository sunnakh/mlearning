{"version":3,"file":"static/js/4588.76b8c6aa.chunk.js","mappings":"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","sources":["experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelListPageMode.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageAutoComplete.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageDatasetDropdown.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageOrderBySelector.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageGroupBySelector.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageControls.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelsChartsData.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelsChartsUIState.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListCharts.tsx","common/hooks/useMemoDeep.ts","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelAllMetricsByDataset.tsx","experiment-tracking/pages/experiment-logged-models/ExperimentLoggedModelListPage.tsx","experiment-tracking/hooks/logged-models/useRelatedRunsDataForLoggedModels.tsx","common/hooks/useArrayMemo.ts","experiment-tracking/pages/experiment-logged-models/ExperimentLoggedModelPageWrapper.tsx"],"sourcesContent":["import { coerceToEnum } from '@databricks/web-shared/utils';\nimport { useSearchParams } from '../../../../common/utils/RoutingUtils';\n\nexport enum ExperimentLoggedModelListPageMode {\n  TABLE = 'TABLE',\n  CHART = 'CHART',\n}\n\nconst VIEW_MODE_QUERY_PARAM = 'viewMode';\n\nexport const useExperimentLoggedModelListPageMode = () => {\n  const [params, setParams] = useSearchParams();\n  const viewMode = coerceToEnum(\n    ExperimentLoggedModelListPageMode,\n    params.get(VIEW_MODE_QUERY_PARAM),\n    ExperimentLoggedModelListPageMode.TABLE,\n  );\n  const setViewMode = (mode: ExperimentLoggedModelListPageMode) => {\n    setParams({ [VIEW_MODE_QUERY_PARAM]: mode });\n  };\n  return { viewMode, setViewMode } as const;\n};\n","import { FormattedMessage } from 'react-intl';\nimport { EntitySearchAutoComplete } from '../EntitySearchAutoComplete';\nimport { LoggedModelProto } from '../../types';\nimport { useMemo } from 'react';\nimport {\n  EntitySearchAutoCompleteEntityNameGroup,\n  getEntitySearchOptionsFromEntityNames,\n} from '../EntitySearchAutoComplete.utils';\nimport { isUserFacingTag } from '../../../common/utils/TagUtils';\n\nconst getEntityNamesFromLoggedModelsData = (\n  loggedModels: LoggedModelProto[],\n): EntitySearchAutoCompleteEntityNameGroup => {\n  const metricNames = new Set<string>();\n  const paramNames = new Set<string>();\n  const tagNames = new Set<string>();\n\n  for (const loggedModel of loggedModels) {\n    loggedModel.data?.metrics?.forEach((metric) => metric.key && metricNames.add(metric.key));\n    loggedModel.data?.params?.forEach((param) => param.key && paramNames.add(param.key));\n    loggedModel.info?.tags?.forEach((tag) => tag.key && tagNames.add(tag.key));\n  }\n\n  return {\n    metricNames: Array.from(metricNames),\n    paramNames: Array.from(paramNames),\n    tagNames: Array.from(tagNames).filter(isUserFacingTag),\n  };\n};\n\nconst VALID_FILTER_ATTRIBUTES = [\n  'model_id',\n  'model_name',\n  'status',\n  'artifact_uri',\n  'creation_time',\n  'last_updated_time',\n];\n\nexport const ExperimentLoggedModelListPageAutoComplete = ({\n  searchQuery,\n  onChangeSearchQuery,\n  loggedModelsData,\n}: {\n  searchQuery?: string;\n  onChangeSearchQuery: (searchFilter: string) => void;\n  loggedModelsData: LoggedModelProto[];\n}) => {\n  const options = useMemo(() => {\n    const entityNames = getEntityNamesFromLoggedModelsData(loggedModelsData);\n    const validAttributeOptions = VALID_FILTER_ATTRIBUTES.map((attribute) => ({\n      value: `attributes.${attribute}`,\n    }));\n    return getEntitySearchOptionsFromEntityNames(entityNames, validAttributeOptions);\n  }, [loggedModelsData]);\n\n  return (\n    <EntitySearchAutoComplete\n      searchFilter={searchQuery ?? ''}\n      onSearchFilterChange={onChangeSearchQuery}\n      defaultActiveFirstOption={false}\n      baseOptions={options}\n      onClear={() => onChangeSearchQuery('')}\n      placeholder=\"metrics.rmse >= 0.8\"\n      tooltipContent={\n        <div>\n          <FormattedMessage\n            defaultMessage=\"Search logged models using a simplified version of the SQL {whereBold} clause.\"\n            description=\"Tooltip string to explain how to search logged models from the listing page\"\n            values={{ whereBold: <b>WHERE</b> }}\n          />{' '}\n          <br />\n          <FormattedMessage\n            defaultMessage=\"Examples:\"\n            description=\"Text header for examples of logged models search syntax\"\n          />\n          <br />\n          {'• metrics.rmse >= 0.8'}\n          <br />\n          {'• metrics.`f1 score` < 1'}\n          <br />\n          • params.type = 'tree'\n          <br />\n          • tags.my_tag = 'foobar'\n          <br />\n          • attributes.name = 'elasticnet'\n          <br />\n        </div>\n      }\n    />\n  );\n};\n","import {\n  Button,\n  ChevronDownIcon,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxCountBadge,\n  DialogComboboxCustomButtonTriggerWrapper,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListCheckboxItem,\n  TableIcon,\n  useDesignSystemTheme,\n  XCircleFillIcon,\n} from '@databricks/design-system';\nimport { useMemo, useRef } from 'react';\nimport type { LoggedModelMetricDataset, LoggedModelProto } from '../../types';\nimport { useIntl } from 'react-intl';\n\nconst getDatasetHash = (dataset: LoggedModelMetricDataset) =>\n  JSON.stringify([dataset.dataset_name, dataset.dataset_digest]);\n\nexport const ExperimentLoggedModelListPageDatasetDropdown = ({\n  loggedModelsData,\n  selectedFilterDatasets,\n  onToggleDataset,\n  onClearSelectedDatasets,\n}: {\n  loggedModelsData: LoggedModelProto[];\n  selectedFilterDatasets?: LoggedModelMetricDataset[];\n  onToggleDataset?: (dataset: LoggedModelMetricDataset) => void;\n  onClearSelectedDatasets?: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const cachedDatasets = useRef<Map<string, { hash: string } & LoggedModelMetricDataset>>(new Map());\n\n  // Get all datasets with their hashes, also store them in an aggregated map.\n  // The hash is used as a unique key and also being fed to DialogCombobox since it exclusively uses string values.\n  // The map is used to aggregate all datasets encountered in the logged models data during the session.\n  const allDatasets = useMemo(() => {\n    for (const model of loggedModelsData) {\n      for (const metric of model.data?.metrics || []) {\n        if (!metric.dataset_name || !metric.dataset_digest) {\n          continue;\n        }\n        const datasetHash = getDatasetHash(metric);\n        if (!cachedDatasets.current.has(datasetHash)) {\n          // We're purposely using mutable hashmap in the memo hook\n          cachedDatasets.current.set(datasetHash, {\n            hash: datasetHash,\n            dataset_name: metric.dataset_name,\n            dataset_digest: metric.dataset_digest,\n          });\n        }\n      }\n    }\n    return Array.from(cachedDatasets.current.values());\n  }, [loggedModelsData]);\n\n  // Serialize the selected datasets to a string format for the DialogCombobox.\n  const serializedSelectedDatasets = useMemo(\n    () => selectedFilterDatasets?.map(getDatasetHash) || [],\n    [selectedFilterDatasets],\n  );\n\n  return (\n    <DialogCombobox\n      componentId=\"mlflow.logged_model.list_page.datasets_filter\"\n      id=\"mlflow.logged_model.list_page.datasets_filter\"\n      value={serializedSelectedDatasets}\n      label={intl.formatMessage({\n        defaultMessage: 'Datasets',\n        description: 'Label for the datasets filter dropdown in the logged model list page',\n      })}\n      stayOpenOnSelection\n    >\n      <DialogComboboxCustomButtonTriggerWrapper>\n        <Button\n          endIcon={<ChevronDownIcon />}\n          componentId=\"mlflow.logged_model.list_page.datasets_filter.toggle\"\n          icon={<TableIcon />}\n        >\n          Datasets\n          {serializedSelectedDatasets.length > 0 ? (\n            <>\n              <DialogComboboxCountBadge css={{ marginLeft: 4 }}>\n                {serializedSelectedDatasets.length}\n              </DialogComboboxCountBadge>\n              <XCircleFillIcon\n                aria-hidden=\"false\"\n                role=\"button\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  e.preventDefault();\n                  onClearSelectedDatasets?.();\n                }}\n                css={{\n                  color: theme.colors.textPlaceholder,\n                  fontSize: theme.typography.fontSizeSm,\n                  marginLeft: theme.spacing.xs,\n\n                  ':hover': {\n                    color: theme.colors.actionTertiaryTextHover,\n                  },\n                }}\n              />\n            </>\n          ) : null}\n        </Button>\n      </DialogComboboxCustomButtonTriggerWrapper>\n      <DialogComboboxContent>\n        <DialogComboboxOptionList>\n          {allDatasets.map(({ hash: serializedDataset, dataset_digest, dataset_name }) => (\n            <DialogComboboxOptionListCheckboxItem\n              value={serializedDataset}\n              checked={serializedSelectedDatasets.includes(serializedDataset)}\n              key={serializedDataset}\n              onChange={() => onToggleDataset?.({ dataset_digest, dataset_name })}\n            >\n              {dataset_name} (#{dataset_digest})\n            </DialogComboboxOptionListCheckboxItem>\n          ))}\n        </DialogComboboxOptionList>\n      </DialogComboboxContent>\n    </DialogCombobox>\n  );\n};\n","import {\n  ArrowDownIcon,\n  ArrowUpIcon,\n  Button,\n  DropdownMenu,\n  Input,\n  SearchIcon,\n  SortAscendingIcon,\n  SortDescendingIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useMemo, useState } from 'react';\n\nimport { defineMessage, FormattedMessage, IntlShape, MessageDescriptor, useIntl } from 'react-intl';\nimport { ToggleIconButton } from '../../../common/components/ToggleIconButton';\nimport {\n  ExperimentLoggedModelListPageKnownColumns,\n  LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX,\n  parseLoggedModelMetricOrderByColumnId,\n} from './hooks/useExperimentLoggedModelListPageTableColumns';\n\ninterface BasicColumnDef {\n  colId?: string;\n  groupId?: string;\n  headerName?: string;\n  children?: BasicColumnDef[];\n}\n\nconst getSortableColumnLabel = (colId: string | ExperimentLoggedModelListPageKnownColumns, intl: IntlShape) => {\n  const labels: Partial<Record<ExperimentLoggedModelListPageKnownColumns | string, MessageDescriptor>> = {\n    [ExperimentLoggedModelListPageKnownColumns.CreationTime]: defineMessage({\n      defaultMessage: 'Creation time',\n      description: 'Label for the creation time column in the logged model list page',\n    }),\n  };\n\n  const descriptor = labels[colId];\n\n  if (descriptor) {\n    return intl.formatMessage(descriptor);\n  }\n\n  const parsedColumn = parseLoggedModelMetricOrderByColumnId(colId);\n\n  if (parsedColumn) {\n    return parsedColumn.metricKey;\n  }\n\n  return colId;\n};\n\nexport const ExperimentLoggedModelListPageOrderBySelector = ({\n  orderByColumn,\n  orderByAsc,\n  onChangeOrderBy,\n  columnDefs = [],\n}: {\n  orderByColumn: string;\n  orderByAsc?: boolean;\n  onChangeOrderBy: (orderByColumn: string, orderByAsc: boolean) => void;\n  columnDefs: BasicColumnDef[] | undefined;\n}) => {\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n  const { theme } = useDesignSystemTheme();\n\n  const groupedOrderByOptions = useMemo<BasicColumnDef[]>(() => {\n    const lowerCaseFilter = filter.toLowerCase();\n    const attributeColumnGroup = {\n      groupId: 'attributes',\n      headerName: intl.formatMessage({\n        defaultMessage: 'Attributes',\n        description: 'Label for the attributes column group in the logged model column selector',\n      }),\n      children: [\n        {\n          colId: ExperimentLoggedModelListPageKnownColumns.CreationTime,\n          headerName: getSortableColumnLabel(ExperimentLoggedModelListPageKnownColumns.CreationTime, intl),\n        },\n      ].filter(({ headerName }) => headerName?.toLowerCase().includes(lowerCaseFilter)),\n    };\n\n    // Next, get all the dataset-grouped metric column groups\n    const metricColumnGroups = columnDefs\n      .filter((col) => col.groupId?.startsWith(LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX))\n      .map((col) => ({\n        ...col,\n        children: col.children?.filter(({ colId }) => colId?.includes(lowerCaseFilter)),\n        headerName: col.headerName\n          ? `Metrics (${col.headerName})`\n          : intl.formatMessage({\n              defaultMessage: 'Metrics',\n              description: 'Label for the ungrouped metrics column group in the logged model column selector',\n            }),\n      }));\n\n    const sortableColumnGroups = [attributeColumnGroup, ...metricColumnGroups].filter(\n      (col) => col.children && col.children.length > 0,\n    );\n\n    // If the currently used sorting field is not found, this probably means that\n    // user has filtered out results containing this column. Let's add it to the list\n    // of sortable columns so that user won't be confused.\n    if (\n      !sortableColumnGroups.some((group) => group.children && group.children.some((col) => col.colId === orderByColumn))\n    ) {\n      const { metricKey } = parseLoggedModelMetricOrderByColumnId(orderByColumn);\n\n      if (metricKey) {\n        sortableColumnGroups.push({\n          groupId: 'current',\n          headerName: intl.formatMessage({\n            defaultMessage: 'Currently sorted by',\n            description: 'Label for the custom column group in the logged model column selector',\n          }),\n          children: [{ colId: orderByColumn, headerName: metricKey }],\n        });\n      }\n    }\n    return sortableColumnGroups;\n  }, [columnDefs, intl, filter, orderByColumn]);\n\n  return (\n    <DropdownMenu.Root modal={false}>\n      <DropdownMenu.Trigger asChild>\n        <Button\n          componentId=\"mlflow.logged_model.list.order_by\"\n          icon={orderByAsc ? <SortAscendingIcon /> : <SortDescendingIcon />}\n        >\n          <FormattedMessage\n            defaultMessage=\"Sort: {sortBy}\"\n            description=\"Label for the filter button in the logged model list page. sortBy is the name of the column by which the table is currently sorted.\"\n            values={{ sortBy: getSortableColumnLabel(orderByColumn, intl) }}\n          />\n        </Button>\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content css={{ maxHeight: 300, overflow: 'auto' }}>\n        <div\n          css={{\n            padding: `${theme.spacing.sm}px ${theme.spacing.lg / 2}px ${theme.spacing.sm}px`,\n            width: '100%',\n            display: 'flex',\n            gap: theme.spacing.xs,\n          }}\n        >\n          <Input\n            componentId=\"mlflow.logged_model.list.order_by.filter\"\n            prefix={<SearchIcon />}\n            value={filter}\n            type=\"search\"\n            onChange={(e) => setFilter(e.target.value)}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search',\n              description: 'Placeholder for the search input in the logged model list page sort column selector',\n            })}\n            autoFocus\n            allowClear\n          />\n          <div\n            css={{\n              display: 'flex',\n              gap: theme.spacing.xs,\n            }}\n          >\n            <ToggleIconButton\n              pressed={!orderByAsc}\n              icon={<ArrowDownIcon />}\n              componentId=\"mlflow.logged_model.list.order_by.button_desc\"\n              onClick={() => onChangeOrderBy(orderByColumn, false)}\n              aria-label={intl.formatMessage({\n                defaultMessage: 'Sort descending',\n                description: 'Label for the sort descending button in the logged model list page',\n              })}\n            />\n            <ToggleIconButton\n              pressed={orderByAsc}\n              icon={<ArrowUpIcon />}\n              componentId=\"mlflow.logged_model.list.order_by.button_asc\"\n              onClick={() => onChangeOrderBy(orderByColumn, true)}\n              aria-label={intl.formatMessage({\n                defaultMessage: 'Sort ascending',\n                description: 'Label for the sort ascending button in the logged model list page',\n              })}\n            />\n          </div>\n        </div>\n\n        {groupedOrderByOptions.map(({ headerName, children, groupId }) => (\n          <DropdownMenu.Group key={groupId} aria-label={headerName}>\n            <DropdownMenu.Label>{headerName}</DropdownMenu.Label>\n            {children?.map(({ headerName: columnHeaderName, colId }) => (\n              <DropdownMenu.CheckboxItem\n                key={colId}\n                componentId=\"mlflow.logged_model.list.order_by.column_toggle\"\n                checked={orderByColumn === colId}\n                onClick={() => {\n                  if (!colId) {\n                    return;\n                  }\n                  onChangeOrderBy(colId, Boolean(orderByAsc));\n                }}\n              >\n                <DropdownMenu.ItemIndicator />\n                {columnHeaderName}\n              </DropdownMenu.CheckboxItem>\n            ))}\n          </DropdownMenu.Group>\n        ))}\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { Button, ChevronDownIcon, DropdownMenu, ListBorderIcon } from '@databricks/design-system';\nimport { defineMessage, FormattedMessage, type MessageDescriptor } from 'react-intl';\n\nimport { LoggedModelsTableGroupByMode } from './ExperimentLoggedModelListPageTable.utils';\n\nconst GroupByLabels: Record<LoggedModelsTableGroupByMode, MessageDescriptor> = {\n  [LoggedModelsTableGroupByMode.RUNS]: defineMessage({\n    defaultMessage: 'Source run',\n    description: 'Label for the group by runs option in the logged model list page',\n  }),\n};\n\nexport const ExperimentLoggedModelListPageGroupBySelector = ({\n  groupBy,\n  onChangeGroupBy,\n}: {\n  groupBy: LoggedModelsTableGroupByMode | undefined;\n  onChangeGroupBy?: (groupBy: LoggedModelsTableGroupByMode | undefined) => void;\n}) => {\n  const currentSelectedLabel = groupBy ? GroupByLabels[groupBy] : null;\n\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild>\n        <Button componentId=\"mlflow.logged_model.list.group_by\" icon={<ListBorderIcon />} endIcon={<ChevronDownIcon />}>\n          {currentSelectedLabel ? (\n            <FormattedMessage\n              defaultMessage=\"Group by: {currentModeSelected}\"\n              description=\"Label for the grouping selector button in the logged model list page when groupin mode is selected\"\n              values={{ currentModeSelected: <FormattedMessage {...currentSelectedLabel} /> }}\n            />\n          ) : (\n            <FormattedMessage\n              defaultMessage=\"Group by\"\n              description=\"Label for the grouping selector button in the logged model list page when no grouping is selected\"\n            />\n          )}\n        </Button>\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content>\n        <DropdownMenu.CheckboxItem\n          checked={!groupBy}\n          componentId=\"mlflow.logged_model.list.group_by.none\"\n          onClick={() => onChangeGroupBy?.(undefined)}\n        >\n          <DropdownMenu.ItemIndicator />\n          <FormattedMessage\n            defaultMessage=\"None\"\n            description=\"Label for the button disabling grouping in the logged model list page\"\n          />\n        </DropdownMenu.CheckboxItem>\n        <DropdownMenu.CheckboxItem\n          checked={groupBy === LoggedModelsTableGroupByMode.RUNS}\n          componentId=\"mlflow.logged_model.list.group_by.runs\"\n          onClick={() => onChangeGroupBy?.(LoggedModelsTableGroupByMode.RUNS)}\n        >\n          <DropdownMenu.ItemIndicator />\n          <FormattedMessage {...GroupByLabels[LoggedModelsTableGroupByMode.RUNS]} />\n        </DropdownMenu.CheckboxItem>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import {\n  Button,\n  ChartLineIcon,\n  Checkbox,\n  ListIcon,\n  SegmentedControlButton,\n  SegmentedControlGroup,\n  SortAscendingIcon,\n  SortDescendingIcon,\n  Tooltip,\n  Typography,\n  useDesignSystemTheme,\n  visuallyHidden,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { FormattedMessage } from 'react-intl';\nimport type { ColDef, ColGroupDef } from '@ag-grid-community/core';\nimport { ExperimentLoggedModelListPageColumnSelector } from './ExperimentLoggedModelListPageColumnSelector';\nimport { coerceToEnum } from '@databricks/web-shared/utils';\nimport { ExperimentLoggedModelListPageMode } from './hooks/useExperimentLoggedModelListPageMode';\nimport { ExperimentLoggedModelListPageAutoComplete } from './ExperimentLoggedModelListPageAutoComplete';\nimport { LoggedModelMetricDataset, LoggedModelProto } from '../../types';\nimport { ExperimentLoggedModelListPageDatasetDropdown } from './ExperimentLoggedModelListPageDatasetDropdown';\nimport { ExperimentLoggedModelListPageOrderBySelector } from './ExperimentLoggedModelListPageOrderBySelector';\nimport { LoggedModelsTableGroupByMode } from './ExperimentLoggedModelListPageTable.utils';\nimport { ExperimentLoggedModelListPageGroupBySelector } from './ExperimentLoggedModelListPageGroupBySelector';\nimport { shouldEnableLoggedModelsGrouping } from '../../../common/utils/FeatureUtils';\n\nexport const ExperimentLoggedModelListPageControls = ({\n  orderByColumn,\n  orderByAsc,\n  sortingAndFilteringEnabled,\n  onChangeOrderBy,\n  onUpdateColumns,\n  columnDefs,\n  columnVisibility = {},\n  viewMode,\n  setViewMode,\n  searchQuery = '',\n  onChangeSearchQuery,\n  loggedModelsData,\n  selectedFilterDatasets,\n  onToggleDataset,\n  onClearSelectedDatasets,\n  groupBy,\n  onChangeGroupBy,\n}: {\n  orderByColumn?: string;\n  orderByAsc?: boolean;\n  groupBy?: LoggedModelsTableGroupByMode;\n  onChangeGroupBy?: (groupBy: LoggedModelsTableGroupByMode | undefined) => void;\n  sortingAndFilteringEnabled?: boolean;\n  onChangeOrderBy: (orderByColumn: string, orderByAsc: boolean) => void;\n  onUpdateColumns: (columnVisibility: Record<string, boolean>) => void;\n  columnDefs?: (ColDef | ColGroupDef)[];\n  columnVisibility?: Record<string, boolean>;\n  viewMode: ExperimentLoggedModelListPageMode;\n  setViewMode: (mode: ExperimentLoggedModelListPageMode) => void;\n  searchQuery?: string;\n  onChangeSearchQuery: (searchFilter: string) => void;\n  loggedModelsData: LoggedModelProto[];\n  selectedFilterDatasets?: LoggedModelMetricDataset[];\n  onToggleDataset?: (dataset: LoggedModelMetricDataset) => void;\n  onClearSelectedDatasets?: () => void;\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ display: 'flex', flexWrap: 'wrap', gap: theme.spacing.sm }}>\n      <SegmentedControlGroup\n        componentId=\"mlflow.logged_model.list.view-mode\"\n        name=\"view-mode\"\n        value={viewMode}\n        onChange={(e) => {\n          setViewMode(\n            coerceToEnum(ExperimentLoggedModelListPageMode, e.target.value, ExperimentLoggedModelListPageMode.TABLE),\n          );\n        }}\n      >\n        <SegmentedControlButton value=\"TABLE\">\n          <Tooltip\n            componentId=\"mlflow.logged_model.list.view-mode-table-tooltip\"\n            content={intl.formatMessage({\n              defaultMessage: 'Table view',\n              description: 'Label for the table view toggle button in the logged model list page',\n            })}\n          >\n            <ListIcon />\n          </Tooltip>\n          <span css={visuallyHidden}>\n            {intl.formatMessage({\n              defaultMessage: 'Table view',\n              description: 'Label for the table view toggle button in the logged model list page',\n            })}\n          </span>\n        </SegmentedControlButton>\n        <SegmentedControlButton value=\"CHART\">\n          <Tooltip\n            componentId=\"mlflow.logged_model.list.view-mode-chart-tooltip\"\n            content={intl.formatMessage({\n              defaultMessage: 'Chart view',\n              description: 'Label for the table view toggle button in the logged model list page',\n            })}\n          >\n            <ChartLineIcon />\n          </Tooltip>\n          <span css={visuallyHidden}>\n            {intl.formatMessage({\n              defaultMessage: 'Chart view',\n              description: 'Label for the table view toggle button in the logged model list page',\n            })}\n          </span>\n        </SegmentedControlButton>\n      </SegmentedControlGroup>\n      {sortingAndFilteringEnabled ? (\n        <>\n          <ExperimentLoggedModelListPageAutoComplete\n            searchQuery={searchQuery}\n            onChangeSearchQuery={onChangeSearchQuery}\n            loggedModelsData={loggedModelsData}\n          />\n          <ExperimentLoggedModelListPageDatasetDropdown\n            loggedModelsData={loggedModelsData}\n            onToggleDataset={onToggleDataset}\n            onClearSelectedDatasets={onClearSelectedDatasets}\n            selectedFilterDatasets={selectedFilterDatasets}\n          />\n          <ExperimentLoggedModelListPageOrderBySelector\n            orderByColumn={orderByColumn ?? ''}\n            orderByAsc={orderByAsc}\n            onChangeOrderBy={onChangeOrderBy}\n            columnDefs={columnDefs}\n          />\n        </>\n      ) : (\n        <Button\n          componentId=\"mlflow.logged_model.list.sort\"\n          icon={orderByAsc ? <SortAscendingIcon /> : <SortDescendingIcon />}\n          onClick={() => {\n            orderByColumn && onChangeOrderBy(orderByColumn, !orderByAsc);\n          }}\n        >\n          <FormattedMessage\n            defaultMessage=\"Sort: Created\"\n            description=\"Label for the sort button in the logged model list page\"\n          />\n        </Button>\n      )}\n      <ExperimentLoggedModelListPageColumnSelector\n        columnDefs={columnDefs}\n        columnVisibility={columnVisibility}\n        onUpdateColumns={onUpdateColumns}\n        disabled={viewMode === ExperimentLoggedModelListPageMode.CHART}\n      />\n      {shouldEnableLoggedModelsGrouping() && (\n        <ExperimentLoggedModelListPageGroupBySelector groupBy={groupBy} onChangeGroupBy={onChangeGroupBy} />\n      )}\n    </div>\n  );\n};\n","import { compact, keyBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { LoggedModelProto } from '../../../types';\nimport { getStableColorForRun } from '../../../utils/RunNameUtils';\nimport type { RunsChartsRunData } from '../../runs-charts/components/RunsCharts.common';\nimport { useExperimentLoggedModelListPageRowVisibilityContext } from './useExperimentLoggedModelListPageRowVisibility';\n\nexport const getMetricByDatasetChartDataKey = (metricKey?: string, datasetName?: string) =>\n  datasetName ? JSON.stringify([datasetName, metricKey]) : metricKey ?? '';\n\n/**\n * Creates chart-consumable data based on logged models, including metrics and parameters.\n * TODO: optimize, add unit tests\n */\nexport const useExperimentLoggedModelsChartsData = (loggedModels: LoggedModelProto[]) => {\n  const { isRowHidden } = useExperimentLoggedModelListPageRowVisibilityContext();\n  return useMemo<RunsChartsRunData[]>(\n    () =>\n      compact(\n        loggedModels.map<RunsChartsRunData | null>((model, index) =>\n          model.info?.model_id\n            ? {\n                displayName: model.info?.name ?? model.info?.model_id ?? 'Unknown',\n                images: {},\n\n                metrics: keyBy(\n                  model.data?.metrics?.map(({ dataset_name, key, value, timestamp, step }) => ({\n                    // Instead of using plain metric key, we will use specific data access key generated based on metric key and dataset\n                    dataKey: getMetricByDatasetChartDataKey(key, dataset_name),\n                    key: key ?? '',\n                    value: value ?? 0,\n                    timestamp: timestamp ?? 0,\n                    step: step ?? 0,\n                  })),\n                  'dataKey',\n                ),\n                params: keyBy(\n                  model.data?.params\n                    ?.map(({ key, value }) => ({ key: key ?? '', value: value ?? '' }))\n                    .filter(({ key }) => key) ?? [],\n                  'key',\n                ),\n                tags: {},\n                uuid: model.info.model_id,\n                hidden: isRowHidden(model.info.model_id, index),\n                color: getStableColorForRun(model.info.model_id),\n              }\n            : null,\n        ),\n      ),\n    [loggedModels, isRowHidden],\n  );\n};\n","import { useCallback, useEffect, useReducer, useState } from 'react';\nimport type { ExperimentRunsChartsUIConfiguration } from '../../experiment-page/models/ExperimentPageUIState';\nimport { ChartSectionConfig } from '../../../types';\nimport {\n  RunsChartsBarCardConfig,\n  RunsChartsCardConfig,\n  RunsChartsMetricByDatasetEntry,\n  RunsChartType,\n} from '../../runs-charts/runs-charts.types';\nimport { isEmpty, uniq } from 'lodash';\nimport { RunsChartsUIConfigurationSetter } from '../../runs-charts/hooks/useRunsChartsUIConfiguration';\n\ntype UpdateChartStateAction = { type: 'UPDATE'; stateSetter: RunsChartsUIConfigurationSetter };\ntype InitializeChartStateAction = { type: 'INITIALIZE'; initialConfig?: LoggedModelsChartsUIConfiguration };\ntype NewLoggedModelsStateAction = { type: 'METRICS_UPDATED'; metricsByDatasets: RunsChartsMetricByDatasetEntry[] };\n\ntype ChartsReducerAction = UpdateChartStateAction | NewLoggedModelsStateAction | InitializeChartStateAction;\n\ninterface LoggedModelsChartsUIConfiguration extends ExperimentRunsChartsUIConfiguration {\n  isDirty: boolean;\n}\n\nconst createLocalStorageKey = (storeIdentifier: string, version = 1) =>\n  `experiment-logged-models-charts-ui-state-v${version}-${storeIdentifier}`;\n\n/**\n * Generates a list of chart tiles based on logged models metrics and datasets.\n */\nconst getExperimentLoggedModelsPageChartSetup = (metricsByDatasets: RunsChartsMetricByDatasetEntry[]) => {\n  const compareRunCharts: RunsChartsBarCardConfig[] = metricsByDatasets.map(\n    ({ dataAccessKey, metricKey, datasetName }) => ({\n      deleted: false,\n      type: RunsChartType.BAR,\n      uuid: `autogen-${dataAccessKey}`,\n      metricSectionId: datasetName ? `autogen-${datasetName}` : 'default',\n      isGenerated: true,\n      metricKey,\n      dataAccessKey,\n      datasetName,\n      displayName: datasetName ? `(${datasetName}) ${metricKey}` : undefined,\n    }),\n  );\n\n  const compareRunSections: ChartSectionConfig[] = uniq(metricsByDatasets.map(({ datasetName }) => datasetName)).map(\n    (datasetName) => ({\n      display: true,\n      name: datasetName ?? 'Metrics',\n      uuid: datasetName ? `autogen-${datasetName}` : 'default',\n      isReordered: false,\n    }),\n  );\n\n  if (isEmpty(compareRunSections)) {\n    compareRunSections.push({\n      display: true,\n      name: 'Metrics',\n      uuid: 'default',\n      isReordered: false,\n    });\n  }\n\n  return {\n    compareRunCharts,\n    compareRunSections,\n  };\n};\n\n// Internal utility function  used to merge the current charts state with potentially incoming new charts and sections\nconst reconcileChartsAndSections = (\n  currentState: LoggedModelsChartsUIConfiguration,\n  newCharts: { compareRunCharts: RunsChartsCardConfig[]; compareRunSections: ChartSectionConfig[] },\n) => {\n  // If there are no charts / sections, or if the state is in pristine state, just set the new charts if they're not empty\n  if (!currentState.compareRunCharts || !currentState.compareRunSections || !currentState.isDirty) {\n    if (newCharts.compareRunCharts.length > 0 || newCharts.compareRunSections.length > 0) {\n      return {\n        ...currentState,\n        compareRunCharts: newCharts.compareRunCharts ?? [],\n        compareRunSections: newCharts.compareRunSections ?? [],\n      };\n    }\n  }\n\n  // Otherwise, detect new sections and charts and add them to the list\n  const newChartsToAdd = newCharts.compareRunCharts.filter(\n    (newChart) => !currentState.compareRunCharts?.find((chart) => chart.uuid === newChart.uuid),\n  );\n  const newSectionsToAdd = newCharts.compareRunSections.filter(\n    (newSection) =>\n      newChartsToAdd.find((newChart) => newChart.metricSectionId === newSection.uuid) &&\n      !currentState.compareRunSections?.find((section) => section.uuid === newSection.uuid),\n  );\n\n  if (newSectionsToAdd.length > 0 || newChartsToAdd.length > 0) {\n    return {\n      ...currentState,\n      compareRunCharts: currentState.compareRunCharts\n        ? [...currentState.compareRunCharts, ...newChartsToAdd]\n        : newCharts.compareRunCharts,\n      compareRunSections: currentState.compareRunSections\n        ? [...currentState.compareRunSections, ...newSectionsToAdd]\n        : newCharts.compareRunSections,\n    };\n  }\n  return currentState;\n};\n\nconst chartsUIStateInitializer = (): LoggedModelsChartsUIConfiguration => ({\n  compareRunCharts: undefined,\n  compareRunSections: undefined,\n  autoRefreshEnabled: false,\n  isAccordionReordered: false,\n  chartsSearchFilter: '',\n  globalLineChartConfig: undefined,\n  isDirty: false,\n});\n\n// Reducer to manage the state of the charts UI\nconst chartsUIStateReducer = (state: LoggedModelsChartsUIConfiguration, action: ChartsReducerAction) => {\n  // 'UPDATE' is sent by controls that updates the UI state directly\n  if (action.type === 'UPDATE') {\n    return { ...action.stateSetter(state), isDirty: true };\n  }\n  // 'METRICS_UPDATED' is sent when new logged models data is available and potentially new charts need to be added\n  if (action.type === 'METRICS_UPDATED') {\n    const { compareRunCharts, compareRunSections } = getExperimentLoggedModelsPageChartSetup(action.metricsByDatasets);\n    const newState = reconcileChartsAndSections(state, { compareRunCharts, compareRunSections });\n    return newState;\n  }\n  if (action.type === 'INITIALIZE') {\n    if (action.initialConfig) {\n      return action.initialConfig;\n    }\n  }\n  return state;\n};\n\nconst loadPersistedDataFromStorage = async (storeIdentifier: string) => {\n  // This function is async on purpose to accommodate potential asynchoronous storage mechanisms (e.g. IndexedDB) in the future\n  const serializedData = localStorage.getItem(createLocalStorageKey(storeIdentifier));\n  if (!serializedData) {\n    return undefined;\n  }\n  try {\n    return JSON.parse(serializedData);\n  } catch {\n    return undefined;\n  }\n};\n\nconst saveDataToStorage = async (storeIdentifier: string, dataToPersist: LoggedModelsChartsUIConfiguration) => {\n  localStorage.setItem(createLocalStorageKey(storeIdentifier), JSON.stringify(dataToPersist));\n};\n\nexport const useExperimentLoggedModelsChartsUIState = (\n  metricsByDatasets: RunsChartsMetricByDatasetEntry[],\n  storeIdentifier: string,\n) => {\n  const [chartUIState, dispatchChartUIState] = useReducer(chartsUIStateReducer, undefined, chartsUIStateInitializer);\n  const [loading, setLoading] = useState(true);\n\n  // Attempt to load the persisted data when the component mounts\n  useEffect(() => {\n    setLoading(true);\n    loadPersistedDataFromStorage(storeIdentifier).then((data) => {\n      dispatchChartUIState({ type: 'INITIALIZE', initialConfig: data });\n      setLoading(false);\n    });\n  }, [storeIdentifier]);\n\n  // Attempt to update the charts state when the logged models change\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    dispatchChartUIState({ type: 'METRICS_UPDATED', metricsByDatasets });\n  }, [metricsByDatasets, loading]);\n\n  // Attempt persist the data when the state changes\n  useEffect(() => {\n    if (chartUIState.isDirty) {\n      saveDataToStorage(storeIdentifier, chartUIState);\n    }\n  }, [storeIdentifier, chartUIState]);\n\n  // Create an updater function to pass it to chart controls\n  const updateUIState = useCallback(\n    (stateSetter: RunsChartsUIConfigurationSetter) =>\n      dispatchChartUIState({\n        type: 'UPDATE',\n        stateSetter,\n      }),\n    [],\n  );\n\n  return { chartUIState, updateUIState, loading };\n};\n","import { Empty, Input, SearchIcon, Spinner, useDesignSystemTheme } from '@databricks/design-system';\nimport { noop, uniq } from 'lodash';\nimport { memo, ReactNode, useMemo, useCallback, useState } from 'react';\nimport { LoggedModelProto } from '../../types';\nimport { ExperimentRunsChartsUIConfiguration } from '../experiment-page/models/ExperimentPageUIState';\nimport { RunsChartsRunData } from '../runs-charts/components/RunsCharts.common';\nimport { RunsChartsDraggableCardsGridContextProvider } from '../runs-charts/components/RunsChartsDraggableCardsGridContext';\nimport { RunsChartsFullScreenModal } from '../runs-charts/components/RunsChartsFullScreenModal';\nimport { RunsChartsTooltipBody } from '../runs-charts/components/RunsChartsTooltipBody';\nimport { RunsChartsSectionAccordion } from '../runs-charts/components/sections/RunsChartsSectionAccordion';\nimport { RunsChartsTooltipWrapper } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport {\n  RunsChartsUIConfigurationContextProvider,\n  useConfirmChartCardConfigurationFn,\n  useRemoveRunsChartFn,\n  useUpdateRunsChartsUIConfiguration,\n} from '../runs-charts/hooks/useRunsChartsUIConfiguration';\nimport { RunsChartsCardConfig, RunsChartsMetricByDatasetEntry, RunsChartType } from '../runs-charts/runs-charts.types';\nimport { useExperimentLoggedModelsChartsData } from './hooks/useExperimentLoggedModelsChartsData';\nimport { useExperimentLoggedModelsChartsUIState } from './hooks/useExperimentLoggedModelsChartsUIState';\nimport { useExperimentLoggedModelAllMetricsByDataset } from './hooks/useExperimentLoggedModelAllMetricsByDataset';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useMemoDeep } from '../../../common/hooks/useMemoDeep';\nimport { RunsChartsConfigureModal } from '../runs-charts/components/RunsChartsConfigureModal';\nimport Routes from '../../routes';\n\nconst ExperimentLoggedModelListChartsImpl = memo(\n  ({\n    chartData,\n    uiState,\n    metricKeysByDataset,\n    minWidth,\n  }: {\n    chartData: RunsChartsRunData[];\n    uiState: ExperimentRunsChartsUIConfiguration;\n    metricKeysByDataset: RunsChartsMetricByDatasetEntry[];\n    minWidth: number;\n  }) => {\n    const { theme } = useDesignSystemTheme();\n    const { formatMessage } = useIntl();\n\n    const availableMetricKeys = useMemo(() => uniq(chartData.flatMap((run) => Object.keys(run.metrics))), [chartData]);\n    const availableParamKeys = useMemo(() => uniq(chartData.flatMap((run) => Object.keys(run.params))), [chartData]);\n\n    const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n\n    const setSearch = useCallback(\n      (search: string) => {\n        updateChartsUIState((state) => ({ ...state, chartsSearchFilter: search }));\n      },\n      [updateChartsUIState],\n    );\n\n    const [configuredCardConfig, setConfiguredCardConfig] = useState<RunsChartsCardConfig | null>(null);\n\n    const addNewChartCard = useCallback(\n      (metricSectionId: string) => (type: RunsChartType) =>\n        setConfiguredCardConfig(RunsChartsCardConfig.getEmptyChartCardByType(type, false, undefined, metricSectionId)),\n      [],\n    );\n\n    const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n    const removeChart = useRemoveRunsChartFn();\n\n    const [fullScreenChart, setFullScreenChart] = useState<\n      | {\n          config: RunsChartsCardConfig;\n          title: string | ReactNode;\n          subtitle: ReactNode;\n        }\n      | undefined\n    >(undefined);\n\n    const fullscreenTooltipContextValue = useMemo(() => ({ runs: chartData }), [chartData]);\n\n    const tooltipContextValue = useMemo(\n      () => ({ runs: chartData, getDataTraceLink: Routes.getExperimentLoggedModelDetailsPageRoute }),\n      [chartData],\n    );\n\n    const emptyState = (\n      <div css={{ marginTop: theme.spacing.lg }}>\n        <Empty\n          description={\n            <FormattedMessage\n              defaultMessage=\"No models found in experiment or all models are hidden. Select at least one model to view charts.\"\n              description=\"Label displayed in logged models chart view when no models are visible or selected\"\n            />\n          }\n        />\n      </div>\n    );\n\n    return (\n      <div\n        css={{\n          backgroundColor: theme.colors.backgroundPrimary,\n          paddingLeft: theme.spacing.md,\n          paddingRight: theme.spacing.md,\n          paddingBottom: theme.spacing.md,\n\n          borderTop: `1px solid ${theme.colors.border}`,\n          borderLeft: `1px solid ${theme.colors.border}`,\n\n          flex: 1,\n          overflow: 'hidden',\n          display: 'flex',\n          minWidth: minWidth,\n        }}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.sm,\n            paddingTop: theme.spacing.sm,\n            overflow: 'hidden',\n            flex: 1,\n          }}\n        >\n          <Input\n            componentId=\"mlflow.logged_model.list.charts.search\"\n            role=\"searchbox\"\n            prefix={<SearchIcon />}\n            value={uiState.chartsSearchFilter ?? ''}\n            allowClear\n            onChange={({ target }) => setSearch(target.value)}\n            placeholder={formatMessage({\n              defaultMessage: 'Search metric charts',\n              description: 'Placeholder for chart search input on the logged model chart view',\n            })}\n          />\n          <div css={{ overflow: 'auto' }}>\n            <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={RunsChartsTooltipBody}>\n              <RunsChartsDraggableCardsGridContextProvider visibleChartCards={uiState.compareRunCharts}>\n                <RunsChartsSectionAccordion\n                  compareRunSections={uiState.compareRunSections}\n                  compareRunCharts={uiState.compareRunCharts}\n                  reorderCharts={noop}\n                  insertCharts={noop}\n                  chartData={chartData}\n                  startEditChart={setConfiguredCardConfig}\n                  removeChart={removeChart}\n                  addNewChartCard={addNewChartCard}\n                  search={uiState.chartsSearchFilter ?? ''}\n                  groupBy={null}\n                  setFullScreenChart={setFullScreenChart}\n                  autoRefreshEnabled={false}\n                  hideEmptyCharts={false}\n                  globalLineChartConfig={undefined}\n                  supportedChartTypes={[RunsChartType.BAR, RunsChartType.SCATTER]}\n                  noRunsSelectedEmptyState={emptyState}\n                />\n              </RunsChartsDraggableCardsGridContextProvider>\n            </RunsChartsTooltipWrapper>\n            <RunsChartsFullScreenModal\n              fullScreenChart={fullScreenChart}\n              onCancel={() => setFullScreenChart(undefined)}\n              chartData={chartData}\n              groupBy={null}\n              tooltipContextValue={fullscreenTooltipContextValue}\n              tooltipComponent={RunsChartsTooltipBody}\n              autoRefreshEnabled={false}\n              globalLineChartConfig={undefined}\n            />\n            {configuredCardConfig && (\n              <RunsChartsConfigureModal\n                chartRunData={chartData}\n                metricKeyList={availableMetricKeys}\n                metricKeysByDataset={metricKeysByDataset}\n                paramKeyList={availableParamKeys}\n                config={configuredCardConfig}\n                onSubmit={(configuredCardConfig) => {\n                  confirmChartCardConfiguration({ ...configuredCardConfig, displayName: undefined });\n                  setConfiguredCardConfig(null);\n                }}\n                onCancel={() => setConfiguredCardConfig(null)}\n                groupBy={null}\n                supportedChartTypes={[RunsChartType.BAR, RunsChartType.SCATTER]}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\n\nexport const ExperimentLoggedModelListCharts = memo(\n  ({\n    loggedModels,\n    experimentId,\n    minWidth,\n  }: {\n    loggedModels: LoggedModelProto[];\n    experimentId: string;\n    minWidth: number;\n  }) => {\n    const { theme } = useDesignSystemTheme();\n\n    // Perform deep comparison on the logged models to avoid re-rendering the charts when the logged models change.\n    // Deep comparison should still be cheaper than rerendering all charts.\n    const cachedLoggedModels = useMemoDeep(() => loggedModels, [loggedModels]);\n\n    const metricsByDataset = useExperimentLoggedModelAllMetricsByDataset(cachedLoggedModels);\n\n    const {\n      chartUIState,\n      updateUIState,\n      loading: loadingState,\n    } = useExperimentLoggedModelsChartsUIState(metricsByDataset, experimentId);\n    const chartData = useExperimentLoggedModelsChartsData(cachedLoggedModels);\n\n    if (loadingState) {\n      return (\n        <div\n          css={{\n            backgroundColor: theme.colors.backgroundPrimary,\n            paddingTop: theme.spacing.lg,\n            borderTop: `1px solid ${theme.colors.border}`,\n            borderLeft: `1px solid ${theme.colors.border}`,\n            flex: 1,\n            justifyContent: 'center',\n            alignItems: 'center',\n            display: 'flex',\n          }}\n        >\n          <Spinner />\n        </div>\n      );\n    }\n    return (\n      <RunsChartsUIConfigurationContextProvider updateChartsUIState={updateUIState}>\n        <ExperimentLoggedModelListChartsImpl\n          chartData={chartData}\n          uiState={chartUIState}\n          metricKeysByDataset={metricsByDataset}\n          minWidth={minWidth}\n        />\n      </RunsChartsUIConfigurationContextProvider>\n    );\n  },\n);\n","import { isEqual } from 'lodash';\nimport { useRef } from 'react';\n\n/**\n * Utility hook that memoizes value based on deep comparison.\n * Dedicated to a few limited use cases where deep comparison is still cheaper than resulting re-renders.\n */\nexport const useMemoDeep = <T>(factory: () => T, deps: unknown[]): T => {\n  const ref = useRef<{ deps: unknown[]; value: T }>();\n\n  if (!ref.current || !isEqual(deps, ref.current.deps)) {\n    ref.current = { deps, value: factory() };\n  }\n\n  return ref.current.value;\n};\n","import { orderBy } from 'lodash';\nimport type { LoggedModelProto } from '../../../types';\nimport { useMemo } from 'react';\nimport type { RunsChartsMetricByDatasetEntry } from '../../runs-charts/runs-charts.types';\nimport { getMetricByDatasetChartDataKey } from './useExperimentLoggedModelsChartsData';\n\nexport const useExperimentLoggedModelAllMetricsByDataset = (loggedModels: LoggedModelProto[]) =>\n  useMemo(() => {\n    const metricsByDataset: RunsChartsMetricByDatasetEntry[] = [];\n    loggedModels.forEach((model) => {\n      model.data?.metrics?.forEach(({ key: metricKey, dataset_name: datasetName }) => {\n        if (metricKey && !metricsByDataset.find((e) => e.metricKey === metricKey && e.datasetName === datasetName)) {\n          const dataAccessKey = getMetricByDatasetChartDataKey(metricKey, datasetName);\n          metricsByDataset.push({ metricKey, datasetName, dataAccessKey });\n        }\n      });\n    });\n    return orderBy(metricsByDataset, ({ datasetName }) => !datasetName);\n  }, [loggedModels]);\n","import { Alert, Spacer, useDesignSystemTheme } from '@databricks/design-system';\nimport invariant from 'invariant';\nimport { useParams } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { ExperimentLoggedModelPageWrapper } from './ExperimentLoggedModelPageWrapper';\n\nimport { isLoggedModelsFilteringAndSortingEnabled } from '../../../common/utils/FeatureUtils';\nimport { useEffect, useState } from 'react';\nimport { ExperimentLoggedModelListPageTable } from '../../components/experiment-logged-models/ExperimentLoggedModelListPageTable';\nimport { useSearchLoggedModelsQuery } from '../../hooks/logged-models/useSearchLoggedModelsQuery';\nimport { ExperimentLoggedModelListPageControls } from '../../components/experiment-logged-models/ExperimentLoggedModelListPageControls';\nimport {\n  parseLoggedModelMetricOrderByColumnId,\n  useExperimentLoggedModelListPageTableColumns,\n} from '../../components/experiment-logged-models/hooks/useExperimentLoggedModelListPageTableColumns';\nimport { ExperimentLoggedModelOpenDatasetDetailsContextProvider } from '../../components/experiment-logged-models/hooks/useExperimentLoggedModelOpenDatasetDetails';\nimport { useLoggedModelsListPageState } from '../../components/experiment-logged-models/hooks/useLoggedModelsListPagePageState';\nimport { useRelatedRunsDataForLoggedModels } from '../../hooks/logged-models/useRelatedRunsDataForLoggedModels';\nimport {\n  ExperimentLoggedModelListPageMode,\n  useExperimentLoggedModelListPageMode,\n} from '../../components/experiment-logged-models/hooks/useExperimentLoggedModelListPageMode';\nimport { ExperimentViewRunsTableResizer } from '../../components/experiment-page/components/runs/ExperimentViewRunsTableResizer';\nimport { ExperimentLoggedModelListCharts } from '../../components/experiment-logged-models/ExperimentLoggedModelListCharts';\nimport { ExperimentLoggedModelListPageRowVisibilityContextProvider } from '../../components/experiment-logged-models/hooks/useExperimentLoggedModelListPageRowVisibility';\nimport { RunsChartsSetHighlightContextProvider } from '../../components/runs-charts/hooks/useRunsChartTraceHighlight';\nimport { BadRequestError } from '@databricks/web-shared/errors';\nimport { useResizableMaxWidth } from '@mlflow/mlflow/src/shared/web-shared/hooks';\n\nconst INITIAL_RUN_COLUMN_SIZE = 295;\nconst CHARTS_MIN_WIDTH = 350;\n\nconst ExperimentLoggedModelListPageImpl = () => {\n  const { experimentId } = useParams();\n  const { theme } = useDesignSystemTheme();\n  const sortingAndFilteringEnabled = isLoggedModelsFilteringAndSortingEnabled();\n\n  const {\n    state: {\n      orderByColumn,\n      orderByAsc,\n      columnVisibility,\n      rowVisibilityMap,\n      rowVisibilityMode,\n      selectedFilterDatasets,\n      groupBy,\n    },\n    searchQuery,\n    isFilteringActive,\n    setOrderBy,\n    setColumnVisibility,\n    setRowVisibilityMode,\n    toggleRowVisibility,\n    updateSearchQuery,\n    toggleDataset,\n    clearSelectedDatasets,\n    setGroupBy,\n  } = useLoggedModelsListPageState();\n\n  invariant(experimentId, 'Experiment ID must be defined');\n\n  const { viewMode, setViewMode } = useExperimentLoggedModelListPageMode();\n\n  // Translate currently sorting column to the format accepted by the API query.\n  // If the column is a metric, we need to parse and pass the dataset name and digest if found.\n  const getOrderByRequestData = () => {\n    if (!orderByColumn) {\n      return { orderByField: undefined };\n    }\n    const parsedMetricOrderByColumn = parseLoggedModelMetricOrderByColumnId(orderByColumn);\n    if (parsedMetricOrderByColumn.datasetDigest && parsedMetricOrderByColumn.datasetName) {\n      return {\n        orderByField: `metrics.${parsedMetricOrderByColumn.metricKey}`,\n        orderByDatasetName: parsedMetricOrderByColumn.datasetName,\n        orderByDatasetDigest: parsedMetricOrderByColumn.datasetDigest,\n      };\n    }\n    return { orderByField: orderByColumn };\n  };\n\n  const {\n    data: loggedModels,\n    isFetching: isFetchingLoggedModels,\n    isLoading: isLoadingLoggedModels,\n    error: loggedModelsError,\n    nextPageToken,\n    loadMoreResults,\n  } = useSearchLoggedModelsQuery({\n    experimentIds: [experimentId],\n    orderByAsc,\n    searchQuery,\n    selectedFilterDatasets,\n    ...getOrderByRequestData(),\n  });\n\n  // Find and extract 400 error from the logged models error\n  const badRequestError = loggedModelsError instanceof BadRequestError ? loggedModelsError : undefined;\n\n  const { data: relatedRunsData } = useRelatedRunsDataForLoggedModels({ loggedModels });\n\n  const { columnDefs, compactColumnDefs } = useExperimentLoggedModelListPageTableColumns({\n    loggedModels,\n    columnVisibility,\n    isLoading: isLoadingLoggedModels,\n    orderByColumn,\n    orderByAsc,\n    enableSortingByMetrics: sortingAndFilteringEnabled,\n  });\n\n  const [tableAreaWidth, setTableAreaWidth] = useState<number>(INITIAL_RUN_COLUMN_SIZE);\n  const [tableHidden, setTableHidden] = useState(false);\n\n  const isCompactTableMode = viewMode !== ExperimentLoggedModelListPageMode.TABLE;\n\n  const tableElement =\n    isCompactTableMode && tableHidden ? (\n      <div css={{ width: theme.spacing.md }} />\n    ) : (\n      <ExperimentLoggedModelListPageTable\n        columnDefs={isCompactTableMode ? compactColumnDefs : columnDefs}\n        loggedModels={loggedModels ?? []}\n        isLoading={isLoadingLoggedModels}\n        isLoadingMore={isFetchingLoggedModels}\n        badRequestError={badRequestError}\n        moreResultsAvailable={Boolean(nextPageToken)}\n        onLoadMore={loadMoreResults}\n        onOrderByChange={setOrderBy}\n        orderByAsc={orderByAsc}\n        orderByColumn={orderByColumn}\n        columnVisibility={columnVisibility}\n        relatedRunsData={relatedRunsData}\n        isFilteringActive={isFilteringActive}\n        groupModelsBy={groupBy}\n      />\n    );\n\n  const { resizableMaxWidth, ref } = useResizableMaxWidth(CHARTS_MIN_WIDTH);\n\n  return (\n    <ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n      <ExperimentLoggedModelListPageRowVisibilityContextProvider\n        visibilityMap={rowVisibilityMap}\n        visibilityMode={rowVisibilityMode}\n        setRowVisibilityMode={setRowVisibilityMode}\n        toggleRowVisibility={toggleRowVisibility}\n      >\n        <ExperimentLoggedModelListPageControls\n          columnDefs={columnDefs}\n          columnVisibility={columnVisibility}\n          onChangeOrderBy={setOrderBy}\n          onUpdateColumns={setColumnVisibility}\n          orderByColumn={orderByColumn}\n          orderByAsc={orderByAsc}\n          viewMode={viewMode}\n          setViewMode={setViewMode}\n          searchQuery={searchQuery}\n          onChangeSearchQuery={updateSearchQuery}\n          loggedModelsData={loggedModels ?? []}\n          sortingAndFilteringEnabled={sortingAndFilteringEnabled}\n          selectedFilterDatasets={selectedFilterDatasets}\n          onToggleDataset={toggleDataset}\n          onClearSelectedDatasets={clearSelectedDatasets}\n          groupBy={groupBy}\n          onChangeGroupBy={setGroupBy}\n        />\n        <Spacer size=\"sm\" shrinks={false} />\n        {/* Display error message, but not if it's 400 - in that case, the error message is displayed in the table */}\n        {loggedModelsError?.message && !badRequestError && (\n          <>\n            <Alert\n              componentId=\"mlflow.logged_models.list.error\"\n              message={loggedModelsError.message}\n              type=\"error\"\n              closable={false}\n            />\n            <Spacer size=\"sm\" shrinks={false} />\n          </>\n        )}\n        {isCompactTableMode ? (\n          <RunsChartsSetHighlightContextProvider>\n            <div ref={ref} css={{ display: 'flex', flex: 1, overflow: 'hidden', position: 'relative' }}>\n              <ExperimentViewRunsTableResizer\n                onResize={setTableAreaWidth}\n                runListHidden={tableHidden}\n                width={tableAreaWidth}\n                onHiddenChange={setTableHidden}\n                maxWidth={resizableMaxWidth}\n              >\n                {tableElement}\n              </ExperimentViewRunsTableResizer>\n              {viewMode === ExperimentLoggedModelListPageMode.CHART && (\n                <ExperimentLoggedModelListCharts\n                  loggedModels={loggedModels ?? []}\n                  experimentId={experimentId}\n                  minWidth={CHARTS_MIN_WIDTH}\n                />\n              )}\n            </div>\n          </RunsChartsSetHighlightContextProvider>\n        ) : (\n          tableElement\n        )}\n      </ExperimentLoggedModelListPageRowVisibilityContextProvider>\n    </ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n  );\n};\n\nconst ExperimentLoggedModelListPage = () => (\n  <ExperimentLoggedModelPageWrapper>\n    <ExperimentLoggedModelListPageImpl />\n  </ExperimentLoggedModelPageWrapper>\n);\n\nexport default ExperimentLoggedModelListPage;\n","import type { LoggedModelProto, RunEntity } from '../../types';\nimport { useEffect, useMemo } from 'react';\nimport { compact, sortBy, uniq } from 'lodash';\nimport { QueryFunctionContext, useQueries } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { MlflowService } from '../../sdk/MlflowService';\nimport { useArrayMemo } from '../../../common/hooks/useArrayMemo';\n\ntype UseRegisteredModelRelatedRunNamesQueryKey = ['USE_RELATED_RUNS_DATA_FOR_LOGGED_MODELS', { runUuid: string }];\n\nconst getQueryKey = (runUuid: string): UseRegisteredModelRelatedRunNamesQueryKey => [\n  'USE_RELATED_RUNS_DATA_FOR_LOGGED_MODELS',\n  { runUuid },\n];\n\nconst queryFn = async ({\n  queryKey: [, { runUuid }],\n}: QueryFunctionContext<UseRegisteredModelRelatedRunNamesQueryKey>): Promise<RunEntity | null> => {\n  try {\n    const data = await MlflowService.getRun({ run_id: runUuid });\n    return data?.run;\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * Hook used to fetch necessary run data based on metadata found in logged models\n */\nexport const useRelatedRunsDataForLoggedModels = ({ loggedModels = [] }: { loggedModels?: LoggedModelProto[] }) => {\n  const runUuids = useMemo(() => {\n    // Extract all run ids found in metrics and source run ids\n    const allMetricRunUuids = compact(\n      loggedModels?.flatMap((loggedModel) => loggedModel?.data?.metrics?.map((metric) => metric.run_id)),\n    );\n    const allSourceRunUuids = compact(loggedModels?.map((loggedModel) => loggedModel?.info?.source_run_id));\n    const distinctRunUuids = sortBy(uniq([...allMetricRunUuids, ...allSourceRunUuids]));\n\n    return distinctRunUuids;\n  }, [loggedModels]);\n\n  const queryResults = useQueries({\n    queries: runUuids.map((runUuid) => ({\n      queryKey: getQueryKey(runUuid),\n      queryFn,\n      cacheTime: Infinity,\n      staleTime: Infinity,\n      refetchOnWindowFocus: false,\n      retry: false,\n    })),\n  });\n\n  const loading = queryResults.some(({ isLoading }) => isLoading);\n  const error = queryResults.find(({ error }) => error)?.error as Error | undefined;\n\n  const memoizedQueryResults = useArrayMemo(queryResults.map(({ data }) => data));\n\n  const data = useMemo(\n    () => memoizedQueryResults.map((data) => data).filter(Boolean) as RunEntity[],\n    [memoizedQueryResults],\n  );\n\n  return {\n    data,\n    loading,\n    error,\n  };\n};\n","import { useRef } from 'react';\n\n/**\n * A custom hook that memoizes an array based on the reference of its elements, not the array itself.\n */\nexport function useArrayMemo<T>(array: T[]) {\n  // This holds reference to previous value\n  const ref = useRef<T[]>();\n  // Check if each element of the old and new array match\n  const areArraysConsideredTheSame =\n    ref.current && array.length === ref.current.length\n      ? array.every((element, i) => {\n          return element === ref.current?.[i];\n        })\n      : // Initially there's no old array defined/stored, so set to false\n        false;\n\n  if (!areArraysConsideredTheSame) {\n    ref.current = array;\n  }\n\n  return areArraysConsideredTheSame && ref.current ? ref.current : array;\n}\n","import { UserActionErrorHandler } from '@databricks/web-shared/metrics';\nimport { QueryClient, QueryClientProvider } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { DangerIcon, Empty, PageWrapper } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nconst PageFallback = ({ error }: { error?: Error }) => {\n  return (\n    <PageWrapper css={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        data-testid=\"fallback\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Error\"\n            description=\"Title for error fallback component in prompts management UI\"\n          />\n        }\n        description={\n          error?.message ?? (\n            <FormattedMessage\n              defaultMessage=\"An error occurred while rendering this component.\"\n              description=\"Description for default error message in prompts management UI\"\n            />\n          )\n        }\n        image={<DangerIcon />}\n      />\n    </PageWrapper>\n  );\n};\n\n/**\n * Wrapper for all experiment logged model pages.\n * Provides error boundaries and user action error handling.\n */\nexport const ExperimentLoggedModelPageWrapper = ({\n  children,\n  resetKey,\n}: {\n  children: React.ReactNode;\n  resetKey?: unknown;\n}) => {\n  return (\n    <ErrorBoundary FallbackComponent={PageFallback} resetKeys={[resetKey]}>\n      <UserActionErrorHandler>{children}</UserActionErrorHandler>\n    </ErrorBoundary>\n  );\n};\n"],"names":["ExperimentLoggedModelListPageMode","VIEW_MODE_QUERY_PARAM","VALID_FILTER_ATTRIBUTES","ExperimentLoggedModelListPageAutoComplete","searchQuery","onChangeSearchQuery","loggedModelsData","options","useMemo","entityNames","loggedModels","metricNames","Set","paramNames","tagNames","loggedModel","_loggedModel$data","_loggedModel$data$met","_loggedModel$data2","_loggedModel$data2$pa","_loggedModel$info","_loggedModel$info$tag","data","metrics","forEach","metric","key","add","params","param","info","tags","tag","Array","from","filter","isUserFacingTag","getEntityNamesFromLoggedModelsData","validAttributeOptions","map","attribute","value","getEntitySearchOptionsFromEntityNames","_jsx","EntitySearchAutoComplete","searchFilter","onSearchFilterChange","defaultActiveFirstOption","baseOptions","onClear","placeholder","tooltipContent","_jsxs","children","FormattedMessage","id","defaultMessage","values","whereBold","getDatasetHash","dataset","JSON","stringify","dataset_name","dataset_digest","_ref","name","styles","ExperimentLoggedModelListPageDatasetDropdown","selectedFilterDatasets","onToggleDataset","onClearSelectedDatasets","theme","useDesignSystemTheme","intl","useIntl","cachedDatasets","useRef","Map","allDatasets","model","_model$data","datasetHash","current","has","set","hash","serializedSelectedDatasets","DialogCombobox","componentId","label","formatMessage","stayOpenOnSelection","DialogComboboxCustomButtonTriggerWrapper","Button","endIcon","ChevronDownIcon","icon","TableIcon","length","_Fragment","DialogComboboxCountBadge","css","XCircleFillIcon","role","onClick","e","stopPropagation","preventDefault","_css","color","colors","textPlaceholder","fontSize","typography","fontSizeSm","marginLeft","spacing","xs","actionTertiaryTextHover","DialogComboboxContent","DialogComboboxOptionList","serializedDataset","DialogComboboxOptionListCheckboxItem","checked","includes","onChange","getSortableColumnLabel","colId","descriptor","ExperimentLoggedModelListPageKnownColumns","CreationTime","defineMessage","parsedColumn","parseLoggedModelMetricOrderByColumnId","metricKey","ExperimentLoggedModelListPageOrderBySelector","orderByColumn","orderByAsc","onChangeOrderBy","columnDefs","setFilter","useState","groupedOrderByOptions","lowerCaseFilter","toLowerCase","sortableColumnGroups","groupId","headerName","col","_col$groupId","startsWith","LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX","_col$children","some","group","push","DropdownMenu","Root","modal","Trigger","asChild","SortAscendingIcon","SortDescendingIcon","sortBy","Content","padding","sm","lg","width","display","gap","Input","prefix","SearchIcon","type","target","autoFocus","allowClear","ToggleIconButton","pressed","ArrowDownIcon","ArrowUpIcon","Group","Label","columnHeaderName","CheckboxItem","Boolean","ItemIndicator","GroupByLabels","LoggedModelsTableGroupByMode","RUNS","ExperimentLoggedModelListPageGroupBySelector","groupBy","onChangeGroupBy","currentSelectedLabel","ListBorderIcon","currentModeSelected","undefined","ExperimentLoggedModelListPageControls","sortingAndFilteringEnabled","onUpdateColumns","columnVisibility","viewMode","setViewMode","flexWrap","SegmentedControlGroup","coerceToEnum","TABLE","SegmentedControlButton","Tooltip","content","ListIcon","visuallyHidden","ChartLineIcon","ExperimentLoggedModelListPageColumnSelector","disabled","CHART","shouldEnableLoggedModelsGrouping","getMetricByDatasetChartDataKey","datasetName","createLocalStorageKey","storeIdentifier","version","chartsUIStateInitializer","compareRunCharts","compareRunSections","autoRefreshEnabled","isAccordionReordered","chartsSearchFilter","globalLineChartConfig","isDirty","chartsUIStateReducer","state","action","stateSetter","metricsByDatasets","dataAccessKey","deleted","RunsChartType","BAR","uuid","metricSectionId","isGenerated","displayName","uniq","isReordered","isEmpty","getExperimentLoggedModelsPageChartSetup","reconcileChartsAndSections","currentState","newCharts","_newCharts$compareRun","_newCharts$compareRun2","newChartsToAdd","newChart","_currentState$compare","find","chart","newSectionsToAdd","newSection","_currentState$compare2","section","initialConfig","useExperimentLoggedModelsChartsUIState","chartUIState","dispatchChartUIState","useReducer","loading","setLoading","useEffect","async","serializedData","localStorage","getItem","parse","loadPersistedDataFromStorage","then","dataToPersist","setItem","saveDataToStorage","updateUIState","useCallback","ExperimentLoggedModelListChartsImpl","memo","chartData","uiState","metricKeysByDataset","minWidth","_uiState$chartsSearch","_uiState$chartsSearch2","availableMetricKeys","flatMap","run","Object","keys","availableParamKeys","updateChartsUIState","useUpdateRunsChartsUIConfiguration","setSearch","search","configuredCardConfig","setConfiguredCardConfig","addNewChartCard","RunsChartsCardConfig","getEmptyChartCardByType","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","removeChart","useRemoveRunsChartFn","fullScreenChart","setFullScreenChart","fullscreenTooltipContextValue","runs","tooltipContextValue","getDataTraceLink","Routes","getExperimentLoggedModelDetailsPageRoute","emptyState","marginTop","Empty","description","backgroundColor","backgroundPrimary","paddingLeft","md","paddingRight","paddingBottom","borderTop","border","borderLeft","flex","overflow","flexDirection","paddingTop","RunsChartsTooltipWrapper","contextData","component","RunsChartsTooltipBody","RunsChartsDraggableCardsGridContextProvider","visibleChartCards","RunsChartsSectionAccordion","reorderCharts","noop","insertCharts","startEditChart","hideEmptyCharts","supportedChartTypes","SCATTER","noRunsSelectedEmptyState","RunsChartsFullScreenModal","onCancel","tooltipComponent","RunsChartsConfigureModal","chartRunData","metricKeyList","paramKeyList","config","onSubmit","ExperimentLoggedModelListCharts","experimentId","cachedLoggedModels","useMemoDeep","factory","deps","ref","isEqual","metricsByDataset","_model$data$metrics","orderBy","useExperimentLoggedModelAllMetricsByDataset","loadingState","isRowHidden","useExperimentLoggedModelListPageRowVisibilityContext","compact","index","_model$info","_model$info$name","_model$info2","_model$info3","_model$data$params$ma","_model$data2","_model$data2$params","model_id","images","keyBy","timestamp","step","dataKey","hidden","getStableColorForRun","useExperimentLoggedModelsChartsData","justifyContent","alignItems","Spinner","RunsChartsUIConfigurationContextProvider","ExperimentLoggedModelListPageImpl","useParams","isLoggedModelsFilteringAndSortingEnabled","rowVisibilityMap","rowVisibilityMode","isFilteringActive","setOrderBy","setColumnVisibility","setRowVisibilityMode","toggleRowVisibility","updateSearchQuery","toggleDataset","clearSelectedDatasets","setGroupBy","useLoggedModelsListPageState","invariant","useExperimentLoggedModelListPageMode","setParams","useSearchParams","get","mode","isFetching","isFetchingLoggedModels","isLoading","isLoadingLoggedModels","error","loggedModelsError","nextPageToken","loadMoreResults","useSearchLoggedModelsQuery","experimentIds","getOrderByRequestData","orderByField","parsedMetricOrderByColumn","datasetDigest","orderByDatasetName","orderByDatasetDigest","badRequestError","BadRequestError","relatedRunsData","useRelatedRunsDataForLoggedModels","compactColumnDefs","useExperimentLoggedModelListPageTableColumns","enableSortingByMetrics","tableAreaWidth","setTableAreaWidth","tableHidden","setTableHidden","isCompactTableMode","tableElement","ExperimentLoggedModelListPageTable","isLoadingMore","moreResultsAvailable","onLoadMore","onOrderByChange","groupModelsBy","resizableMaxWidth","useResizableMaxWidth","ExperimentLoggedModelOpenDatasetDetailsContextProvider","ExperimentLoggedModelListPageRowVisibilityContextProvider","visibilityMap","visibilityMode","Spacer","size","shrinks","message","Alert","closable","RunsChartsSetHighlightContextProvider","ExperimentViewRunsTableResizer","onResize","runListHidden","onHiddenChange","maxWidth","ExperimentLoggedModelListPage","ExperimentLoggedModelPageWrapper","getQueryKey","runUuid","queryFn","queryKey","MlflowService","getRun","run_id","_queryResults$find","runUuids","allMetricRunUuids","allSourceRunUuids","source_run_id","queryResults","useQueries","queries","cacheTime","Infinity","staleTime","refetchOnWindowFocus","retry","memoizedQueryResults","array","areArraysConsideredTheSame","every","element","i","_ref$current","useArrayMemo","PageFallback","_error$message","PageWrapper","title","image","DangerIcon","resetKey","ErrorBoundary","FallbackComponent","resetKeys","UserActionErrorHandler"],"sourceRoot":""}