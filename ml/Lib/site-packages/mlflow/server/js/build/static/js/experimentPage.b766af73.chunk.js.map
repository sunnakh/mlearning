{"version":3,"file":"static/js/experimentPage.b766af73.chunk.js","mappings":"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","sources":["experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsModeSwitchV2.tsx","experiment-tracking/components/experiment-page/components/ExperimentPageHeaderWithDescription.tsx","experiment-tracking/pages/experiment-page-tabs/EvaluationSubTabSelector.tsx","experiment-tracking/pages/experiment-page-tabs/LabelingSubTabSelector.tsx","experiment-tracking/components/experiment-page/hooks/useNavigateToExperimentPageTab.tsx","experiment-tracking/pages/experiment-page-tabs/ExperimentPageTabs.tsx","experiment-tracking/hooks/useExperimentReduxStoreCompat.ts","experiment-tracking/components/ExperimentPage.tsx","graphql/get-graphql-error.ts","experiment-tracking/hooks/useExperimentQuery.tsx"],"sourcesContent":["import { InfoPopover, NavigationMenu, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { PreviewBadge } from '@mlflow/mlflow/src/shared/building_blocks/PreviewBadge';\nimport { FeatureBadge } from '@mlflow/mlflow/src/shared/building_blocks/FeatureBadge';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../../../common/utils/RoutingUtils';\nimport Routes from '../../../../routes';\nimport type { ExperimentViewRunsCompareMode } from '../../../../types';\nimport { EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY } from '../../hooks/useExperimentPageViewMode';\nimport { shouldUseRenamedUnifiedTracesTab } from '../../../../../common/utils/FeatureUtils';\nimport { ExperimentPageTabName } from '../../../../constants';\n\nexport interface ExperimentViewRunsModeSwitchProps {\n  explicitViewMode?: ExperimentViewRunsCompareMode;\n  experimentId?: string;\n  activeTab: ExperimentPageTabName;\n}\n\n/**\n * Allows switching between modes of the experiment page view.\n * Based on new <NavigationMenu> component instead of the legacy <Tabs>.\n * Used only in logged models page (tab) for now, will be expanded to other tabs in the future.\n */\nexport const ExperimentViewRunsModeSwitchV2 = ({ experimentId = '', activeTab }: ExperimentViewRunsModeSwitchProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const getLinkToMode = (mode: ExperimentViewRunsCompareMode) =>\n    [Routes.getExperimentPageRoute(experimentId), [EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY, mode].join('=')].join(\n      '?',\n    );\n\n  const evaluationTabLabel = (\n    <FormattedMessage\n      defaultMessage=\"Evaluation\"\n      description=\"A button enabling compare runs (evaluation) mode on the experiment page\"\n    />\n  );\n\n  const migratedEvaluationTabElement = (\n    <span css={{ display: 'inline-flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n      <Typography.Text disabled bold>\n        {evaluationTabLabel}\n      </Typography.Text>\n      <InfoPopover popoverProps={{ maxWidth: 350 }}>\n        <FormattedMessage\n          defaultMessage='Accessing artifact evaluation by \"Evaluation\" tab is being discontinued. In order to use this feature, use <link>\"Artifacts evaluation\" mode in Runs tab</link> instead.'\n          description=\"A button enabling compare runs (evaluation) mode on the experiment page\"\n          values={{\n            link: (children) => <Link to={getLinkToMode('ARTIFACT')}>{children}</Link>,\n          }}\n        />\n      </InfoPopover>\n    </span>\n  );\n\n  const evaluationTabLink = shouldUseRenamedUnifiedTracesTab() ? (\n    <>{migratedEvaluationTabElement}</>\n  ) : (\n    <Link to={getLinkToMode('ARTIFACT')}>\n      {evaluationTabLabel}\n      <PreviewBadge />\n    </Link>\n  );\n\n  return (\n    <NavigationMenu.Root>\n      <NavigationMenu.List\n        css={{\n          // N/B: Styles from this component are customized in order to match the styles of\n          // the legacy <Tabs> component, so the transition to the new component is seamless.\n          marginBottom: 0,\n          li: {\n            lineHeight: theme.typography.lineHeightBase,\n            marginRight: theme.spacing.lg,\n            paddingTop: theme.spacing.xs * 1.5,\n            paddingBottom: theme.spacing.xs * 1.5,\n            '&>a': { padding: 0 },\n            alignItems: 'center',\n          },\n          'li+li': {\n            marginLeft: theme.spacing.xs * 0.5,\n          },\n        }}\n      >\n        <NavigationMenu.Item key=\"RUNS\">\n          <Link to={getLinkToMode('TABLE')}>\n            <FormattedMessage\n              defaultMessage=\"Runs\"\n              description=\"A button enabling combined runs table and charts mode on the experiment page\"\n            />\n          </Link>\n        </NavigationMenu.Item>\n        <NavigationMenu.Item key=\"MODELS\" active={activeTab === ExperimentPageTabName.Models}>\n          <Link to={Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Models)}>\n            <FormattedMessage\n              defaultMessage=\"Models\"\n              description=\"A button navigating to logged models table on the experiment page\"\n            />\n            <PreviewBadge />\n          </Link>\n        </NavigationMenu.Item>\n        <NavigationMenu.Item key=\"ARTIFACT\">{evaluationTabLink}</NavigationMenu.Item>\n        <NavigationMenu.Item key=\"TRACES\">\n          <Link to={getLinkToMode('TRACES')}>\n            <FormattedMessage\n              defaultMessage=\"Traces\"\n              description=\"A button enabling traces mode on the experiment page\"\n            />\n          </Link>\n        </NavigationMenu.Item>\n      </NavigationMenu.List>\n    </NavigationMenu.Root>\n  );\n};\n","import { useMemo, useState } from 'react';\nimport { useGetExperimentQuery } from '../../../hooks/useExperimentQuery';\nimport { ExperimentViewHeader, ExperimentViewHeaderSkeleton } from './header/ExperimentViewHeader';\nimport { ExperimentEntity } from '../../../types';\nimport { ExperimentViewDescriptionNotes } from './ExperimentViewDescriptionNotes';\nimport { NOTE_CONTENT_TAG } from '../../../utils/NoteUtils';\nimport { ApolloError } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { getGraphQLErrorMessage } from '../../../../graphql/get-graphql-error';\nimport { Alert, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentViewHeaderV2, ExperimentViewHeaderV2Skeleton } from './header/ExperimentViewHeaderV2';\nimport { shouldEnableExperimentPageHeaderV2 } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { ExperimentKind } from '../../../constants';\n\ntype GetExperimentReturnType = ReturnType<typeof useGetExperimentQuery>['data'];\n\n/**\n * Renders experiment page header with description and notes editor.\n */\nexport const ExperimentPageHeaderWithDescription = ({\n  experiment,\n  loading,\n  onNoteUpdated,\n  error,\n  experimentKindSelector,\n  inferredExperimentKind,\n}: {\n  experiment: GetExperimentReturnType;\n  loading?: boolean;\n  onNoteUpdated?: () => void;\n  error: ApolloError | ReturnType<typeof useGetExperimentQuery>['apiError'];\n  experimentKindSelector?: React.ReactNode;\n  inferredExperimentKind?: ExperimentKind;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [showAddDescriptionButton, setShowAddDescriptionButton] = useState(true);\n  const [editing, setEditing] = useState(false);\n\n  // Coerce experiment from the query result into the shape expected by <ExperimentViewHeader />\n  const experimentEntity = useMemo(() => {\n    const experimentResponse = experiment as GetExperimentReturnType;\n    if (!experimentResponse) return null;\n    return {\n      ...experimentResponse,\n      creationTime: Number(experimentResponse?.creationTime),\n      lastUpdateTime: Number(experimentResponse?.lastUpdateTime),\n    } as ExperimentEntity;\n  }, [experiment]);\n\n  const experimentDescription = experimentEntity?.tags?.find((tag) => tag.key === NOTE_CONTENT_TAG)?.value;\n  const errorMessage = getGraphQLErrorMessage(error);\n\n  if (loading) {\n    return shouldEnableExperimentPageHeaderV2() ? <ExperimentViewHeaderV2Skeleton /> : <ExperimentViewHeaderSkeleton />;\n  }\n\n  if (errorMessage) {\n    return (\n      <div css={{ height: theme.general.heightBase, marginTop: theme.spacing.sm, marginBottom: theme.spacing.md }}>\n        <Alert\n          componentId=\"mlflow.logged_model.list.header.error\"\n          type=\"error\"\n          message={\n            <FormattedMessage\n              defaultMessage=\"Experiment load error: {errorMessage}\"\n              description=\"Error message displayed on logged models page when experiment data fails to load\"\n              values={{ errorMessage }}\n            />\n          }\n          closable={false}\n        />\n      </div>\n    );\n  }\n\n  if (experimentEntity) {\n    return (\n      <>\n        {shouldEnableExperimentPageHeaderV2() ? (\n          <ExperimentViewHeaderV2\n            experiment={experimentEntity}\n            inferredExperimentKind={inferredExperimentKind}\n            setEditing={setEditing}\n            experimentKindSelector={experimentKindSelector}\n          />\n        ) : (\n          <ExperimentViewHeader\n            experiment={experimentEntity}\n            showAddDescriptionButton={showAddDescriptionButton}\n            setEditing={setEditing}\n          />\n        )}\n        <ExperimentViewDescriptionNotes\n          experiment={experimentEntity}\n          setShowAddDescriptionButton={setShowAddDescriptionButton}\n          editing={editing}\n          setEditing={setEditing}\n          onNoteUpdated={onNoteUpdated}\n          defaultValue={experimentDescription}\n        />\n      </>\n    );\n  }\n\n  return null;\n};\n","import { Spacer, Tabs, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentPageTabName } from '../../constants';\nimport Routes from '@mlflow/mlflow/src/experiment-tracking/routes';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { FormattedMessage } from 'react-intl';\n\nexport const EvaluationSubTabSelector = ({\n  experimentId,\n  activeTab,\n}: {\n  experimentId: string;\n  activeTab: ExperimentPageTabName;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <>\n      <Spacer size=\"sm\" shrinks={false} />\n      <div css={{ width: '100%', borderTop: `1px solid ${theme.colors.border}` }} />\n    </>\n  );\n};\n","import { Spacer, Tabs, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentPageTabName } from '../../constants';\nimport Routes from '@mlflow/mlflow/src/experiment-tracking/routes';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { FormattedMessage } from 'react-intl';\n\nexport const LabelingSubTabSelector = ({\n  experimentId,\n  activeTab,\n}: {\n  experimentId: string;\n  activeTab: ExperimentPageTabName;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  // BEGIN-EDGE\n  return (\n    <Tabs.Root\n      componentId=\"mlflow.labeling-sub-tab-selector\"\n      value={activeTab}\n      css={{ '& > div': { marginBottom: 0 } }}\n    >\n      <Tabs.List>\n        <Tabs.Trigger value={ExperimentPageTabName.LabelingSessions}>\n          <Link\n            css={{ color: theme.colors.textPrimary }}\n            to={Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.LabelingSessions)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Sessions\"\n              description=\"Label for the labeling sessions sub-tab in the MLflow experiment navbar\"\n            />\n          </Link>\n        </Tabs.Trigger>\n        <Tabs.Trigger value={ExperimentPageTabName.LabelingSchemas}>\n          <Link\n            css={{ color: theme.colors.textPrimary }}\n            to={Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.LabelingSchemas)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Schemas\"\n              description=\"Label for the labeling schemas sub-tab in the MLflow experiment navbar\"\n            />\n          </Link>\n        </Tabs.Trigger>\n      </Tabs.List>\n    </Tabs.Root>\n  );\n};\n","import { useEffect, useMemo } from 'react';\nimport { useNavigate } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { ExperimentKind, ExperimentPageTabName } from '../../../constants';\nimport { useGetExperimentQuery } from '../../../hooks/useExperimentQuery';\nimport { getExperimentKindFromTags } from '../../../utils/ExperimentKindUtils';\nimport { coerceToEnum } from '@databricks/web-shared/utils';\n\n/**\n * This hook navigates user to the appropriate tab in the experiment page based on the experiment kind.\n */\nexport const useNavigateToExperimentPageTab = ({\n  enabled,\n  experimentId,\n}: {\n  enabled?: boolean;\n  experimentId: string;\n}) => {\n  const navigate = useNavigate();\n\n  const { data: experiment, loading: loadingExperiment } = useGetExperimentQuery({\n    experimentId,\n    options: {\n      skip: !enabled,\n    },\n  });\n\n  const experimentKind = useMemo(() => {\n    if (loadingExperiment || !experiment) {\n      return null;\n    }\n    const experimentTags = experiment && 'tags' in experiment ? experiment?.tags : [];\n\n    if (experiment) {\n      const experimentKindTagValue = getExperimentKindFromTags(experimentTags);\n      return coerceToEnum(ExperimentKind, experimentKindTagValue, ExperimentKind.NO_INFERRED_TYPE);\n    }\n    return null;\n  }, [experiment, loadingExperiment]);\n\n  useEffect(() => {\n    if (!enabled || !experimentKind) {\n      return;\n    }\n\n    // By default, we navigate to the Runs tab\n    let targetTab = ExperimentPageTabName.Runs;\n\n    // For GENAI_DEVELOPMENT, we navigate to the Traces tab.\n    if (experimentKind === ExperimentKind.GENAI_DEVELOPMENT) {\n      targetTab = ExperimentPageTabName.Traces;\n    }\n\n    navigate(Routes.getExperimentPageTabRoute(experimentId, targetTab), { replace: true });\n  }, [navigate, experimentId, enabled, experimentKind]);\n\n  return {\n    isEnabled: enabled,\n    isLoading: enabled && loadingExperiment,\n  };\n};\n","import React, { useEffect } from 'react';\nimport { Button, PageWrapper, Spacer, ParagraphSkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport { PredefinedError } from '@databricks/web-shared/errors';\nimport invariant from 'invariant';\nimport { useNavigate, useParams, Outlet, matchPath, useLocation } from '../../../common/utils/RoutingUtils';\nimport { ExperimentViewRunsModeSwitchV2 } from '../../components/experiment-page/components/runs/ExperimentViewRunsModeSwitchV2';\nimport { useGetExperimentQuery } from '../../hooks/useExperimentQuery';\nimport { useExperimentReduxStoreCompat } from '../../hooks/useExperimentReduxStoreCompat';\nimport { ExperimentPageHeaderWithDescription } from '../../components/experiment-page/components/ExperimentPageHeaderWithDescription';\nimport { coerceToEnum } from '@databricks/web-shared/utils';\nimport { ExperimentKind, ExperimentPageTabName } from '../../constants';\nimport {\n  shouldEnableExperimentKindInference,\n  shouldEnableExperimentPageChildRoutes,\n  shouldEnableExperimentPageHeaderV2,\n} from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { useUpdateExperimentKind } from '../../components/experiment-page/hooks/useUpdateExperimentKind';\nimport { ExperimentViewHeaderKindSelector } from '../../components/experiment-page/components/header/ExperimentViewHeaderKindSelector';\nimport { getExperimentKindFromTags } from '../../utils/ExperimentKindUtils';\nimport { useInferExperimentKind } from '../../components/experiment-page/hooks/useInferExperimentKind';\nimport { ExperimentViewInferredKindModal } from '../../components/experiment-page/components/header/ExperimentViewInferredKindModal';\nimport Routes, { RoutePaths } from '../../routes';\nimport { EvaluationSubTabSelector } from './EvaluationSubTabSelector';\nimport { LabelingSubTabSelector } from './LabelingSubTabSelector';\nimport { useGetExperimentPageActiveTabByRoute } from '../../components/experiment-page/hooks/useGetExperimentPageActiveTabByRoute';\nimport { useNavigateToExperimentPageTab } from '../../components/experiment-page/hooks/useNavigateToExperimentPageTab';\n\nconst ExperimentRunsPage = React.lazy(() => import('../experiment-runs/ExperimentRunsPage'));\nconst ExperimentTracesPage = React.lazy(() => import('../experiment-traces/ExperimentTracesPage'));\n\nconst ExperimentLoggedModelListPage = React.lazy(\n  () => import('../experiment-logged-models/ExperimentLoggedModelListPage'),\n);\n\nconst ExperimentPageTabsImpl = () => {\n  const { experimentId, tabName } = useParams();\n  const { theme } = useDesignSystemTheme();\n  const navigate = useNavigate();\n\n  const { tabName: activeTabByRoute } = useGetExperimentPageActiveTabByRoute();\n  const activeTab = activeTabByRoute ?? coerceToEnum(ExperimentPageTabName, tabName, ExperimentPageTabName.Models);\n\n  invariant(experimentId, 'Experiment ID must be defined');\n  if (!shouldEnableExperimentPageChildRoutes()) {\n    // When child routes mode are not enabled, we expect the `tabName` to be defined.\n    // Otherwise, this component is just an outlet for the experiment page child routes.\n    invariant(tabName, 'Tab name must be defined');\n  }\n\n  const {\n    data: experiment,\n    loading: loadingExperiment,\n    refetch: refetchExperiment,\n    apiError: experimentApiError,\n    apolloError: experimentApolloError,\n  } = useGetExperimentQuery({\n    experimentId,\n  });\n\n  const { mutate: updateExperimentKind, isLoading: updatingExperimentKind } =\n    useUpdateExperimentKind(refetchExperiment);\n\n  const experimentError = experimentApiError ?? experimentApolloError;\n\n  // Put the experiment in the redux store so that the logged models page can transition smoothly\n  useExperimentReduxStoreCompat(experiment);\n\n  // For showstopper experiment fetch errors, we want it to hit the error boundary\n  // so that the user can see the error message\n  if (experimentError instanceof PredefinedError) {\n    throw experimentError;\n  }\n\n  const experimentTags = experiment && 'tags' in experiment ? experiment?.tags : [];\n  const canUpdateExperimentKind = true;\n\n  const experimentKind = getExperimentKindFromTags(experimentTags);\n\n  const {\n    inferredExperimentKind,\n    inferredExperimentPageTab,\n    isLoading: inferringExperimentType,\n    dismiss,\n  } = useInferExperimentKind({\n    experimentId,\n    isLoadingExperiment: loadingExperiment,\n    enabled: shouldEnableExperimentKindInference() && !experimentKind,\n    experimentTags,\n    updateExperimentKind,\n  });\n\n  // Check if the user landed on the experiment page without a specific tab (sub-route)...\n  const { pathname } = useLocation();\n  const matchedExperimentPageWithoutTab = Boolean(matchPath(RoutePaths.experimentPage, pathname));\n  // ...if true, we want to navigate to the appropriate tab based on the experiment kind\n  useNavigateToExperimentPageTab({\n    enabled: shouldEnableExperimentPageChildRoutes() && matchedExperimentPageWithoutTab,\n    experimentId,\n  });\n\n  useEffect(() => {\n    // If the experiment kind is inferred, we want to navigate to the appropriate tab.\n    // Should fire once when the experiment kind is inferred.\n    if (inferredExperimentPageTab) {\n      navigate(Routes.getExperimentPageTabRoute(experimentId, inferredExperimentPageTab), { replace: true });\n    }\n  }, [experimentId, navigate, inferredExperimentPageTab]);\n\n  if (\n    inferredExperimentKind === ExperimentKind.NO_INFERRED_TYPE &&\n    canUpdateExperimentKind &&\n    shouldEnableExperimentKindInference()\n  ) {\n    return (\n      <ExperimentViewInferredKindModal\n        onConfirm={(kind) => {\n          updateExperimentKind(\n            { experimentId, kind },\n            {\n              onSettled: () => {\n                dismiss();\n                if (shouldEnableExperimentPageChildRoutes() && kind === ExperimentKind.GENAI_DEVELOPMENT) {\n                  // If the experiment kind is GENAI_DEVELOPMENT, we want to navigate to the Traces tab\n                  navigate(Routes.getExperimentPageTabRoute(experimentId, ExperimentPageTabName.Traces), {\n                    replace: true,\n                  });\n                }\n              },\n            },\n          );\n        }}\n        onDismiss={dismiss}\n      />\n    );\n  }\n\n  return (\n    <>\n      <ExperimentPageHeaderWithDescription\n        experiment={experiment}\n        loading={loadingExperiment || inferringExperimentType}\n        onNoteUpdated={refetchExperiment}\n        error={experimentError}\n        inferredExperimentKind={inferredExperimentKind}\n        experimentKindSelector={\n          <ExperimentViewHeaderKindSelector\n            value={experimentKind}\n            inferredExperimentKind={inferredExperimentKind}\n            onChange={(kind) => updateExperimentKind({ experimentId, kind })}\n            isUpdating={updatingExperimentKind || inferringExperimentType}\n            key={inferredExperimentKind}\n            readOnly={!canUpdateExperimentKind}\n          />\n        }\n      />\n      {shouldEnableExperimentPageHeaderV2() ? (\n        activeTab === ExperimentPageTabName.EvaluationRuns || activeTab === ExperimentPageTabName.Datasets ? (\n          <EvaluationSubTabSelector experimentId={experimentId} activeTab={activeTab} />\n        ) : activeTab === ExperimentPageTabName.LabelingSessions ||\n          activeTab === ExperimentPageTabName.LabelingSchemas ? (\n          <LabelingSubTabSelector experimentId={experimentId} activeTab={activeTab} />\n        ) : (\n          <>\n            <Spacer size=\"sm\" shrinks={false} />\n            <div css={{ width: '100%', borderTop: `1px solid ${theme.colors.border}` }} />\n          </>\n        )\n      ) : (\n        <>\n          <Spacer size=\"sm\" shrinks={false} />\n          <ExperimentViewRunsModeSwitchV2 experimentId={experimentId} activeTab={activeTab} />\n        </>\n      )}\n      <Spacer size=\"sm\" shrinks={false} />\n      <React.Suspense\n        fallback={\n          <>\n            {[...Array(8).keys()].map((i) => (\n              <ParagraphSkeleton label=\"Loading...\" key={i} seed={`s-${i}`} />\n            ))}\n          </>\n        }\n      >\n        {shouldEnableExperimentPageChildRoutes() ? (\n          <Outlet />\n        ) : (\n          <>\n            {activeTab === ExperimentPageTabName.Traces && <ExperimentTracesPage />}\n            {activeTab === ExperimentPageTabName.Runs && <ExperimentRunsPage />}\n            {activeTab === ExperimentPageTabName.Models && <ExperimentLoggedModelListPage />}\n          </>\n        )}\n      </React.Suspense>\n    </>\n  );\n};\n\nconst ExperimentPageTabs = () => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        padding: theme.spacing.md,\n        paddingTop: theme.spacing.lg,\n      }}\n    >\n      <ExperimentPageTabsImpl />\n    </div>\n  );\n};\n\nexport default ExperimentPageTabs;\n","import { useDispatch } from 'react-redux';\nimport type { ReduxState, ThunkDispatch } from '../../redux-types';\nimport { useEffect } from 'react';\nimport { GET_EXPERIMENT_API } from '../actions';\nimport { fulfilled } from '../../common/utils/ActionUtils';\nimport type { useGetExperimentQuery } from './useExperimentQuery';\nimport { get } from 'lodash';\n\n/**\n * A small helper hook that consumes experiment from the GraphQL response and puts it in the redux store.\n * Helps to keep the redux store in sync with the GraphQL data so page transitions are smooth.\n */\nexport const useExperimentReduxStoreCompat = (experimentResponse: ReturnType<typeof useGetExperimentQuery>['data']) => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  useEffect(() => {\n    const experimentId = get(experimentResponse, 'experimentId');\n    if (experimentResponse && experimentId) {\n      dispatch((thunkDispatch: ThunkDispatch, getStore: () => ReduxState) => {\n        const alreadyStored = Boolean(getStore().entities?.experimentsById?.[experimentId]);\n        if (!alreadyStored) {\n          thunkDispatch({\n            type: fulfilled(GET_EXPERIMENT_API),\n            payload: { experiment: experimentResponse },\n          });\n        }\n      });\n    }\n  }, [experimentResponse, dispatch]);\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { getExperimentApi, setCompareExperiments, setExperimentTagApi } from '../actions';\nimport { useParams } from '../../common/utils/RoutingUtils';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { GetExperimentsContextProvider } from './experiment-page/contexts/GetExperimentsContext';\nimport { ExperimentView } from './experiment-page/ExperimentView';\nimport ExperimentPageTabs from '../pages/experiment-page-tabs/ExperimentPageTabs';\nimport { shouldEnableExperimentPageChildRoutes } from '../../common/utils/FeatureUtils';\n\nconst getExperimentActions = {\n  setExperimentTagApi,\n  getExperimentApi,\n  setCompareExperiments,\n};\n\nconst ExperimentPage = () => {\n  const { theme } = useDesignSystemTheme();\n\n  const { tabName } = useParams();\n  const shouldRenderTabbedView = shouldEnableExperimentPageChildRoutes() || Boolean(tabName);\n\n  return (\n    <div css={{ display: 'flex', height: '100%' }}>\n      {shouldRenderTabbedView && <ExperimentPageTabs />}\n      {!shouldRenderTabbedView && (\n        // Main content with the experiment view\n        <div css={{ height: '100%', flex: 1, padding: theme.spacing.md, width: '100%' }}>\n          <GetExperimentsContextProvider actions={getExperimentActions}>\n            <ExperimentView />\n          </GetExperimentsContextProvider>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ExperimentPage;\n","import { ApolloError } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\n\ninterface CommonGraphQLApiError {\n  code: string | null;\n  message: string | null;\n}\n\nexport const getGraphQLErrorMessage = (error?: CommonGraphQLApiError | ApolloError | Error | any) => {\n  if (!error) {\n    return undefined;\n  }\n  if (error instanceof ApolloError) {\n    if (error.graphQLErrors.length > 0) {\n      return error.graphQLErrors.map((e) => e.toString()).join(', ');\n    }\n  }\n\n  if ('message' in error) {\n    return error.message;\n  }\n\n  return error.toString();\n};\n","import { gql, QueryHookOptions } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { useQuery } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables } from '../../graphql/__generated__/graphql';\nimport { isArray } from 'lodash';\nimport { NotFoundError } from '@databricks/web-shared/errors';\n\nconst GET_EXPERIMENT_QUERY = gql`\n  query MlflowGetExperimentQuery($input: MlflowGetExperimentInput!) @component(name: \"MLflow.ExperimentRunTracking\") {\n    mlflowGetExperiment(input: $input) {\n      apiError {\n        code\n        message\n      }\n      experiment {\n        artifactLocation\n        creationTime\n        experimentId\n        lastUpdateTime\n        lifecycleStage\n        name\n        tags {\n          key\n          value\n        }\n      }\n    }\n  }\n`;\n\nexport type UseGetExperimentQueryResultExperiment = NonNullable<\n  MlflowGetExperimentQuery['mlflowGetExperiment']\n>['experiment'];\n\n/* eslint-disable react-hooks/rules-of-hooks */\nexport const useGetExperimentQuery = ({\n  experimentId,\n  options = {},\n}: {\n  experimentId?: string;\n  options?: QueryHookOptions<MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables>;\n}) => {\n  const {\n    data,\n    loading,\n    error: apolloError,\n    refetch,\n  } = useQuery<MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables>(GET_EXPERIMENT_QUERY, {\n    variables: {\n      input: {\n        experimentId,\n      },\n    },\n    skip: !experimentId,\n    ...options,\n  });\n\n  // Extract the single experiment entity from the response\n  const experimentEntity: UseGetExperimentQueryResultExperiment | undefined = data?.mlflowGetExperiment?.experiment;\n\n  const getApiError = () => {\n    return data?.mlflowGetExperiment?.apiError;\n  };\n\n  return {\n    loading,\n    data: experimentEntity,\n    refetch,\n    apolloError: apolloError,\n    apiError: getApiError(),\n  } as const;\n};\n"],"names":["ExperimentViewRunsModeSwitchV2","experimentId","activeTab","theme","useDesignSystemTheme","getLinkToMode","mode","Routes","getExperimentPageRoute","EXPERIMENT_PAGE_VIEW_MODE_QUERY_PARAM_KEY","join","evaluationTabLabel","_jsx","FormattedMessage","id","defaultMessage","migratedEvaluationTabElement","_jsxs","css","_css","display","gap","spacing","xs","alignItems","children","Typography","Text","disabled","bold","InfoPopover","popoverProps","maxWidth","values","link","Link","to","evaluationTabLink","shouldUseRenamedUnifiedTracesTab","_Fragment","PreviewBadge","NavigationMenu","Root","List","marginBottom","li","lineHeight","typography","lineHeightBase","marginRight","lg","paddingTop","paddingBottom","padding","marginLeft","Item","active","ExperimentPageTabName","Models","getExperimentPageTabRoute","ExperimentPageHeaderWithDescription","experiment","loading","onNoteUpdated","error","experimentKindSelector","inferredExperimentKind","_experimentEntity$tag","_experimentEntity$tag2","showAddDescriptionButton","setShowAddDescriptionButton","useState","editing","setEditing","experimentEntity","useMemo","experimentResponse","creationTime","Number","lastUpdateTime","experimentDescription","tags","find","tag","key","NOTE_CONTENT_TAG","value","errorMessage","getGraphQLErrorMessage","shouldEnableExperimentPageHeaderV2","ExperimentViewHeaderV2Skeleton","ExperimentViewHeaderSkeleton","height","general","heightBase","marginTop","sm","md","Alert","componentId","type","message","closable","ExperimentViewHeaderV2","ExperimentViewHeader","ExperimentViewDescriptionNotes","defaultValue","EvaluationSubTabSelector","Spacer","size","shrinks","width","borderTop","colors","border","_ref","name","styles","LabelingSubTabSelector","Tabs","Trigger","LabelingSessions","color","textPrimary","LabelingSchemas","ExperimentRunsPage","React","ExperimentTracesPage","ExperimentLoggedModelListPage","ExperimentPageTabsImpl","tabName","useParams","navigate","useNavigate","activeTabByRoute","useGetExperimentPageActiveTabByRoute","coerceToEnum","invariant","shouldEnableExperimentPageChildRoutes","data","loadingExperiment","refetch","refetchExperiment","apiError","experimentApiError","apolloError","experimentApolloError","useGetExperimentQuery","mutate","updateExperimentKind","isLoading","updatingExperimentKind","useUpdateExperimentKind","experimentError","dispatch","useDispatch","useEffect","get","thunkDispatch","getStore","_getStore$entities","_getStore$entities$ex","Boolean","entities","experimentsById","fulfilled","GET_EXPERIMENT_API","payload","useExperimentReduxStoreCompat","PredefinedError","experimentTags","experimentKind","getExperimentKindFromTags","inferredExperimentPageTab","inferringExperimentType","dismiss","useInferExperimentKind","isLoadingExperiment","enabled","shouldEnableExperimentKindInference","pathname","useLocation","matchedExperimentPageWithoutTab","matchPath","RoutePaths","experimentPage","useNavigateToExperimentPageTab","options","skip","experimentKindTagValue","ExperimentKind","NO_INFERRED_TYPE","targetTab","Runs","GENAI_DEVELOPMENT","Traces","replace","ExperimentViewInferredKindModal","onConfirm","kind","onSettled","onDismiss","ExperimentViewHeaderKindSelector","onChange","isUpdating","readOnly","EvaluationRuns","Datasets","fallback","Array","keys","map","i","ParagraphSkeleton","label","seed","Outlet","ExperimentPageTabs","flex","overflow","flexDirection","getExperimentActions","setExperimentTagApi","getExperimentApi","setCompareExperiments","ExperimentPage","shouldRenderTabbedView","GetExperimentsContextProvider","actions","ExperimentView","ApolloError","graphQLErrors","length","e","toString","GET_EXPERIMENT_QUERY","gql","_data$mlflowGetExperi","useQuery","variables","input","mlflowGetExperiment","getApiError","_data$mlflowGetExperi2"],"sourceRoot":""}